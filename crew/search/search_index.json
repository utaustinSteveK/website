{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Crew Management API Documentation","text":"<p>Welcome to the comprehensive developer documentation for the Crew Management Backend API.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li> <p> Quickstart Guide</p> <p>Get up and running in 5 minutes with our step-by-step guide</p> </li> <li> <p> API Reference</p> <p>Complete API documentation with examples and response schemas</p> </li> <li> <p> MCP Tools</p> <p>AI/LLM integration tools for automated crew management</p> </li> <li> <p> Testing Guide</p> <p>TDD approach, test strategies, and coverage reports</p> </li> </ul>"},{"location":"#features","title":"Features","text":""},{"location":"#secure-authentication","title":"\ud83d\udd10 Secure Authentication","text":"<ul> <li>JWT-based authentication with refresh tokens</li> <li>Session management and concurrent login control</li> <li>Role-based access control (RBAC)</li> <li>Two-factor authentication support</li> </ul>"},{"location":"#crew-management","title":"\ud83d\udc65 Crew Management","text":"<ul> <li>Complete CRUD operations for crew data</li> <li>Advanced search and filtering capabilities</li> <li>Bulk operations for efficiency</li> <li>Document and certificate tracking</li> </ul>"},{"location":"#performance-appraisals","title":"\ud83d\udcca Performance Appraisals","text":"<ul> <li>Structured evaluation workflow</li> <li>Multi-stage approval process</li> <li>Historical tracking and trends</li> <li>Export capabilities for reports</li> </ul>"},{"location":"#vessel-management","title":"\ud83d\udea2 Vessel Management","text":"<ul> <li>Fleet tracking and assignments</li> <li>Compliance monitoring</li> <li>Crew rotation planning</li> <li>Certificate expiry alerts</li> </ul>"},{"location":"#mcp-integration","title":"\ud83e\udd16 MCP Integration","text":"<ul> <li>AI-powered crew search</li> <li>Automated appraisal creation</li> <li>Certificate validation</li> <li>Compliance reporting</li> </ul>"},{"location":"#enterprise-testing","title":"\ud83e\uddea Enterprise Testing","text":"<ul> <li>Test-driven development (TDD)</li> <li>Contract testing with OpenAPI</li> <li>Integration test suites</li> <li>Performance benchmarks</li> </ul>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"Client Applications\"\n        A[Web App&lt;br/&gt;React 18.3]\n        B[Mobile App]\n        C[AI/LLM Tools]\n    end\n\n    subgraph \"API Gateway\"\n        D[FastAPI&lt;br/&gt;v0.109.0]\n    end\n\n    subgraph \"Core Services\"\n        E[Auth Service]\n        F[Crew Service]\n        G[Appraisal Service]\n        H[Vessel Service]\n        I[MCP Server]\n    end\n\n    subgraph \"Data Layer\"\n        J[(PostgreSQL 15)]\n        K[(Redis Cache)]\n        L[S3 Storage]\n    end\n\n    A --&gt; D\n    B --&gt; D\n    C --&gt; I\n\n    D --&gt; E\n    D --&gt; F\n    D --&gt; G\n    D --&gt; H\n    D --&gt; I\n\n    E --&gt; J\n    F --&gt; J\n    G --&gt; J\n    H --&gt; J\n\n    E --&gt; K\n    F --&gt; K</code></pre>"},{"location":"#technology-stack","title":"Technology Stack","text":"Component Technology Version Backend Framework FastAPI 0.109.0 Language Python 3.11+ Database PostgreSQL 15+ ORM SQLAlchemy 2.0+ Cache Redis 7.0+ Authentication JWT (PyJWT) 2.8+ API Documentation OpenAPI 3.1 MCP Integration FastMCP 2.0 Testing Pytest 7.4+ Container Docker 24+ Orchestration Kubernetes 1.28+"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li>PostgreSQL 15 or higher</li> <li>Redis 7.0 or higher (optional for caching)</li> <li>Docker and Docker Compose (for containerized deployment)</li> </ul>"},{"location":"#quick-installation","title":"Quick Installation","text":"<pre><code># Clone the repository\ngit clone https://github.com/example/crewing-backend.git\ncd crewing-backend/backend\n\n# Install dependencies\npip install -r requirements.txt\n\n# Set up environment variables\ncp .env.example .env\n# Edit .env with your configuration\n\n# Run database migrations\nalembic upgrade head\n\n# Start the development server\nuvicorn src.main:app --reload --port 8000\n</code></pre>"},{"location":"#docker-deployment","title":"Docker Deployment","text":"<pre><code># Navigate to docker directory\ncd backend/docker\n\n# Start all services\ndocker-compose up -d\n\n# Check service health\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f backend\n</code></pre>"},{"location":"#api-endpoints-overview","title":"API Endpoints Overview","text":""},{"location":"#authentication","title":"Authentication","text":"<ul> <li><code>POST /api/v1/auth/login</code> - User login</li> <li><code>POST /api/v1/auth/logout</code> - User logout</li> <li><code>POST /api/v1/auth/refresh</code> - Refresh access token</li> <li><code>GET /api/v1/auth/me</code> - Get current user</li> </ul>"},{"location":"#crew-management_1","title":"Crew Management","text":"<ul> <li><code>GET /api/v1/crew-members</code> - List crew members</li> <li><code>POST /api/v1/crew-members</code> - Create crew member</li> <li><code>GET /api/v1/crew-members/{id}</code> - Get crew member details</li> <li><code>PUT /api/v1/crew-members/{id}</code> - Update crew member</li> <li><code>DELETE /api/v1/crew-members/{id}</code> - Delete crew member</li> </ul>"},{"location":"#appraisals","title":"Appraisals","text":"<ul> <li><code>GET /api/v1/appraisals</code> - List appraisals</li> <li><code>POST /api/v1/appraisals</code> - Create appraisal</li> <li><code>POST /api/v1/appraisals/{id}/submit</code> - Submit for review</li> <li><code>POST /api/v1/appraisals/{id}/approve</code> - Approve appraisal</li> </ul>"},{"location":"#mcp-tools","title":"MCP Tools","text":"<ul> <li><code>POST /mcp/tools/search_crew</code> - AI-powered crew search</li> <li><code>POST /mcp/tools/create_appraisal</code> - Automated appraisal</li> <li><code>POST /mcp/tools/check_certificates</code> - Certificate validation</li> </ul>"},{"location":"#development-workflow","title":"Development Workflow","text":""},{"location":"#1-test-driven-development","title":"1. Test-Driven Development","text":"<pre><code># Write contract tests first\npytest tests/contract/ -v\n\n# Implement features\n# Run all tests\npytest tests/ -v --cov=src\n\n# Check coverage\npytest --cov-report=html\n</code></pre>"},{"location":"#2-code-quality","title":"2. Code Quality","text":"<pre><code># Format code\nblack src/ tests/\n\n# Sort imports\nisort src/ tests/\n\n# Type checking\nmypy src/\n\n# Linting\nruff check src/\n</code></pre>"},{"location":"#3-documentation","title":"3. Documentation","text":"<pre><code># Build documentation\nmkdocs build\n\n# Serve locally\nmkdocs serve --dev-addr 0.0.0.0:8001\n\n# Deploy to GitHub Pages\nmkdocs gh-deploy\n</code></pre>"},{"location":"#support-resources","title":"Support &amp; Resources","text":""},{"location":"#documentation","title":"Documentation","text":"<ul> <li>API Reference - Complete API documentation</li> <li>Architecture Guide - System design details</li> <li>Deployment Guide - Production deployment</li> <li>FAQ - Frequently asked questions</li> </ul>"},{"location":"#community","title":"Community","text":"<ul> <li>GitHub Issues - Report bugs or request features</li> <li>Discussions - Ask questions and share ideas</li> <li>Slack Channel - Real-time support</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details on:</p> <ul> <li>Code of Conduct</li> <li>Development setup</li> <li>Submitting pull requests</li> <li>Coding standards</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"#changelog","title":"Changelog","text":"<p>View the full changelog for a detailed list of changes in each release.</p> <p>Latest Version</p> <p>v1.0.0 - Released December 2024</p> <ul> <li>Initial production release</li> <li>Complete CRUD operations for crew management</li> <li>MCP tool integration</li> <li>Comprehensive test coverage</li> </ul> <p>Need Help?</p> <p>Check out our Quickstart Guide or browse the FAQ for common questions.</p>"},{"location":"api/","title":"API Reference","text":"<p>Welcome to the Crew Appraisals System API documentation. This RESTful API provides comprehensive endpoints for managing crew members, appraisals, vessels, and forms in a maritime crew management system.</p>"},{"location":"api/#base-url","title":"Base URL","text":"<p>The API is served from the following base URL:</p> <pre><code>https://api.crewappraisals.com/api/v1\n</code></pre> <p>For development environments:</p> <pre><code>http://localhost:8000/api/v1\n</code></pre>"},{"location":"api/#api-versioning","title":"API Versioning","text":"<p>The API uses URL path versioning with the prefix <code>/api/v1</code>. All endpoints documented here are part of API version 1.</p>"},{"location":"api/#authentication","title":"Authentication","text":"<p>The API uses Bearer Token authentication with JWT (JSON Web Tokens). Most endpoints require authentication except for:</p> <ul> <li><code>POST /auth/login</code> - User login</li> <li><code>POST /auth/register</code> - User registration</li> <li><code>GET /health</code> - Health check endpoints</li> </ul>"},{"location":"api/#authentication-header","title":"Authentication Header","text":"<p>Include the access token in the <code>Authorization</code> header:</p> <pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre>"},{"location":"api/#token-management","title":"Token Management","text":"<ul> <li>Access tokens expire after 30 minutes</li> <li>Refresh tokens expire after 7 days</li> <li>Use the <code>/auth/refresh</code> endpoint to get new access tokens</li> </ul>"},{"location":"api/#requestresponse-format","title":"Request/Response Format","text":""},{"location":"api/#content-types","title":"Content Types","text":"<p>All API requests and responses use JSON format:</p> <ul> <li>Request Content-Type: <code>application/json</code></li> <li>Response Content-Type: <code>application/json</code></li> </ul>"},{"location":"api/#request-structure","title":"Request Structure","text":"<pre><code>{\n  \"field1\": \"value1\",\n  \"field2\": \"value2\"\n}\n</code></pre>"},{"location":"api/#response-structure","title":"Response Structure","text":""},{"location":"api/#success-responses","title":"Success Responses","text":"<pre><code>{\n  \"success\": true,\n  \"data\": {\n    // Response data\n  },\n  \"message\": \"Operation completed successfully\"\n}\n</code></pre>"},{"location":"api/#error-responses","title":"Error Responses","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"ERROR_CODE\",\n    \"message\": \"Error description\",\n    \"details\": {}\n  }\n}\n</code></pre>"},{"location":"api/#http-status-codes","title":"HTTP Status Codes","text":"<p>The API uses standard HTTP status codes:</p> Status Code Description <code>200</code> OK - Request successful <code>201</code> Created - Resource created successfully <code>204</code> No Content - Request successful, no content returned <code>400</code> Bad Request - Invalid request parameters <code>401</code> Unauthorized - Authentication required or failed <code>403</code> Forbidden - Insufficient permissions <code>404</code> Not Found - Resource not found <code>409</code> Conflict - Resource conflict (e.g., duplicate data) <code>422</code> Unprocessable Entity - Validation errors <code>429</code> Too Many Requests - Rate limit exceeded <code>500</code> Internal Server Error - Server error"},{"location":"api/#rate-limiting","title":"Rate Limiting","text":"<p>The API implements rate limiting to ensure fair usage:</p> <ul> <li>Rate Limit: 60 requests per minute per API key</li> <li>Burst Limit: 10 additional requests allowed in burst</li> <li>Headers: Rate limit information is returned in response headers:</li> <li><code>X-RateLimit-Limit</code>: Request limit per minute</li> <li><code>X-RateLimit-Remaining</code>: Remaining requests in current window</li> <li><code>X-RateLimit-Reset</code>: Time when rate limit resets (Unix timestamp)</li> </ul> <p>When rate limit is exceeded, the API returns a <code>429 Too Many Requests</code> status.</p>"},{"location":"api/#pagination","title":"Pagination","text":"<p>List endpoints support cursor-based pagination with the following parameters:</p>"},{"location":"api/#query-parameters","title":"Query Parameters","text":"<ul> <li><code>page</code> (integer): Page number (default: 1)</li> <li><code>size</code> (integer): Number of items per page (default: 20, max: 100)</li> </ul>"},{"location":"api/#response-format","title":"Response Format","text":"<pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"items\": [\n      // Array of resources\n    ],\n    \"pagination\": {\n      \"page\": 1,\n      \"size\": 20,\n      \"total\": 150,\n      \"total_pages\": 8,\n      \"has_next\": true,\n      \"has_previous\": false\n    }\n  }\n}\n</code></pre>"},{"location":"api/#filtering-and-searching","title":"Filtering and Searching","text":"<p>Many list endpoints support filtering and searching:</p>"},{"location":"api/#common-filter-parameters","title":"Common Filter Parameters","text":"<ul> <li><code>search</code> (string): Full-text search across relevant fields</li> <li><code>status</code> (string): Filter by status</li> <li><code>created_after</code> (ISO datetime): Filter by creation date</li> <li><code>created_before</code> (ISO datetime): Filter by creation date</li> </ul>"},{"location":"api/#search-syntax","title":"Search Syntax","text":"<p>The search parameter supports basic text matching across multiple fields. Specific search syntax varies by endpoint.</p>"},{"location":"api/#data-types-and-formats","title":"Data Types and Formats","text":""},{"location":"api/#dates-and-times","title":"Dates and Times","text":"<p>All datetime fields use ISO 8601 format with timezone information:</p> <pre><code>2024-01-15T10:30:00Z\n</code></pre>"},{"location":"api/#uuids","title":"UUIDs","text":"<p>Resource identifiers use UUID v4 format:</p> <pre><code>550e8400-e29b-41d4-a716-446655440000\n</code></pre>"},{"location":"api/#email-addresses","title":"Email Addresses","text":"<p>Email fields are validated according to RFC 5322 standards.</p>"},{"location":"api/#phone-numbers","title":"Phone Numbers","text":"<p>Phone numbers are stored as strings and should include country codes when applicable.</p>"},{"location":"api/#error-handling","title":"Error Handling","text":""},{"location":"api/#validation-errors","title":"Validation Errors","text":"<p>Field validation errors return detailed information:</p> <pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Request validation failed\",\n    \"details\": {\n      \"field_errors\": {\n        \"email\": [\"Invalid email format\"],\n        \"password\": [\"Password must be at least 8 characters\"]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"api/#authentication-errors","title":"Authentication Errors","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"AUTHENTICATION_FAILED\",\n    \"message\": \"Invalid credentials\"\n  }\n}\n</code></pre>"},{"location":"api/#permission-errors","title":"Permission Errors","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"PERMISSION_DENIED\",\n    \"message\": \"Insufficient permissions for this operation\"\n  }\n}\n</code></pre>"},{"location":"api/#sdks-and-examples","title":"SDKs and Examples","text":""},{"location":"api/#curl-examples","title":"cURL Examples","text":"<p>All endpoint documentation includes cURL examples for easy testing.</p>"},{"location":"api/#python-examples","title":"Python Examples","text":"<p>Python examples using the <code>requests</code> library are provided for common operations.</p>"},{"location":"api/#api-resources","title":"API Resources","text":"<p>The API provides the following main resource groups:</p> <ul> <li>Authentication - User authentication and session management</li> <li>Crew Management - Crew member CRUD operations and management</li> <li>Appraisals - Performance appraisal management</li> <li>Vessels - Vessel management and assignments</li> <li>Forms - Dynamic form management and submissions</li> </ul>"},{"location":"api/#openapi-specification","title":"OpenAPI Specification","text":"<p>The complete OpenAPI 3.0 specification is available at:</p> <ul> <li>Development: <code>http://localhost:8000/docs</code> (Swagger UI)</li> <li>Development: <code>http://localhost:8000/redoc</code> (ReDoc)</li> <li>JSON: <code>http://localhost:8000/openapi.json</code></li> </ul>"},{"location":"api/#support","title":"Support","text":"<p>For API support, please contact the development team or refer to the system documentation.</p>"},{"location":"api/appraisals/","title":"Appraisals API","text":"<p>The Appraisals API provides comprehensive endpoints for managing crew performance evaluations, including creating appraisals, tracking performance metrics, managing approval workflows, and generating reports.</p>"},{"location":"api/appraisals/#overview","title":"Overview","text":"<p>The Performance Appraisal system enables systematic evaluation of crew members' performance, skills, and competencies. It supports:</p> <ul> <li>Performance Evaluations: Structured assessment of crew member performance</li> <li>Skills Assessment: Evaluation of technical and soft skills</li> <li>Goal Setting: Setting and tracking performance objectives</li> <li>Approval Workflows: Multi-level approval process for appraisals</li> <li>Historical Tracking: Performance trends and improvement tracking</li> <li>Reporting: Performance analytics and insights</li> </ul>"},{"location":"api/appraisals/#appraisal-process","title":"Appraisal Process","text":""},{"location":"api/appraisals/#workflow-stages","title":"Workflow Stages","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Draft\n    Draft --&gt; In_Review: Submit for Review\n    In_Review --&gt; Approved: Supervisor Approves\n    In_Review --&gt; Needs_Revision: Request Changes\n    Needs_Revision --&gt; In_Review: Resubmit\n    Approved --&gt; Final: HR Final Approval\n    In_Review --&gt; Rejected: Reject\n    Final --&gt; [*]</code></pre>"},{"location":"api/appraisals/#appraisal-types","title":"Appraisal Types","text":"Type Description Frequency Participants <code>annual</code> Annual performance review Yearly Supervisor, HR, Self <code>probation</code> Probationary period review After probation Supervisor, HR <code>promotion</code> Promotion assessment As needed Senior Management, HR <code>departure</code> Exit evaluation Upon leaving Supervisor, HR <code>360_feedback</code> Multi-source feedback Semi-annually Peers, Subordinates, Supervisors"},{"location":"api/appraisals/#data-model","title":"Data Model","text":""},{"location":"api/appraisals/#appraisal-object","title":"Appraisal Object","text":"Field Type Description <code>id</code> UUID Unique appraisal identifier <code>crew_member_id</code> UUID Crew member being appraised <code>appraiser_id</code> UUID Primary appraiser (supervisor) <code>period_start</code> date Appraisal period start date <code>period_end</code> date Appraisal period end date <code>type</code> string Type of appraisal <code>status</code> string Current appraisal status <code>overall_rating</code> number Overall performance rating (1-5) <code>vessel_id</code> UUID Vessel where performance was observed"},{"location":"api/appraisals/#performance-categories","title":"Performance Categories","text":"<p>The system evaluates performance across multiple categories:</p> Category Description Weight Technical Skills Job-specific technical competencies 30% Safety Performance Safety awareness and compliance 25% Communication Communication effectiveness 15% Leadership Leadership and teamwork abilities 15% Reliability Dependability and work ethic 15%"},{"location":"api/appraisals/#rating-scale","title":"Rating Scale","text":"Rating Description Criteria <code>5</code> Exceptional Consistently exceeds expectations <code>4</code> Above Average Frequently exceeds expectations <code>3</code> Meets Expectations Consistently meets job requirements <code>2</code> Below Average Sometimes meets expectations <code>1</code> Unsatisfactory Does not meet basic requirements"},{"location":"api/appraisals/#appraisal-status","title":"Appraisal Status","text":"Status Description <code>draft</code> Initial creation, not yet submitted <code>in_review</code> Submitted for supervisor review <code>needs_revision</code> Returned for modifications <code>approved</code> Approved by supervisor <code>final</code> Final approval by HR <code>rejected</code> Rejected and closed"},{"location":"api/appraisals/#permissions","title":"Permissions","text":"Permission Description Allowed Roles <code>appraisal.read</code> View appraisals All authenticated users <code>appraisal.write</code> Create/edit appraisals <code>supervisor</code>, <code>hr_manager</code>, <code>admin</code> <code>appraisal.approve</code> Approve appraisals <code>supervisor</code>, <code>hr_manager</code>, <code>admin</code> <code>appraisal.reports</code> Access appraisal reports <code>hr_manager</code>, <code>admin</code>"},{"location":"api/appraisals/#role-based-access","title":"Role-Based Access","text":"<ul> <li>Crew Members: Can view their own appraisals only</li> <li>Supervisors: Can create/edit appraisals for their team members</li> <li>HR Managers: Full access to all appraisals and reports</li> <li>Administrators: Complete system access</li> </ul>"},{"location":"api/appraisals/#key-features","title":"Key Features","text":""},{"location":"api/appraisals/#self-assessment","title":"Self-Assessment","text":"<p>Crew members can complete self-assessments as part of the appraisal process:</p> <ul> <li>Rate their own performance in each category</li> <li>Set personal development goals</li> <li>Provide comments on achievements and challenges</li> <li>Request specific training or development opportunities</li> </ul>"},{"location":"api/appraisals/#360-degree-feedback","title":"360-Degree Feedback","text":"<p>For comprehensive evaluation:</p> <ul> <li>Collect feedback from multiple sources</li> <li>Peer evaluations for teamwork assessment</li> <li>Subordinate feedback for leadership roles</li> <li>Customer/client feedback where applicable</li> </ul>"},{"location":"api/appraisals/#goal-setting-and-tracking","title":"Goal Setting and Tracking","text":"<ul> <li>Set SMART goals for the next period</li> <li>Link goals to organizational objectives</li> <li>Track progress throughout the period</li> <li>Measure achievement at appraisal time</li> </ul>"},{"location":"api/appraisals/#development-planning","title":"Development Planning","text":"<ul> <li>Identify skill gaps and improvement areas</li> <li>Create individual development plans</li> <li>Recommend training programs</li> <li>Set career progression paths</li> </ul>"},{"location":"api/appraisals/#endpoints","title":"Endpoints","text":""},{"location":"api/appraisals/#core-appraisal-operations","title":"Core Appraisal Operations","text":"<ul> <li>GET /appraisals - List appraisals with filtering</li> <li>POST /appraisals - Create new appraisal</li> <li>GET /appraisals/{id} - Get appraisal details</li> <li>PUT /appraisals/{id} - Update appraisal</li> <li>DELETE /appraisals/{id} - Delete appraisal</li> </ul>"},{"location":"api/appraisals/#workflow-operations","title":"Workflow Operations","text":"<ul> <li>POST /appraisals/{id}/submit - Submit for review</li> <li>POST /appraisals/{id}/approve - Approve appraisal</li> <li>POST /appraisals/{id}/reject - Reject appraisal</li> <li>POST /appraisals/{id}/request-revision - Request changes</li> </ul>"},{"location":"api/appraisals/#assessment-operations","title":"Assessment Operations","text":"<ul> <li>POST /appraisals/{id}/self-assessment - Submit self-assessment</li> <li>GET /appraisals/{id}/feedback - Get 360 feedback</li> <li>POST /appraisals/{id}/feedback - Add feedback</li> </ul>"},{"location":"api/appraisals/#reporting-and-analytics","title":"Reporting and Analytics","text":"<ul> <li>GET /appraisals/reports/summary - Appraisal summary report</li> <li>GET /appraisals/reports/performance-trends - Performance trends</li> <li>GET /appraisals/reports/department-stats - Department statistics</li> <li>GET /appraisals/crew/{id}/history - Crew member appraisal history</li> </ul>"},{"location":"api/appraisals/#integration-examples","title":"Integration Examples","text":""},{"location":"api/appraisals/#basic-appraisal-management","title":"Basic Appraisal Management","text":"PythonJavaScript <pre><code>import requests\nfrom datetime import date, timedelta\n\nclass AppraisalAPI:\n    def __init__(self, base_url: str, access_token: str):\n        self.base_url = base_url\n        self.headers = {\n            \"Authorization\": f\"Bearer {access_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def create_appraisal(self, crew_member_id: str, appraisal_data: dict):\n        \"\"\"Create a new appraisal\"\"\"\n        response = requests.post(\n            f\"{self.base_url}/api/v1/appraisals\",\n            json={\n                \"crew_member_id\": crew_member_id,\n                **appraisal_data\n            },\n            headers=self.headers\n        )\n        return response.json() if response.status_code == 201 else None\n\n    def list_pending_appraisals(self):\n        \"\"\"List appraisals requiring review\"\"\"\n        response = requests.get(\n            f\"{self.base_url}/api/v1/appraisals\",\n            params={\"status\": \"in_review\"},\n            headers=self.headers\n        )\n        return response.json() if response.status_code == 200 else None\n\n    def approve_appraisal(self, appraisal_id: str, comments: str = None):\n        \"\"\"Approve an appraisal\"\"\"\n        data = {\"approved\": True}\n        if comments:\n            data[\"comments\"] = comments\n\n        response = requests.post(\n            f\"{self.base_url}/api/v1/appraisals/{appraisal_id}/approve\",\n            json=data,\n            headers=self.headers\n        )\n        return response.status_code == 200\n\n    def get_crew_performance_history(self, crew_member_id: str):\n        \"\"\"Get performance history for crew member\"\"\"\n        response = requests.get(\n            f\"{self.base_url}/api/v1/appraisals/crew/{crew_member_id}/history\",\n            headers=self.headers\n        )\n        return response.json() if response.status_code == 200 else None\n\n# Usage\napi = AppraisalAPI(\"http://localhost:8000\", access_token)\n\n# Create annual appraisal\nappraisal_data = {\n    \"type\": \"annual\",\n    \"period_start\": str(date.today() - timedelta(days=365)),\n    \"period_end\": str(date.today()),\n    \"vessel_id\": \"vessel-uuid-here\"\n}\n\nappraisal = api.create_appraisal(\"crew-member-uuid\", appraisal_data)\nif appraisal:\n    print(f\"Created appraisal: {appraisal['id']}\")\n\n    # Add performance ratings\n    ratings = {\n        \"technical_skills\": 4,\n        \"safety_performance\": 5,\n        \"communication\": 3,\n        \"leadership\": 4,\n        \"reliability\": 4\n    }\n    # Update with ratings...\n\n# List pending reviews\npending = api.list_pending_appraisals()\nif pending:\n    for appraisal in pending['items']:\n        print(f\"Pending: {appraisal['crew_member_name']} - {appraisal['type']}\")\n\n# Check performance history\nhistory = api.get_crew_performance_history(\"crew-member-uuid\")\nif history:\n    for appraisal in history['appraisals']:\n        print(f\"{appraisal['period_end']}: {appraisal['overall_rating']}/5\")\n</code></pre> <pre><code>class AppraisalManager {\n    constructor(baseUrl, accessToken) {\n        this.baseUrl = baseUrl;\n        this.headers = {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json'\n        };\n    }\n\n    async createAppraisal(crewMemberId, appraisalData) {\n        const response = await fetch(`${this.baseUrl}/api/v1/appraisals`, {\n            method: 'POST',\n            headers: this.headers,\n            body: JSON.stringify({\n                crew_member_id: crewMemberId,\n                ...appraisalData\n            })\n        });\n        return response.ok ? await response.json() : null;\n    }\n\n    async submitForReview(appraisalId, assessmentData) {\n        const response = await fetch(\n            `${this.baseUrl}/api/v1/appraisals/${appraisalId}/submit`,\n            {\n                method: 'POST',\n                headers: this.headers,\n                body: JSON.stringify(assessmentData)\n            }\n        );\n        return response.ok;\n    }\n\n    async listMyAppraisals() {\n        const response = await fetch(`${this.baseUrl}/api/v1/appraisals`, {\n            headers: this.headers\n        });\n        return response.ok ? await response.json() : null;\n    }\n\n    async getAppraisalDetails(appraisalId) {\n        const response = await fetch(\n            `${this.baseUrl}/api/v1/appraisals/${appraisalId}`,\n            { headers: this.headers }\n        );\n        return response.ok ? await response.json() : null;\n    }\n\n    async provideFeedback(appraisalId, feedback) {\n        const response = await fetch(\n            `${this.baseUrl}/api/v1/appraisals/${appraisalId}/feedback`,\n            {\n                method: 'POST',\n                headers: this.headers,\n                body: JSON.stringify(feedback)\n            }\n        );\n        return response.ok;\n    }\n}\n\n// Usage\nconst appraisalManager = new AppraisalManager('http://localhost:8000', accessToken);\n\n// Create and submit self-assessment\nasync function completeSelfAssessment(crewMemberId) {\n    const appraisal = await appraisalManager.createAppraisal(crewMemberId, {\n        type: 'annual',\n        period_start: '2023-01-01',\n        period_end: '2023-12-31'\n    });\n\n    if (appraisal) {\n        const selfAssessment = {\n            technical_skills: 4,\n            safety_performance: 5,\n            communication: 3,\n            goals_achieved: [\n                \"Completed advanced navigation course\",\n                \"Improved bridge team coordination\"\n            ],\n            development_areas: [\n                \"Leadership skills\",\n                \"Advanced cargo operations\"\n            ],\n            comments: \"Had a successful year with good safety record\"\n        };\n\n        await appraisalManager.submitForReview(appraisal.id, selfAssessment);\n        console.log('Self-assessment submitted for review');\n    }\n}\n\n// Review pending appraisals (supervisor view)\nasync function reviewPendingAppraisals() {\n    const appraisals = await appraisalManager.listMyAppraisals();\n\n    if (appraisals) {\n        const pending = appraisals.items.filter(a =&gt; a.status === 'in_review');\n\n        for (const appraisal of pending) {\n            console.log(`Review needed: ${appraisal.crew_member_name}`);\n\n            // Get detailed appraisal data\n            const details = await appraisalManager.getAppraisalDetails(appraisal.id);\n            if (details) {\n                console.log(`Technical Skills: ${details.ratings.technical_skills}/5`);\n                console.log(`Overall Performance: ${details.overall_rating}/5`);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"api/appraisals/#best-practices","title":"Best Practices","text":""},{"location":"api/appraisals/#performance-evaluation","title":"Performance Evaluation","text":"<ol> <li>Regular Reviews: Conduct formal appraisals at consistent intervals</li> <li>Continuous Feedback: Provide ongoing feedback throughout the period</li> <li>Objective Criteria: Use measurable performance indicators</li> <li>Documentation: Maintain detailed records of performance events</li> <li>Development Focus: Emphasize growth and improvement opportunities</li> </ol>"},{"location":"api/appraisals/#data-management","title":"Data Management","text":"<ol> <li>Confidentiality: Protect sensitive performance data</li> <li>Accuracy: Ensure ratings reflect actual performance</li> <li>Consistency: Apply rating standards uniformly</li> <li>Timeliness: Complete appraisals within scheduled timeframes</li> <li>Follow-up: Monitor implementation of development plans</li> </ol>"},{"location":"api/appraisals/#system-integration","title":"System Integration","text":"<ol> <li>Training Records: Link appraisals to training completion</li> <li>Incident Reports: Consider safety incidents in evaluations</li> <li>Career Progression: Use appraisals for promotion decisions</li> <li>Compensation: Link performance to salary adjustments</li> <li>Succession Planning: Identify high-potential crew members</li> </ol>"},{"location":"api/appraisals/#common-use-cases","title":"Common Use Cases","text":""},{"location":"api/appraisals/#annual-performance-reviews","title":"Annual Performance Reviews","text":"<ul> <li>Comprehensive evaluation of yearly performance</li> <li>Goal setting for upcoming year</li> <li>Career development planning</li> <li>Compensation review preparation</li> </ul>"},{"location":"api/appraisals/#probationary-assessments","title":"Probationary Assessments","text":"<ul> <li>Evaluate new hire performance</li> <li>Confirm permanent employment status</li> <li>Identify training needs</li> <li>Early intervention for performance issues</li> </ul>"},{"location":"api/appraisals/#promotion-evaluations","title":"Promotion Evaluations","text":"<ul> <li>Assess readiness for advancement</li> <li>Evaluate leadership potential</li> <li>Review technical competencies</li> <li>Compare candidates objectively</li> </ul>"},{"location":"api/appraisals/#development-planning_1","title":"Development Planning","text":"<ul> <li>Identify skill gaps</li> <li>Create learning pathways</li> <li>Track development progress</li> <li>Measure training effectiveness</li> </ul>"},{"location":"api/appraisals/#security-and-compliance","title":"Security and Compliance","text":""},{"location":"api/appraisals/#data-protection","title":"Data Protection","text":"<ul> <li>Encrypt sensitive performance data</li> <li>Implement role-based access controls</li> <li>Maintain audit logs of all changes</li> <li>Regular backup of appraisal records</li> </ul>"},{"location":"api/appraisals/#regulatory-compliance","title":"Regulatory Compliance","text":"<ul> <li>Meet maritime industry standards</li> <li>Support ISO certification requirements</li> <li>Comply with employment regulations</li> <li>Maintain documentation for inspections</li> </ul>"},{"location":"api/auth/","title":"Authentication API","text":"<p>The Authentication API provides endpoints for user authentication, session management, and account operations in the Crew Appraisals System.</p>"},{"location":"api/auth/#overview","title":"Overview","text":"<p>The authentication system uses JWT (JSON Web Tokens) for stateless authentication with the following features:</p> <ul> <li>Access tokens: Short-lived tokens (30 minutes) for API access</li> <li>Refresh tokens: Long-lived tokens (7 days) for renewing access</li> <li>Session tracking: Server-side session management for security</li> <li>Role-based access: Different permission levels based on user roles</li> </ul>"},{"location":"api/auth/#authentication-flow","title":"Authentication Flow","text":""},{"location":"api/auth/#1-login-process","title":"1. Login Process","text":"<pre><code>sequenceDiagram\n    Client-&gt;&gt;+API: POST /auth/login\n    API-&gt;&gt;+Database: Validate credentials\n    Database--&gt;&gt;-API: User data\n    API-&gt;&gt;+API: Generate JWT tokens\n    API--&gt;&gt;-Client: Access &amp; refresh tokens</code></pre>"},{"location":"api/auth/#2-token-usage","title":"2. Token Usage","text":"<pre><code>sequenceDiagram\n    Client-&gt;&gt;+API: Request with Authorization header\n    API-&gt;&gt;+API: Validate access token\n    API--&gt;&gt;-Client: Protected resource data</code></pre>"},{"location":"api/auth/#3-token-refresh","title":"3. Token Refresh","text":"<pre><code>sequenceDiagram\n    Client-&gt;&gt;+API: POST /auth/refresh\n    API-&gt;&gt;+API: Validate refresh token\n    API-&gt;&gt;+API: Generate new access token\n    API--&gt;&gt;-Client: New access token</code></pre>"},{"location":"api/auth/#user-roles","title":"User Roles","text":"<p>The system supports the following user roles with different permission levels:</p> Role Description Permissions <code>admin</code> System administrator Full access to all resources <code>crew_manager</code> Crew management staff Manage crew members, appraisals, and vessels <code>fleet_manager</code> Fleet operations manager Manage vessels and assignments <code>hr_manager</code> Human resources manager Manage crew members and HR processes <code>crew_member</code> Individual crew member View own profile and submit forms"},{"location":"api/auth/#security-features","title":"Security Features","text":""},{"location":"api/auth/#password-requirements","title":"Password Requirements","text":"<ul> <li>Minimum 8 characters</li> <li>Must contain at least one uppercase letter</li> <li>Must contain at least one lowercase letter</li> <li>Must contain at least one number</li> <li>Must contain at least one special character</li> </ul>"},{"location":"api/auth/#session-management","title":"Session Management","text":"<ul> <li>Sessions are tracked server-side for security</li> <li>Multiple concurrent sessions are allowed</li> <li>Sessions can be invalidated individually or all at once</li> <li>Session activity is logged for audit purposes</li> </ul>"},{"location":"api/auth/#token-security","title":"Token Security","text":"<ul> <li>Tokens are signed using HMAC SHA-256</li> <li>Access tokens have short expiration times</li> <li>Refresh tokens can be revoked</li> <li>Token blacklisting for compromised tokens</li> </ul>"},{"location":"api/auth/#error-codes","title":"Error Codes","text":"<p>Common authentication error codes:</p> Code Status Description <code>INVALID_CREDENTIALS</code> 401 Username or password is incorrect <code>ACCOUNT_LOCKED</code> 423 User account is locked <code>ACCOUNT_DISABLED</code> 401 User account is disabled <code>TOKEN_EXPIRED</code> 401 Access token has expired <code>TOKEN_INVALID</code> 401 Token format or signature is invalid <code>REFRESH_TOKEN_EXPIRED</code> 401 Refresh token has expired <code>SESSION_EXPIRED</code> 401 User session has expired <code>INSUFFICIENT_PERMISSIONS</code> 403 User lacks required permissions"},{"location":"api/auth/#rate-limiting","title":"Rate Limiting","text":"<p>Authentication endpoints have specific rate limits:</p> <ul> <li>Login attempts: 5 attempts per 15 minutes per IP</li> <li>Registration: 3 attempts per hour per IP</li> <li>Password reset: 3 attempts per hour per email</li> <li>Token refresh: 10 attempts per minute per user</li> </ul>"},{"location":"api/auth/#endpoints","title":"Endpoints","text":""},{"location":"api/auth/#core-authentication","title":"Core Authentication","text":"<ul> <li>POST /auth/login - User login</li> <li>POST /auth/logout - User logout</li> <li>GET /auth/session - Get current session info</li> <li>POST /auth/refresh - Refresh access token</li> </ul>"},{"location":"api/auth/#account-management","title":"Account Management","text":"<ul> <li>POST /auth/register - Register new user account</li> <li>GET /auth/me - Get current user profile</li> <li>POST /auth/change-password - Change password</li> </ul>"},{"location":"api/auth/#password-recovery","title":"Password Recovery","text":"<ul> <li>POST /auth/forgot-password - Request password reset</li> <li>POST /auth/reset-password - Reset password with token</li> </ul>"},{"location":"api/auth/#code-examples","title":"Code Examples","text":""},{"location":"api/auth/#basic-authentication-flow","title":"Basic Authentication Flow","text":"PythoncURL <pre><code>import requests\n\n# Login\nresponse = requests.post('http://localhost:8000/api/v1/auth/login', json={\n    'username': 'john.doe',\n    'password': 'SecurePass123!'\n})\n\nif response.status_code == 200:\n    data = response.json()\n    access_token = data['access_token']\n\n    # Use token for authenticated requests\n    headers = {'Authorization': f'Bearer {access_token}'}\n\n    # Make authenticated request\n    crew_response = requests.get(\n        'http://localhost:8000/api/v1/crew-members',\n        headers=headers\n    )\n</code></pre> <pre><code># Login\ncurl -X POST http://localhost:8000/api/v1/auth/login \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"username\": \"john.doe\", \"password\": \"SecurePass123!\"}'\n\n# Use returned token\nexport TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n\n# Make authenticated request\ncurl -X GET http://localhost:8000/api/v1/crew-members \\\n     -H \"Authorization: Bearer $TOKEN\"\n</code></pre>"},{"location":"api/auth/#token-refresh","title":"Token Refresh","text":"PythoncURL <pre><code># Refresh token when access token expires\nrefresh_response = requests.post(\n    'http://localhost:8000/api/v1/auth/refresh',\n    json={'refresh_token': refresh_token}\n)\n\nif refresh_response.status_code == 200:\n    new_data = refresh_response.json()\n    new_access_token = new_data['access_token']\n\n    # Update headers with new token\n    headers = {'Authorization': f'Bearer {new_access_token}'}\n</code></pre> <pre><code># Refresh access token\ncurl -X POST http://localhost:8000/api/v1/auth/refresh \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI...\"}'\n</code></pre>"},{"location":"api/auth/#best-practices","title":"Best Practices","text":""},{"location":"api/auth/#client-implementation","title":"Client Implementation","text":"<ol> <li>Store tokens securely: Use secure storage mechanisms (not localStorage for web apps)</li> <li>Handle token expiration: Implement automatic token refresh</li> <li>Logout properly: Always call logout endpoint and clear stored tokens</li> <li>Handle rate limits: Implement exponential backoff for authentication attempts</li> </ol>"},{"location":"api/auth/#security-considerations","title":"Security Considerations","text":"<ol> <li>Use HTTPS: Always use encrypted connections in production</li> <li>Validate tokens: Check token expiration on the client side</li> <li>Log security events: Monitor failed authentication attempts</li> <li>Implement session timeout: Clear inactive sessions automatically</li> </ol>"},{"location":"api/auth/#testing","title":"Testing","text":""},{"location":"api/auth/#authentication-test-flow","title":"Authentication Test Flow","text":"<ol> <li>Register a test user account</li> <li>Login with test credentials</li> <li>Verify access token works for protected endpoints</li> <li>Test token refresh functionality</li> <li>Test logout clears session properly</li> </ol>"},{"location":"api/auth/#common-test-scenarios","title":"Common Test Scenarios","text":"<ul> <li>Valid login credentials</li> <li>Invalid login credentials</li> <li>Expired access token</li> <li>Invalid refresh token</li> <li>Account with insufficient permissions</li> <li>Rate limiting behavior</li> </ul>"},{"location":"api/auth/login/","title":"POST /auth/login","text":"<p>Authenticate a user and obtain access tokens for API access.</p>"},{"location":"api/auth/login/#endpoint","title":"Endpoint","text":"<pre><code>POST /api/v1/auth/login\n</code></pre>"},{"location":"api/auth/login/#description","title":"Description","text":"<p>This endpoint authenticates a user with username and password credentials, returning JWT access and refresh tokens on successful authentication. The access token can be used to authenticate subsequent API requests.</p>"},{"location":"api/auth/login/#authentication","title":"Authentication","text":"<p>Public endpoint - No authentication required.</p>"},{"location":"api/auth/login/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>5 attempts per 15 minutes per IP address</li> <li>Rate limit headers are included in the response</li> </ul>"},{"location":"api/auth/login/#request","title":"Request","text":""},{"location":"api/auth/login/#content-type","title":"Content Type","text":"<pre><code>Content-Type: application/json\n</code></pre>"},{"location":"api/auth/login/#request-body","title":"Request Body","text":"Field Type Required Description <code>username</code> string Yes Username for authentication (3-50 characters) <code>password</code> string Yes User password (minimum 8 characters)"},{"location":"api/auth/login/#json-schema","title":"JSON Schema","text":"<pre><code>{\n  \"type\": \"object\",\n  \"required\": [\"username\", \"password\"],\n  \"properties\": {\n    \"username\": {\n      \"type\": \"string\",\n      \"minLength\": 3,\n      \"maxLength\": 50,\n      \"description\": \"Username for authentication\"\n    },\n    \"password\": {\n      \"type\": \"string\",\n      \"minLength\": 8,\n      \"description\": \"User password\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/auth/login/#example-request","title":"Example Request","text":"<pre><code>{\n  \"username\": \"john.doe\",\n  \"password\": \"SecurePass123!\"\n}\n</code></pre>"},{"location":"api/auth/login/#response","title":"Response","text":""},{"location":"api/auth/login/#success-response-200-ok","title":"Success Response (200 OK)","text":"Field Type Description <code>access_token</code> string JWT access token for API authentication <code>refresh_token</code> string JWT refresh token for renewing access <code>token_type</code> string Token type (always \"Bearer\") <code>expires_in</code> integer Access token expiration time in seconds <code>user</code> object Basic user information"},{"location":"api/auth/login/#user-object","title":"User Object","text":"Field Type Description <code>id</code> string User UUID <code>username</code> string Username <code>email</code> string Email address <code>first_name</code> string First name <code>last_name</code> string Last name <code>role</code> string User role <code>is_active</code> boolean Account status"},{"location":"api/auth/login/#example-response","title":"Example Response","text":"<pre><code>{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAiLCJ1c2VybmFtZSI6ImpvaG4uZG9lIiwiZXhwIjoxNzA1MzE0MDAwfQ.signature\",\n  \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAiLCJ0eXBlIjoicmVmcmVzaCIsImV4cCI6MTcwNTkxODgwMH0.signature\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 1800,\n  \"user\": {\n    \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"username\": \"john.doe\",\n    \"email\": \"john.doe@example.com\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"role\": \"crew_manager\",\n    \"is_active\": true\n  }\n}\n</code></pre>"},{"location":"api/auth/login/#error-responses","title":"Error Responses","text":""},{"location":"api/auth/login/#401-unauthorized-invalid-credentials","title":"401 Unauthorized - Invalid Credentials","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"INVALID_CREDENTIALS\",\n    \"message\": \"Invalid username or password\"\n  }\n}\n</code></pre>"},{"location":"api/auth/login/#401-unauthorized-account-disabled","title":"401 Unauthorized - Account Disabled","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"ACCOUNT_DISABLED\",\n    \"message\": \"User account is disabled\"\n  }\n}\n</code></pre>"},{"location":"api/auth/login/#423-locked-account-locked","title":"423 Locked - Account Locked","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"ACCOUNT_LOCKED\",\n    \"message\": \"Account is temporarily locked due to multiple failed login attempts\"\n  }\n}\n</code></pre>"},{"location":"api/auth/login/#429-too-many-requests-rate-limited","title":"429 Too Many Requests - Rate Limited","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"RATE_LIMIT_EXCEEDED\",\n    \"message\": \"Too many login attempts. Please try again later.\"\n  }\n}\n</code></pre>"},{"location":"api/auth/login/#422-unprocessable-entity-validation-error","title":"422 Unprocessable Entity - Validation Error","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Request validation failed\",\n    \"details\": {\n      \"field_errors\": {\n        \"username\": [\"Username must be at least 3 characters long\"],\n        \"password\": [\"Password must be at least 8 characters long\"]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"api/auth/login/#500-internal-server-error","title":"500 Internal Server Error","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"AUTHENTICATION_FAILED\",\n    \"message\": \"Authentication failed due to server error\"\n  }\n}\n</code></pre>"},{"location":"api/auth/login/#examples","title":"Examples","text":""},{"location":"api/auth/login/#curl","title":"cURL","text":"Basic LoginWith Error Handling <pre><code>curl -X POST http://localhost:8000/api/v1/auth/login \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"username\": \"john.doe\",\n       \"password\": \"SecurePass123!\"\n     }'\n</code></pre> <pre><code># Store response in variable\nresponse=$(curl -s -X POST http://localhost:8000/api/v1/auth/login \\\n                -H \"Content-Type: application/json\" \\\n                -d '{\n                  \"username\": \"john.doe\",\n                  \"password\": \"SecurePass123!\"\n                }' \\\n                -w \"%{http_code}\")\n\n# Extract status code\nhttp_code=\"${response: -3}\"\nresponse_body=\"${response%???}\"\n\nif [ \"$http_code\" -eq 200 ]; then\n    echo \"Login successful\"\n    # Extract token\n    token=$(echo \"$response_body\" | jq -r '.access_token')\n    echo \"Access token: $token\"\nelse\n    echo \"Login failed with status: $http_code\"\n    echo \"$response_body\"\nfi\n</code></pre>"},{"location":"api/auth/login/#python","title":"Python","text":"Basic UsageWith Error Handling <pre><code>import requests\nimport json\n\nurl = \"http://localhost:8000/api/v1/auth/login\"\npayload = {\n    \"username\": \"john.doe\",\n    \"password\": \"SecurePass123!\"\n}\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    access_token = data[\"access_token\"]\n    refresh_token = data[\"refresh_token\"]\n    user_info = data[\"user\"]\n\n    print(f\"Login successful for user: {user_info['username']}\")\n    print(f\"Role: {user_info['role']}\")\n    print(f\"Token expires in: {data['expires_in']} seconds\")\n\n    # Store tokens for later use\n    auth_headers = {\n        \"Authorization\": f\"Bearer {access_token}\"\n    }\nelse:\n    print(f\"Login failed with status {response.status_code}\")\n    print(response.json())\n</code></pre> <pre><code>import requests\nfrom requests.exceptions import RequestException\n\ndef login_user(username: str, password: str, base_url: str = \"http://localhost:8000\"):\n    \"\"\"\n    Login user and return authentication data.\n\n    Returns:\n        dict: Authentication data on success\n        None: On failure\n    \"\"\"\n    try:\n        url = f\"{base_url}/api/v1/auth/login\"\n        payload = {\n            \"username\": username,\n            \"password\": password\n        }\n\n        response = requests.post(url, json=payload, timeout=30)\n\n        if response.status_code == 200:\n            return response.json()\n        elif response.status_code == 401:\n            error_data = response.json()\n            print(f\"Authentication failed: {error_data.get('error', {}).get('message')}\")\n        elif response.status_code == 429:\n            print(\"Rate limit exceeded. Please try again later.\")\n        elif response.status_code == 422:\n            error_data = response.json()\n            field_errors = error_data.get('error', {}).get('details', {}).get('field_errors', {})\n            for field, errors in field_errors.items():\n                print(f\"{field}: {', '.join(errors)}\")\n        else:\n            print(f\"Unexpected error: {response.status_code}\")\n\n    except RequestException as e:\n        print(f\"Network error during login: {e}\")\n\n    return None\n\n# Usage\nauth_data = login_user(\"john.doe\", \"SecurePass123!\")\nif auth_data:\n    print(\"Login successful!\")\n    access_token = auth_data[\"access_token\"]\n</code></pre>"},{"location":"api/auth/login/#javascripttypescript","title":"JavaScript/TypeScript","text":"Fetch APIAxios <pre><code>async function loginUser(username, password) {\n    try {\n        const response = await fetch('http://localhost:8000/api/v1/auth/login', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                username: username,\n                password: password\n            })\n        });\n\n        const data = await response.json();\n\n        if (response.ok) {\n            // Store tokens securely (not in localStorage for production!)\n            sessionStorage.setItem('access_token', data.access_token);\n            sessionStorage.setItem('refresh_token', data.refresh_token);\n\n            console.log('Login successful:', data.user);\n            return data;\n        } else {\n            console.error('Login failed:', data.error.message);\n            return null;\n        }\n    } catch (error) {\n        console.error('Network error:', error);\n        return null;\n    }\n}\n\n// Usage\nloginUser('john.doe', 'SecurePass123!')\n    .then(authData =&gt; {\n        if (authData) {\n            console.log('Authenticated as:', authData.user.username);\n        }\n    });\n</code></pre> <pre><code>import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: 'http://localhost:8000/api/v1',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\nasync function login(username, password) {\n    try {\n        const response = await api.post('/auth/login', {\n            username,\n            password\n        });\n\n        const { access_token, refresh_token, user } = response.data;\n\n        // Set default authorization header\n        api.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n\n        return {\n            accessToken: access_token,\n            refreshToken: refresh_token,\n            user: user\n        };\n    } catch (error) {\n        if (error.response) {\n            // Server responded with error status\n            const { status, data } = error.response;\n            console.error(`Login failed (${status}):`, data.error.message);\n        } else {\n            // Network error\n            console.error('Network error:', error.message);\n        }\n        throw error;\n    }\n}\n\n// Usage\ntry {\n    const authData = await login('john.doe', 'SecurePass123!');\n    console.log('Login successful:', authData.user);\n} catch (error) {\n    console.error('Authentication failed');\n}\n</code></pre>"},{"location":"api/auth/login/#notes","title":"Notes","text":""},{"location":"api/auth/login/#security-considerations","title":"Security Considerations","text":"<ol> <li>Always use HTTPS in production to protect credentials in transit</li> <li>Store tokens securely - avoid localStorage for web applications</li> <li>Handle token expiration - implement automatic refresh logic</li> <li>Monitor failed attempts - implement account lockout policies</li> </ol>"},{"location":"api/auth/login/#token-usage","title":"Token Usage","text":"<ol> <li>Access Token: Use for all authenticated API requests</li> <li>Refresh Token: Use only to obtain new access tokens</li> <li>Token Expiration: Access tokens expire in 30 minutes, plan for renewal</li> <li>Token Storage: Store securely and clear on logout</li> </ol>"},{"location":"api/auth/login/#best-practices","title":"Best Practices","text":"<ol> <li>Validate input on the client side before sending requests</li> <li>Handle all error cases gracefully</li> <li>Implement retry logic with exponential backoff for rate limits</li> <li>Log authentication events for security monitoring</li> </ol>"},{"location":"api/auth/logout/","title":"POST /auth/logout","text":"<p>Logout the current user and invalidate their session.</p>"},{"location":"api/auth/logout/#endpoint","title":"Endpoint","text":"<pre><code>POST /api/v1/auth/logout\n</code></pre>"},{"location":"api/auth/logout/#description","title":"Description","text":"<p>This endpoint logs out the current user by invalidating their active session. After successful logout, the access token will no longer be valid for authenticated requests. The user will need to login again to obtain new tokens.</p>"},{"location":"api/auth/logout/#authentication","title":"Authentication","text":"<p>Authentication required - Bearer token must be provided in the Authorization header.</p>"},{"location":"api/auth/logout/#request","title":"Request","text":""},{"location":"api/auth/logout/#headers","title":"Headers","text":"<pre><code>Authorization: Bearer &lt;access_token&gt;\nContent-Type: application/json\n</code></pre>"},{"location":"api/auth/logout/#request-body","title":"Request Body","text":"<p>This endpoint does not require a request body. The session is identified from the provided access token.</p>"},{"location":"api/auth/logout/#example-request","title":"Example Request","text":"<pre><code>POST /api/v1/auth/logout HTTP/1.1\nHost: localhost:8000\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\nContent-Type: application/json\n</code></pre>"},{"location":"api/auth/logout/#response","title":"Response","text":""},{"location":"api/auth/logout/#success-response-200-ok","title":"Success Response (200 OK)","text":"Field Type Description <code>success</code> boolean Always true for successful logout <code>message</code> string Success message"},{"location":"api/auth/logout/#example-response","title":"Example Response","text":"<pre><code>{\n  \"success\": true,\n  \"message\": \"Logged out successfully\"\n}\n</code></pre>"},{"location":"api/auth/logout/#error-responses","title":"Error Responses","text":""},{"location":"api/auth/logout/#401-unauthorized-invalid-token","title":"401 Unauthorized - Invalid Token","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"INVALID_TOKEN\",\n    \"message\": \"Invalid or expired access token\"\n  }\n}\n</code></pre>"},{"location":"api/auth/logout/#404-not-found-session-not-found","title":"404 Not Found - Session Not Found","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"SESSION_NOT_FOUND\",\n    \"message\": \"Session not found or already expired\"\n  }\n}\n</code></pre>"},{"location":"api/auth/logout/#500-internal-server-error","title":"500 Internal Server Error","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"LOGOUT_FAILED\",\n    \"message\": \"Logout failed due to server error\"\n  }\n}\n</code></pre>"},{"location":"api/auth/logout/#examples","title":"Examples","text":""},{"location":"api/auth/logout/#curl","title":"cURL","text":"Basic LogoutWith Error Handling <pre><code># Set your access token\nexport ACCESS_TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n\ncurl -X POST http://localhost:8000/api/v1/auth/logout \\\n     -H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n     -H \"Content-Type: application/json\"\n</code></pre> <pre><code>#!/bin/bash\n\nACCESS_TOKEN=\"$1\"\nif [ -z \"$ACCESS_TOKEN\" ]; then\n    echo \"Usage: $0 &lt;access_token&gt;\"\n    exit 1\nfi\n\nresponse=$(curl -s -X POST http://localhost:8000/api/v1/auth/logout \\\n                -H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n                -H \"Content-Type: application/json\" \\\n                -w \"%{http_code}\")\n\nhttp_code=\"${response: -3}\"\nresponse_body=\"${response%???}\"\n\nif [ \"$http_code\" -eq 200 ]; then\n    echo \"Logout successful\"\n    echo \"$response_body\"\nelse\n    echo \"Logout failed with status: $http_code\"\n    echo \"$response_body\"\nfi\n</code></pre>"},{"location":"api/auth/logout/#python","title":"Python","text":"Basic UsageWith Session Management <pre><code>import requests\n\ndef logout_user(access_token: str, base_url: str = \"http://localhost:8000\"):\n    \"\"\"\n    Logout user by invalidating their session.\n\n    Args:\n        access_token: The user's access token\n        base_url: API base URL\n\n    Returns:\n        bool: True if logout successful, False otherwise\n    \"\"\"\n    url = f\"{base_url}/api/v1/auth/logout\"\n    headers = {\n        \"Authorization\": f\"Bearer {access_token}\",\n        \"Content-Type\": \"application/json\"\n    }\n\n    try:\n        response = requests.post(url, headers=headers, timeout=30)\n\n        if response.status_code == 200:\n            data = response.json()\n            print(f\"Logout successful: {data['message']}\")\n            return True\n        else:\n            error_data = response.json()\n            print(f\"Logout failed: {error_data.get('error', {}).get('message')}\")\n            return False\n\n    except requests.RequestException as e:\n        print(f\"Network error during logout: {e}\")\n        return False\n\n# Usage\naccess_token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\nif logout_user(access_token):\n    print(\"User logged out successfully\")\n    # Clear stored tokens\n    access_token = None\n</code></pre> <pre><code>import requests\nfrom typing import Optional\n\nclass AuthClient:\n    def __init__(self, base_url: str = \"http://localhost:8000\"):\n        self.base_url = base_url\n        self.access_token: Optional[str] = None\n        self.refresh_token: Optional[str] = None\n\n    def login(self, username: str, password: str) -&gt; bool:\n        \"\"\"Login and store tokens\"\"\"\n        url = f\"{self.base_url}/api/v1/auth/login\"\n        payload = {\n            \"username\": username,\n            \"password\": password\n        }\n\n        try:\n            response = requests.post(url, json=payload, timeout=30)\n            if response.status_code == 200:\n                data = response.json()\n                self.access_token = data[\"access_token\"]\n                self.refresh_token = data[\"refresh_token\"]\n                return True\n            return False\n        except requests.RequestException:\n            return False\n\n    def logout(self) -&gt; bool:\n        \"\"\"Logout and clear tokens\"\"\"\n        if not self.access_token:\n            return False\n\n        url = f\"{self.base_url}/api/v1/auth/logout\"\n        headers = {\n            \"Authorization\": f\"Bearer {self.access_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n        try:\n            response = requests.post(url, headers=headers, timeout=30)\n            success = response.status_code == 200\n\n            # Clear tokens regardless of response\n            # (in case token was already invalid)\n            self.access_token = None\n            self.refresh_token = None\n\n            return success\n        except requests.RequestException:\n            # Clear tokens even if request failed\n            self.access_token = None\n            self.refresh_token = None\n            return False\n\n    def get_auth_headers(self) -&gt; dict:\n        \"\"\"Get headers for authenticated requests\"\"\"\n        if not self.access_token:\n            return {}\n        return {\"Authorization\": f\"Bearer {self.access_token}\"}\n\n# Usage\nclient = AuthClient()\n\n# Login\nif client.login(\"john.doe\", \"SecurePass123!\"):\n    print(\"Login successful\")\n\n    # Make authenticated requests...\n    # ...\n\n    # Logout\n    if client.logout():\n        print(\"Logout successful\")\n    else:\n        print(\"Logout failed, but tokens cleared\")\n</code></pre>"},{"location":"api/auth/logout/#javascripttypescript","title":"JavaScript/TypeScript","text":"Fetch APIWith Auth Context (React) <pre><code>async function logoutUser(accessToken) {\n    try {\n        const response = await fetch('http://localhost:8000/api/v1/auth/logout', {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json'\n            }\n        });\n\n        const data = await response.json();\n\n        if (response.ok) {\n            console.log('Logout successful:', data.message);\n\n            // Clear stored tokens\n            sessionStorage.removeItem('access_token');\n            sessionStorage.removeItem('refresh_token');\n            localStorage.removeItem('access_token');\n            localStorage.removeItem('refresh_token');\n\n            return true;\n        } else {\n            console.error('Logout failed:', data.error.message);\n            // Still clear tokens locally\n            sessionStorage.removeItem('access_token');\n            sessionStorage.removeItem('refresh_token');\n            return false;\n        }\n    } catch (error) {\n        console.error('Network error during logout:', error);\n        // Clear tokens even on network error\n        sessionStorage.removeItem('access_token');\n        sessionStorage.removeItem('refresh_token');\n        return false;\n    }\n}\n\n// Usage\nconst accessToken = sessionStorage.getItem('access_token');\nif (accessToken) {\n    logoutUser(accessToken).then(success =&gt; {\n        if (success) {\n            // Redirect to login page or home\n            window.location.href = '/login';\n        }\n    });\n}\n</code></pre> <pre><code>import { createContext, useContext, useState, ReactNode } from 'react';\n\ninterface AuthContextType {\n    accessToken: string | null;\n    login: (username: string, password: string) =&gt; Promise&lt;boolean&gt;;\n    logout: () =&gt; Promise&lt;boolean&gt;;\n    isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext&lt;AuthContextType | null&gt;(null);\n\nexport const useAuth = () =&gt; {\n    const context = useContext(AuthContext);\n    if (!context) {\n        throw new Error('useAuth must be used within AuthProvider');\n    }\n    return context;\n};\n\ninterface AuthProviderProps {\n    children: ReactNode;\n}\n\nexport const AuthProvider = ({ children }: AuthProviderProps) =&gt; {\n    const [accessToken, setAccessToken] = useState&lt;string | null&gt;(\n        sessionStorage.getItem('access_token')\n    );\n\n    const login = async (username: string, password: string): Promise&lt;boolean&gt; =&gt; {\n        try {\n            const response = await fetch('/api/v1/auth/login', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ username, password })\n            });\n\n            if (response.ok) {\n                const data = await response.json();\n                setAccessToken(data.access_token);\n                sessionStorage.setItem('access_token', data.access_token);\n                sessionStorage.setItem('refresh_token', data.refresh_token);\n                return true;\n            }\n            return false;\n        } catch {\n            return false;\n        }\n    };\n\n    const logout = async (): Promise&lt;boolean&gt; =&gt; {\n        let success = false;\n\n        if (accessToken) {\n            try {\n                const response = await fetch('/api/v1/auth/logout', {\n                    method: 'POST',\n                    headers: {\n                        'Authorization': `Bearer ${accessToken}`,\n                        'Content-Type': 'application/json'\n                    }\n                });\n                success = response.ok;\n            } catch {\n                // Network error, but still clear local state\n            }\n        }\n\n        // Always clear local state\n        setAccessToken(null);\n        sessionStorage.removeItem('access_token');\n        sessionStorage.removeItem('refresh_token');\n\n        return success;\n    };\n\n    const value: AuthContextType = {\n        accessToken,\n        login,\n        logout,\n        isAuthenticated: !!accessToken\n    };\n\n    return (\n        &lt;AuthContext.Provider value={value}&gt;\n            {children}\n        &lt;/AuthContext.Provider&gt;\n    );\n};\n\n// Usage in component\nfunction LogoutButton() {\n    const { logout } = useAuth();\n\n    const handleLogout = async () =&gt; {\n        const success = await logout();\n        if (success) {\n            console.log('Logout successful');\n        } else {\n            console.log('Logout failed, but user logged out locally');\n        }\n    };\n\n    return (\n        &lt;button onClick={handleLogout}&gt;\n            Logout\n        &lt;/button&gt;\n    );\n}\n</code></pre>"},{"location":"api/auth/logout/#notes","title":"Notes","text":""},{"location":"api/auth/logout/#token-invalidation","title":"Token Invalidation","text":"<ol> <li>Server-side: The session is invalidated on the server</li> <li>Client-side: Clients should clear stored tokens</li> <li>Refresh tokens: Associated refresh tokens are also invalidated</li> <li>Multiple sessions: Only the current session is invalidated</li> </ol>"},{"location":"api/auth/logout/#best-practices","title":"Best Practices","text":""},{"location":"api/auth/logout/#client-implementation","title":"Client Implementation","text":"<ol> <li>Always clear tokens locally, even if the API call fails</li> <li>Handle network errors gracefully</li> <li>Redirect appropriately after logout (e.g., to login page)</li> <li>Clear all auth-related data from storage</li> </ol>"},{"location":"api/auth/logout/#error-handling","title":"Error Handling","text":"<ol> <li>401 errors: Token is already invalid, clear local storage</li> <li>404 errors: Session already expired, clear local storage</li> <li>Network errors: Clear local tokens for security</li> <li>Success response: Confirm logout completed</li> </ol>"},{"location":"api/auth/logout/#security-considerations","title":"Security Considerations","text":"<ol> <li>Token cleanup: Always clear tokens from client storage</li> <li>Secure storage: Use secure methods to store tokens</li> <li>Session management: Monitor active sessions</li> <li>Audit logging: Log logout events for security</li> </ol>"},{"location":"api/auth/logout/#integration-notes","title":"Integration Notes","text":"<ol> <li>SPA applications: Update application state after logout</li> <li>Mobile apps: Clear secure storage and reset navigation</li> <li>Server-side rendering: Clear cookies and redirect</li> <li>API clients: Reset authorization headers</li> </ol>"},{"location":"api/crew/","title":"Crew Management API","text":"<p>The Crew Management API provides comprehensive endpoints for managing crew members in the maritime crew management system, including personal information, certificates, vessel assignments, and operational status.</p>"},{"location":"api/crew/#overview","title":"Overview","text":"<p>The Crew Management system handles all aspects of crew member lifecycle:</p> <ul> <li>Personal Information: Basic details, contact information, and emergency contacts</li> <li>Professional Data: Rank, department, employment history, and contracts</li> <li>Certificates &amp; Documents: Training certificates, licenses, and compliance documents</li> <li>Vessel Assignments: Current and historical vessel assignments</li> <li>Status Tracking: Availability, medical status, leave management</li> <li>Compliance Monitoring: Certificate expiration tracking and renewal alerts</li> </ul>"},{"location":"api/crew/#data-model","title":"Data Model","text":""},{"location":"api/crew/#crew-member","title":"Crew Member","text":"<p>A crew member represents an individual seafarer in the system with the following key attributes:</p> Field Type Description <code>id</code> UUID Unique identifier <code>employee_id</code> string Company employee ID <code>full_name</code> string Computed full name <code>first_name</code> string First name <code>last_name</code> string Last name <code>middle_name</code> string Middle name (optional) <code>email</code> email Email address <code>phone</code> string Primary phone number <code>rank</code> string Current rank/position <code>department</code> enum Ship department <code>status</code> enum Current operational status"},{"location":"api/crew/#departments","title":"Departments","text":"<p>The system supports the following ship departments:</p> Department Description <code>deck</code> Deck department (navigation, cargo operations) <code>engine</code> Engine department (propulsion, machinery) <code>catering</code> Catering department (galley, steward services) <code>electrical</code> Electrical department (electrical systems) <code>radio</code> Radio department (communications)"},{"location":"api/crew/#crew-status","title":"Crew Status","text":"<p>Crew members can have the following operational statuses:</p> Status Description Usage <code>active</code> Currently employed and working General active status <code>available</code> Available for assignment Ready for vessel assignment <code>on_vessel</code> Currently assigned to a vessel Actively serving on vessel <code>on_leave</code> On approved leave Vacation, family leave <code>training</code> Undergoing training Attending courses, certifications <code>medical</code> Medical leave or evaluation Medical unfitness, treatment <code>inactive</code> Not currently employed Contract ended, terminated"},{"location":"api/crew/#certificates-management","title":"Certificates Management","text":""},{"location":"api/crew/#certificate-types","title":"Certificate Types","text":"<p>The system tracks various types of maritime certificates and documents:</p> <ul> <li>STCW Certificates: Standards of Training, Certification and Watchkeeping</li> <li>National Licenses: Country-specific maritime licenses</li> <li>Medical Certificates: Seafarer medical fitness certificates</li> <li>Security Training: Port facility security training</li> <li>Specialized Training: Cargo handling, safety equipment training</li> </ul>"},{"location":"api/crew/#certificate-status","title":"Certificate Status","text":"Status Description <code>valid</code> Certificate is current and valid <code>expiring_soon</code> Expires within renewal alert period <code>expired</code> Certificate has expired"},{"location":"api/crew/#permissions","title":"Permissions","text":"<p>The Crew Management API uses role-based access control:</p> Permission Description Allowed Roles <code>crew.read</code> View crew member information <code>admin</code>, <code>crew_manager</code>, <code>hr_manager</code>, <code>fleet_manager</code> <code>crew.write</code> Create, update, delete crew members <code>admin</code>, <code>crew_manager</code>, <code>hr_manager</code> <code>crew.assign</code> Manage vessel assignments <code>admin</code>, <code>crew_manager</code>, <code>fleet_manager</code> <code>crew.certificates</code> Manage certificates <code>admin</code>, <code>crew_manager</code>, <code>hr_manager</code>"},{"location":"api/crew/#filtering-and-search","title":"Filtering and Search","text":""},{"location":"api/crew/#available-filters","title":"Available Filters","text":"<p>Crew member lists can be filtered by:</p> <ul> <li>Status: Filter by operational status</li> <li>Department: Filter by ship department</li> <li>Rank: Filter by crew rank/position</li> <li>Vessel: Filter by current vessel assignment</li> <li>Nationality: Filter by crew nationality</li> <li>Certificate Status: Filter by certificate validity</li> <li>Date Ranges: Filter by joining date, contract dates</li> </ul>"},{"location":"api/crew/#search-capabilities","title":"Search Capabilities","text":"<p>The search functionality supports:</p> <ul> <li>Full-text search across name fields</li> <li>Employee ID lookup</li> <li>Email address search</li> <li>Phone number search</li> <li>Passport number search</li> </ul>"},{"location":"api/crew/#bulk-operations","title":"Bulk Operations","text":"<p>The API supports bulk operations for efficiency:</p> <ul> <li>Bulk Creation: Create multiple crew members simultaneously</li> <li>Bulk Updates: Update multiple crew members with same changes</li> <li>Bulk Status Changes: Change status for multiple crew members</li> <li>Bulk Certificate Management: Add certificates to multiple crew members</li> </ul>"},{"location":"api/crew/#error-handling","title":"Error Handling","text":""},{"location":"api/crew/#common-error-scenarios","title":"Common Error Scenarios","text":"Error Type Status Code Description Validation Error 422 Invalid data format or values Not Found 404 Crew member doesn't exist Duplicate Data 409 Employee ID or email already exists Permission Denied 403 Insufficient permissions Certificate Conflict 409 Duplicate certificate for crew member"},{"location":"api/crew/#endpoints","title":"Endpoints","text":""},{"location":"api/crew/#core-crud-operations","title":"Core CRUD Operations","text":"<ul> <li>GET /crew-members - List crew members with filtering</li> <li>POST /crew-members - Create new crew member</li> <li>GET /crew-members/{id} - Get crew member details</li> <li>PUT /crew-members/{id} - Update crew member</li> <li>DELETE /crew-members/{id} - Delete crew member (soft delete)</li> </ul>"},{"location":"api/crew/#certificate-management","title":"Certificate Management","text":"<ul> <li>POST /crew-members/{id}/certificates - Add certificate</li> <li>GET /crew-members/{id}/certificates - List certificates</li> <li>GET /crew-members/{id}/certificates/status - Certificate status summary</li> <li>PUT /crew-members/{id}/certificates/{cert_id} - Update certificate</li> <li>DELETE /crew-members/{id}/certificates/{cert_id} - Delete certificate</li> </ul>"},{"location":"api/crew/#vessel-assignments","title":"Vessel Assignments","text":"<ul> <li>POST /crew-members/{id}/assign-vessel - Assign to vessel</li> <li>GET /crew-members/{id}/assignments - Assignment history</li> <li>PUT /crew-members/{id}/assignments/{assignment_id} - Update assignment</li> <li>DELETE /crew-members/{id}/assignments/{assignment_id} - End assignment</li> </ul>"},{"location":"api/crew/#bulk-operations_1","title":"Bulk Operations","text":"<ul> <li>POST /crew-members/bulk - Bulk create crew members</li> <li>PUT /crew-members/bulk - Bulk update crew members</li> <li>POST /crew-members/bulk/status - Bulk status change</li> </ul>"},{"location":"api/crew/#reports-and-analytics","title":"Reports and Analytics","text":"<ul> <li>GET /crew-members/reports/certificates - Certificate expiration report</li> <li>GET /crew-members/reports/availability - Crew availability report</li> <li>GET /crew-members/reports/assignments - Assignment statistics</li> </ul>"},{"location":"api/crew/#integration-examples","title":"Integration Examples","text":""},{"location":"api/crew/#basic-crew-management-workflow","title":"Basic Crew Management Workflow","text":"PythonJavaScript <pre><code>import requests\n\nclass CrewClient:\n    def __init__(self, base_url: str, access_token: str):\n        self.base_url = base_url\n        self.headers = {\n            \"Authorization\": f\"Bearer {access_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def create_crew_member(self, crew_data: dict):\n        \"\"\"Create a new crew member\"\"\"\n        response = requests.post(\n            f\"{self.base_url}/api/v1/crew-members\",\n            json=crew_data,\n            headers=self.headers\n        )\n        return response.json() if response.status_code == 201 else None\n\n    def list_crew_members(self, filters: dict = None, page: int = 1, size: int = 20):\n        \"\"\"List crew members with optional filters\"\"\"\n        params = {\"page\": page, \"size\": size}\n        if filters:\n            params.update(filters)\n\n        response = requests.get(\n            f\"{self.base_url}/api/v1/crew-members\",\n            params=params,\n            headers=self.headers\n        )\n        return response.json() if response.status_code == 200 else None\n\n    def get_crew_member(self, crew_id: str):\n        \"\"\"Get detailed crew member information\"\"\"\n        response = requests.get(\n            f\"{self.base_url}/api/v1/crew-members/{crew_id}\",\n            headers=self.headers\n        )\n        return response.json() if response.status_code == 200 else None\n\n    def add_certificate(self, crew_id: str, certificate_data: dict):\n        \"\"\"Add certificate to crew member\"\"\"\n        response = requests.post(\n            f\"{self.base_url}/api/v1/crew-members/{crew_id}/certificates\",\n            json=certificate_data,\n            headers=self.headers\n        )\n        return response.json() if response.status_code == 201 else None\n\n# Usage\nclient = CrewClient(\"http://localhost:8000\", access_token)\n\n# Create crew member\ncrew_data = {\n    \"first_name\": \"John\",\n    \"last_name\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"rank\": \"Chief Officer\",\n    \"department\": \"deck\",\n    \"date_joined\": \"2024-01-15\",\n    \"nationality\": \"Panama\"\n}\ncrew = client.create_crew_member(crew_data)\n\n# List available crew members\navailable_crew = client.list_crew_members({\n    \"status\": \"available\",\n    \"department\": \"deck\"\n})\n\n# Add certificate\ncert_data = {\n    \"type\": \"STCW Basic Safety\",\n    \"number\": \"STCW123\",\n    \"name\": \"Standards of Training, Certification and Watchkeeping - Basic Safety Training\",\n    \"issue_date\": \"2023-01-01\",\n    \"expiry_date\": \"2025-01-01\",\n    \"issued_by\": \"Maritime Authority Panama\"\n}\nclient.add_certificate(crew[\"id\"], cert_data)\n</code></pre> <pre><code>class CrewManagementAPI {\n    constructor(baseUrl, accessToken) {\n        this.baseUrl = baseUrl;\n        this.headers = {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json'\n        };\n    }\n\n    async createCrewMember(crewData) {\n        const response = await fetch(`${this.baseUrl}/api/v1/crew-members`, {\n            method: 'POST',\n            headers: this.headers,\n            body: JSON.stringify(crewData)\n        });\n        return response.ok ? await response.json() : null;\n    }\n\n    async listCrewMembers(filters = {}, page = 1, size = 20) {\n        const params = new URLSearchParams({ page, size, ...filters });\n        const response = await fetch(\n            `${this.baseUrl}/api/v1/crew-members?${params}`,\n            { headers: this.headers }\n        );\n        return response.ok ? await response.json() : null;\n    }\n\n    async getCrewMember(crewId) {\n        const response = await fetch(\n            `${this.baseUrl}/api/v1/crew-members/${crewId}`,\n            { headers: this.headers }\n        );\n        return response.ok ? await response.json() : null;\n    }\n\n    async addCertificate(crewId, certificateData) {\n        const response = await fetch(\n            `${this.baseUrl}/api/v1/crew-members/${crewId}/certificates`,\n            {\n                method: 'POST',\n                headers: this.headers,\n                body: JSON.stringify(certificateData)\n            }\n        );\n        return response.ok ? await response.json() : null;\n    }\n\n    async checkCertificateStatus(crewId) {\n        const response = await fetch(\n            `${this.baseUrl}/api/v1/crew-members/${crewId}/certificates/status`,\n            { headers: this.headers }\n        );\n        return response.ok ? await response.json() : null;\n    }\n}\n\n// Usage\nconst api = new CrewManagementAPI('http://localhost:8000', accessToken);\n\n// Create and manage crew member\nconst crewMember = await api.createCrewMember({\n    first_name: 'John',\n    last_name: 'Smith',\n    email: 'john.smith@example.com',\n    rank: 'Chief Officer',\n    department: 'deck',\n    date_joined: '2024-01-15'\n});\n\nif (crewMember) {\n    // Add certificate\n    await api.addCertificate(crewMember.id, {\n        type: 'STCW Basic Safety',\n        number: 'STCW123',\n        name: 'Basic Safety Training',\n        issue_date: '2023-01-01',\n        expiry_date: '2025-01-01',\n        issued_by: 'Maritime Authority'\n    });\n\n    // Check certificate status\n    const certStatus = await api.checkCertificateStatus(crewMember.id);\n    console.log('Certificate status:', certStatus);\n}\n</code></pre>"},{"location":"api/crew/#best-practices","title":"Best Practices","text":""},{"location":"api/crew/#data-management","title":"Data Management","text":"<ol> <li>Validate certificates before adding to crew profiles</li> <li>Monitor expiration dates and set up renewal alerts</li> <li>Maintain contact information accuracy for emergency situations</li> <li>Regular status updates to reflect current crew availability</li> <li>Backup critical data including certificates and personal information</li> </ol>"},{"location":"api/crew/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Use pagination for large crew lists</li> <li>Apply appropriate filters to reduce result sets</li> <li>Bulk operations for multiple crew member updates</li> <li>Cache frequently accessed data like department lists</li> <li>Index search fields for better query performance</li> </ol>"},{"location":"api/crew/#security-considerations","title":"Security Considerations","text":"<ol> <li>Protect personal data according to privacy regulations</li> <li>Audit all changes to crew member records</li> <li>Restrict sensitive operations to authorized personnel</li> <li>Secure certificate documents and verify authenticity</li> <li>Regular permission reviews to ensure proper access control</li> </ol>"},{"location":"api/crew/create/","title":"POST /crew-members","text":"<p>Create a new crew member with personal information, professional details, and optional certificates.</p>"},{"location":"api/crew/create/#endpoint","title":"Endpoint","text":"<pre><code>POST /api/v1/crew-members\n</code></pre>"},{"location":"api/crew/create/#description","title":"Description","text":"<p>This endpoint creates a new crew member in the system with comprehensive personal and professional information. The crew member can be created with optional certificates, contact details, and employment information. The system will automatically generate a unique employee ID if not provided.</p>"},{"location":"api/crew/create/#authentication","title":"Authentication","text":"<p>Authentication required - Requires the <code>crew.write</code> permission.</p> <p>Allowed Roles: <code>admin</code>, <code>crew_manager</code>, <code>hr_manager</code></p>"},{"location":"api/crew/create/#request","title":"Request","text":""},{"location":"api/crew/create/#headers","title":"Headers","text":"<pre><code>Authorization: Bearer &lt;access_token&gt;\nContent-Type: application/json\n</code></pre>"},{"location":"api/crew/create/#request-body","title":"Request Body","text":""},{"location":"api/crew/create/#required-fields","title":"Required Fields","text":"Field Type Constraints Description <code>first_name</code> string 1-100 chars Crew member's first name <code>last_name</code> string 1-100 chars Crew member's last name <code>email</code> string Valid email Email address (must be unique) <code>rank</code> string 1-100 chars Current rank or position <code>department</code> string Enum Ship department (deck, engine, catering, electrical, radio) <code>date_joined</code> string ISO date Date joined the company"},{"location":"api/crew/create/#optional-personal-information","title":"Optional Personal Information","text":"Field Type Constraints Description <code>middle_name</code> string Max 100 chars Middle name <code>phone</code> string Max 50 chars Primary phone number <code>phone_secondary</code> string Max 50 chars Secondary phone number <code>date_of_birth</code> string ISO date Date of birth <code>nationality</code> string Max 100 chars Nationality <code>passport_number</code> string Max 50 chars Passport number <code>passport_expiry</code> string ISO date Passport expiry date <code>seaman_book_number</code> string Max 50 chars Seaman's book number"},{"location":"api/crew/create/#optional-employment-information","title":"Optional Employment Information","text":"Field Type Constraints Description <code>employee_id</code> string Max 50 chars Company employee ID (auto-generated if not provided) <code>status</code> string Enum Initial status (default: \"available\") <code>contract_type</code> string Max 50 chars Type of employment contract <code>contract_duration_months</code> integer 1-24 Contract duration in months"},{"location":"api/crew/create/#optional-address-information","title":"Optional Address Information","text":"Field Type Constraints Description <code>address_line1</code> string Max 255 chars Primary address line <code>address_line2</code> string Max 255 chars Secondary address line <code>city</code> string Max 100 chars City <code>state_province</code> string Max 100 chars State or province <code>postal_code</code> string Max 20 chars Postal/ZIP code <code>country</code> string Max 100 chars Country"},{"location":"api/crew/create/#optional-emergency-contact","title":"Optional Emergency Contact","text":"Field Type Constraints Description <code>emergency_contact_name</code> string Max 200 chars Emergency contact full name <code>emergency_contact_relationship</code> string Max 50 chars Relationship to crew member <code>emergency_contact_phone</code> string Max 50 chars Emergency contact phone <code>emergency_contact_email</code> string Valid email Emergency contact email"},{"location":"api/crew/create/#optional-additional-information","title":"Optional Additional Information","text":"Field Type Description <code>notes</code> string Additional notes about the crew member <code>certificates</code> array Array of certificates to create with the crew member"},{"location":"api/crew/create/#certificate-object-structure","title":"Certificate Object Structure","text":"Field Type Required Description <code>type</code> string Yes Certificate type/category <code>name</code> string Yes Full certificate name <code>number</code> string Yes Certificate number <code>issue_date</code> string Yes Issue date (ISO format) <code>expiry_date</code> string No Expiry date (ISO format) <code>is_lifetime</code> boolean No Whether certificate is lifetime valid <code>issued_by</code> string Yes Issuing authority <code>issuing_country</code> string No Country of issuance <code>is_required</code> boolean No Whether certificate is required for role"},{"location":"api/crew/create/#json-schema","title":"JSON Schema","text":"<pre><code>{\n  \"type\": \"object\",\n  \"required\": [\"first_name\", \"last_name\", \"email\", \"rank\", \"department\", \"date_joined\"],\n  \"properties\": {\n    \"first_name\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"maxLength\": 100\n    },\n    \"last_name\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"maxLength\": 100\n    },\n    \"email\": {\n      \"type\": \"string\",\n      \"format\": \"email\"\n    },\n    \"rank\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"maxLength\": 100\n    },\n    \"department\": {\n      \"type\": \"string\",\n      \"enum\": [\"deck\", \"engine\", \"catering\", \"electrical\", \"radio\"]\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"enum\": [\"active\", \"available\", \"on_vessel\", \"on_leave\", \"training\", \"medical\", \"inactive\"],\n      \"default\": \"available\"\n    },\n    \"date_joined\": {\n      \"type\": \"string\",\n      \"format\": \"date\"\n    },\n    \"certificates\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"required\": [\"type\", \"name\", \"number\", \"issue_date\", \"issued_by\"],\n        \"properties\": {\n          \"type\": {\"type\": \"string\"},\n          \"name\": {\"type\": \"string\"},\n          \"number\": {\"type\": \"string\"},\n          \"issue_date\": {\"type\": \"string\", \"format\": \"date\"},\n          \"expiry_date\": {\"type\": \"string\", \"format\": \"date\"},\n          \"issued_by\": {\"type\": \"string\"}\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"api/crew/create/#example-request-body","title":"Example Request Body","text":"<pre><code>{\n  \"first_name\": \"John\",\n  \"last_name\": \"Smith\",\n  \"middle_name\": \"William\",\n  \"email\": \"john.smith@example.com\",\n  \"phone\": \"+1234567890\",\n  \"phone_secondary\": \"+1234567891\",\n  \"rank\": \"Chief Officer\",\n  \"department\": \"deck\",\n  \"status\": \"available\",\n  \"date_of_birth\": \"1985-06-15\",\n  \"nationality\": \"Panama\",\n  \"passport_number\": \"PA123456789\",\n  \"passport_expiry\": \"2028-06-15\",\n  \"seaman_book_number\": \"SB987654321\",\n  \"date_joined\": \"2024-01-15\",\n  \"contract_type\": \"Fixed Term\",\n  \"contract_duration_months\": 12,\n  \"address_line1\": \"123 Main Street\",\n  \"address_line2\": \"Apt 4B\",\n  \"city\": \"Panama City\",\n  \"state_province\": \"Panama Province\",\n  \"postal_code\": \"0801\",\n  \"country\": \"Panama\",\n  \"emergency_contact_name\": \"Jane Smith\",\n  \"emergency_contact_relationship\": \"Spouse\",\n  \"emergency_contact_phone\": \"+1234567892\",\n  \"emergency_contact_email\": \"jane.smith@example.com\",\n  \"notes\": \"Experienced officer with excellent safety record\",\n  \"certificates\": [\n    {\n      \"type\": \"STCW Basic Safety\",\n      \"name\": \"Standards of Training, Certification and Watchkeeping - Basic Safety Training\",\n      \"number\": \"STCW123456\",\n      \"issue_date\": \"2023-01-01\",\n      \"expiry_date\": \"2025-01-01\",\n      \"is_lifetime\": false,\n      \"issued_by\": \"Panama Maritime Authority\",\n      \"issuing_country\": \"Panama\",\n      \"is_required\": true\n    },\n    {\n      \"type\": \"Medical Certificate\",\n      \"name\": \"Seafarer Medical Fitness Certificate\",\n      \"number\": \"MED789012\",\n      \"issue_date\": \"2023-06-01\",\n      \"expiry_date\": \"2025-06-01\",\n      \"is_lifetime\": false,\n      \"issued_by\": \"Authorized Medical Examiner\",\n      \"issuing_country\": \"Panama\",\n      \"is_required\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"api/crew/create/#response","title":"Response","text":""},{"location":"api/crew/create/#success-response-201-created","title":"Success Response (201 Created)","text":"<p>Returns the complete crew member object with all computed fields and generated IDs.</p> Field Type Description <code>id</code> string Generated crew member UUID <code>employee_id</code> string Generated or provided employee ID <code>full_name</code> string Computed full name <code>certificates</code> array Created certificates with their IDs <code>created_at</code> string Creation timestamp <code>updated_at</code> string Last update timestamp"},{"location":"api/crew/create/#example-response","title":"Example Response","text":"<pre><code>{\n  \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"employee_id\": \"EMP2024001\",\n  \"full_name\": \"John William Smith\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Smith\",\n  \"middle_name\": \"William\",\n  \"email\": \"john.smith@example.com\",\n  \"phone\": \"+1234567890\",\n  \"phone_secondary\": \"+1234567891\",\n  \"rank\": \"Chief Officer\",\n  \"department\": \"deck\",\n  \"status\": \"available\",\n  \"date_of_birth\": \"1985-06-15\",\n  \"nationality\": \"Panama\",\n  \"passport_number\": \"PA123456789\",\n  \"passport_expiry\": \"2028-06-15\",\n  \"seaman_book_number\": \"SB987654321\",\n  \"date_joined\": \"2024-01-15\",\n  \"date_left\": null,\n  \"contract_type\": \"Fixed Term\",\n  \"contract_duration_months\": 12,\n  \"address_line1\": \"123 Main Street\",\n  \"address_line2\": \"Apt 4B\",\n  \"city\": \"Panama City\",\n  \"state_province\": \"Panama Province\",\n  \"postal_code\": \"0801\",\n  \"country\": \"Panama\",\n  \"emergency_contact_name\": \"Jane Smith\",\n  \"emergency_contact_relationship\": \"Spouse\",\n  \"emergency_contact_phone\": \"+1234567892\",\n  \"emergency_contact_email\": \"jane.smith@example.com\",\n  \"photo_url\": null,\n  \"notes\": \"Experienced officer with excellent safety record\",\n  \"certificates\": [\n    {\n      \"id\": \"660e8400-e29b-41d4-a716-446655440001\",\n      \"type\": \"STCW Basic Safety\",\n      \"name\": \"Standards of Training, Certification and Watchkeeping - Basic Safety Training\",\n      \"number\": \"STCW123456\",\n      \"issue_date\": \"2023-01-01\",\n      \"expiry_date\": \"2025-01-01\",\n      \"is_lifetime\": false,\n      \"issued_by\": \"Panama Maritime Authority\",\n      \"issuing_country\": \"Panama\",\n      \"is_required\": true,\n      \"is_verified\": false,\n      \"status\": \"valid\",\n      \"created_at\": \"2024-01-15T10:00:00Z\",\n      \"updated_at\": \"2024-01-15T10:00:00Z\"\n    },\n    {\n      \"id\": \"770e8400-e29b-41d4-a716-446655440002\",\n      \"type\": \"Medical Certificate\",\n      \"name\": \"Seafarer Medical Fitness Certificate\",\n      \"number\": \"MED789012\",\n      \"issue_date\": \"2023-06-01\",\n      \"expiry_date\": \"2025-06-01\",\n      \"is_lifetime\": false,\n      \"issued_by\": \"Authorized Medical Examiner\",\n      \"issuing_country\": \"Panama\",\n      \"is_required\": true,\n      \"is_verified\": false,\n      \"status\": \"valid\",\n      \"created_at\": \"2024-01-15T10:00:00Z\",\n      \"updated_at\": \"2024-01-15T10:00:00Z\"\n    }\n  ],\n  \"current_vessel_assignment\": null,\n  \"created_at\": \"2024-01-15T10:00:00Z\",\n  \"updated_at\": \"2024-01-15T10:00:00Z\"\n}\n</code></pre>"},{"location":"api/crew/create/#error-responses","title":"Error Responses","text":""},{"location":"api/crew/create/#401-unauthorized","title":"401 Unauthorized","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"AUTHENTICATION_REQUIRED\",\n    \"message\": \"Valid authentication token required\"\n  }\n}\n</code></pre>"},{"location":"api/crew/create/#403-forbidden","title":"403 Forbidden","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"PERMISSION_DENIED\",\n    \"message\": \"Insufficient permissions. Required: crew.write\"\n  }\n}\n</code></pre>"},{"location":"api/crew/create/#409-conflict-duplicate-data","title":"409 Conflict - Duplicate Data","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"DUPLICATE_EMAIL\",\n    \"message\": \"Email address already exists in the system\",\n    \"details\": {\n      \"conflicting_field\": \"email\",\n      \"conflicting_value\": \"john.smith@example.com\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/crew/create/#409-conflict-duplicate-employee-id","title":"409 Conflict - Duplicate Employee ID","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"DUPLICATE_EMPLOYEE_ID\",\n    \"message\": \"Employee ID already exists in the system\",\n    \"details\": {\n      \"conflicting_field\": \"employee_id\",\n      \"conflicting_value\": \"EMP001\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/crew/create/#422-unprocessable-entity-validation-error","title":"422 Unprocessable Entity - Validation Error","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Request validation failed\",\n    \"details\": {\n      \"field_errors\": {\n        \"email\": [\"Invalid email format\"],\n        \"first_name\": [\"First name is required\"],\n        \"department\": [\"Invalid department. Must be one of: deck, engine, catering, electrical, radio\"],\n        \"date_joined\": [\"Date must be in YYYY-MM-DD format\"],\n        \"certificates[0].expiry_date\": [\"Expiry date cannot be before issue date\"]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"api/crew/create/#500-internal-server-error","title":"500 Internal Server Error","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"CREATION_FAILED\",\n    \"message\": \"Failed to create crew member due to server error\"\n  }\n}\n</code></pre>"},{"location":"api/crew/create/#examples","title":"Examples","text":""},{"location":"api/crew/create/#curl","title":"cURL","text":"Minimal RequestComplete Request <pre><code>curl -X POST http://localhost:8000/api/v1/crew-members \\\n     -H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"first_name\": \"John\",\n       \"last_name\": \"Smith\",\n       \"email\": \"john.smith@example.com\",\n       \"rank\": \"Chief Officer\",\n       \"department\": \"deck\",\n       \"date_joined\": \"2024-01-15\"\n     }'\n</code></pre> <pre><code>curl -X POST http://localhost:8000/api/v1/crew-members \\\n     -H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"first_name\": \"John\",\n       \"last_name\": \"Smith\",\n       \"email\": \"john.smith@example.com\",\n       \"phone\": \"+1234567890\",\n       \"rank\": \"Chief Officer\",\n       \"department\": \"deck\",\n       \"status\": \"available\",\n       \"nationality\": \"Panama\",\n       \"date_joined\": \"2024-01-15\",\n       \"contract_type\": \"Fixed Term\",\n       \"certificates\": [\n         {\n           \"type\": \"STCW Basic Safety\",\n           \"name\": \"Basic Safety Training\",\n           \"number\": \"STCW123456\",\n           \"issue_date\": \"2023-01-01\",\n           \"expiry_date\": \"2025-01-01\",\n           \"issued_by\": \"Panama Maritime Authority\"\n         }\n       ]\n     }'\n</code></pre>"},{"location":"api/crew/create/#python","title":"Python","text":"Basic UsageCrew Management Class <pre><code>import requests\nfrom datetime import date\n\ndef create_crew_member(access_token: str, crew_data: dict):\n    \"\"\"\n    Create a new crew member.\n\n    Args:\n        access_token: Authentication token\n        crew_data: Crew member data dictionary\n\n    Returns:\n        dict: Created crew member data or None if failed\n    \"\"\"\n    url = \"http://localhost:8000/api/v1/crew-members\"\n    headers = {\n        \"Authorization\": f\"Bearer {access_token}\",\n        \"Content-Type\": \"application/json\"\n    }\n\n    try:\n        response = requests.post(url, json=crew_data, headers=headers, timeout=30)\n\n        if response.status_code == 201:\n            return response.json()\n        elif response.status_code == 409:\n            error_data = response.json()\n            print(f\"Conflict: {error_data.get('error', {}).get('message')}\")\n            return None\n        elif response.status_code == 422:\n            error_data = response.json()\n            field_errors = error_data.get('error', {}).get('details', {}).get('field_errors', {})\n            print(\"Validation errors:\")\n            for field, errors in field_errors.items():\n                print(f\"  {field}: {', '.join(errors)}\")\n            return None\n        else:\n            error_data = response.json()\n            print(f\"API Error: {error_data.get('error', {}).get('message')}\")\n            return None\n\n    except requests.RequestException as e:\n        print(f\"Network error: {e}\")\n        return None\n\n# Usage examples\naccess_token = \"your_access_token_here\"\n\n# Create minimal crew member\nminimal_crew = {\n    \"first_name\": \"John\",\n    \"last_name\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"rank\": \"Chief Officer\",\n    \"department\": \"deck\",\n    \"date_joined\": str(date.today())\n}\n\ncrew_member = create_crew_member(access_token, minimal_crew)\nif crew_member:\n    print(f\"Created crew member: {crew_member['full_name']} (ID: {crew_member['id']})\")\n\n# Create crew member with certificates\ncomplete_crew = {\n    \"first_name\": \"Maria\",\n    \"last_name\": \"Rodriguez\",\n    \"email\": \"maria.rodriguez@example.com\",\n    \"phone\": \"+1234567890\",\n    \"rank\": \"Second Engineer\",\n    \"department\": \"engine\",\n    \"status\": \"available\",\n    \"nationality\": \"Philippines\",\n    \"date_of_birth\": \"1990-03-15\",\n    \"date_joined\": \"2024-01-15\",\n    \"contract_type\": \"Fixed Term\",\n    \"contract_duration_months\": 8,\n    \"certificates\": [\n        {\n            \"type\": \"Engineering Watch Rating\",\n            \"name\": \"STCW Engineering Watch Rating Certificate\",\n            \"number\": \"EWR789012\",\n            \"issue_date\": \"2023-01-15\",\n            \"expiry_date\": \"2025-01-15\",\n            \"issued_by\": \"Philippines Maritime Authority\"\n        },\n        {\n            \"type\": \"Medical Certificate\",\n            \"name\": \"Seafarer Medical Fitness\",\n            \"number\": \"MED345678\",\n            \"issue_date\": \"2023-06-01\",\n            \"expiry_date\": \"2025-06-01\",\n            \"issued_by\": \"Authorized Medical Examiner\"\n        }\n    ]\n}\n\ncrew_with_certs = create_crew_member(access_token, complete_crew)\nif crew_with_certs:\n    print(f\"Created crew member with {len(crew_with_certs['certificates'])} certificates\")\n</code></pre> <pre><code>import requests\nfrom typing import Dict, List, Optional\nfrom dataclasses import dataclass\nfrom datetime import date\n\n@dataclass\nclass Certificate:\n    type: str\n    name: str\n    number: str\n    issue_date: str\n    issued_by: str\n    expiry_date: Optional[str] = None\n    is_lifetime: bool = False\n    issuing_country: Optional[str] = None\n    is_required: bool = True\n\n@dataclass\nclass CrewMember:\n    first_name: str\n    last_name: str\n    email: str\n    rank: str\n    department: str\n    date_joined: str\n    middle_name: Optional[str] = None\n    phone: Optional[str] = None\n    status: str = \"available\"\n    nationality: Optional[str] = None\n    date_of_birth: Optional[str] = None\n    contract_type: Optional[str] = None\n    certificates: List[Certificate] = None\n\n    def __post_init__(self):\n        if self.certificates is None:\n            self.certificates = []\n\nclass CrewManagementAPI:\n    def __init__(self, base_url: str, access_token: str):\n        self.base_url = base_url\n        self.headers = {\n            \"Authorization\": f\"Bearer {access_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def create_crew_member(self, crew: CrewMember) -&gt; Optional[Dict]:\n        \"\"\"Create crew member from dataclass\"\"\"\n        # Convert dataclass to dictionary\n        crew_data = {\n            \"first_name\": crew.first_name,\n            \"last_name\": crew.last_name,\n            \"email\": crew.email,\n            \"rank\": crew.rank,\n            \"department\": crew.department,\n            \"date_joined\": crew.date_joined,\n            \"status\": crew.status\n        }\n\n        # Add optional fields if present\n        optional_fields = [\n            \"middle_name\", \"phone\", \"nationality\", \"date_of_birth\", \"contract_type\"\n        ]\n        for field in optional_fields:\n            value = getattr(crew, field)\n            if value is not None:\n                crew_data[field] = value\n\n        # Add certificates\n        if crew.certificates:\n            crew_data[\"certificates\"] = []\n            for cert in crew.certificates:\n                cert_dict = {\n                    \"type\": cert.type,\n                    \"name\": cert.name,\n                    \"number\": cert.number,\n                    \"issue_date\": cert.issue_date,\n                    \"issued_by\": cert.issued_by,\n                    \"is_lifetime\": cert.is_lifetime,\n                    \"is_required\": cert.is_required\n                }\n                if cert.expiry_date:\n                    cert_dict[\"expiry_date\"] = cert.expiry_date\n                if cert.issuing_country:\n                    cert_dict[\"issuing_country\"] = cert.issuing_country\n\n                crew_data[\"certificates\"].append(cert_dict)\n\n        return self._make_request(\"POST\", \"/crew-members\", crew_data)\n\n    def _make_request(self, method: str, endpoint: str, data: Dict = None) -&gt; Optional[Dict]:\n        \"\"\"Make HTTP request to API\"\"\"\n        url = f\"{self.base_url}/api/v1{endpoint}\"\n\n        try:\n            if method == \"POST\":\n                response = requests.post(url, json=data, headers=self.headers, timeout=30)\n            else:\n                response = requests.get(url, headers=self.headers, timeout=30)\n\n            if response.status_code in [200, 201]:\n                return response.json()\n            else:\n                error_data = response.json()\n                print(f\"API Error ({response.status_code}): {error_data.get('error', {}).get('message')}\")\n                return None\n\n        except requests.RequestException as e:\n            print(f\"Network error: {e}\")\n            return None\n\n# Usage\napi = CrewManagementAPI(\"http://localhost:8000\", access_token)\n\n# Create crew member with certificates\ncrew = CrewMember(\n    first_name=\"Captain\",\n    last_name=\"Anderson\",\n    email=\"captain.anderson@example.com\",\n    rank=\"Master\",\n    department=\"deck\",\n    date_joined=str(date.today()),\n    nationality=\"Norway\",\n    certificates=[\n        Certificate(\n            type=\"Master Mariner License\",\n            name=\"Master Mariner Unlimited License\",\n            number=\"MM2024001\",\n            issue_date=\"2023-01-01\",\n            expiry_date=\"2028-01-01\",\n            issued_by=\"Norwegian Maritime Authority\"\n        ),\n        Certificate(\n            type=\"Medical Certificate\",\n            name=\"Medical Fitness Certificate\",\n            number=\"MED2024001\",\n            issue_date=\"2023-06-01\",\n            expiry_date=\"2025-06-01\",\n            issued_by=\"Authorized Medical Examiner\"\n        )\n    ]\n)\n\nresult = api.create_crew_member(crew)\nif result:\n    print(f\"Created crew member: {result['full_name']}\")\n    print(f\"Employee ID: {result['employee_id']}\")\n    print(f\"Certificates created: {len(result['certificates'])}\")\n</code></pre>"},{"location":"api/crew/create/#javascripttypescript","title":"JavaScript/TypeScript","text":"Basic UsageTypeScript with Interfaces <pre><code>async function createCrewMember(accessToken, crewData) {\n    try {\n        const response = await fetch('http://localhost:8000/api/v1/crew-members', {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(crewData)\n        });\n\n        const responseData = await response.json();\n\n        if (response.ok) {\n            console.log('Crew member created:', responseData.full_name);\n            return responseData;\n        } else {\n            // Handle different error types\n            switch (response.status) {\n                case 409:\n                    console.error('Conflict:', responseData.error.message);\n                    break;\n                case 422:\n                    console.error('Validation errors:');\n                    Object.entries(responseData.error.details.field_errors || {})\n                        .forEach(([field, errors]) =&gt; {\n                            console.error(`  ${field}: ${errors.join(', ')}`);\n                        });\n                    break;\n                default:\n                    console.error('API Error:', responseData.error.message);\n            }\n            return null;\n        }\n    } catch (error) {\n        console.error('Network error:', error);\n        return null;\n    }\n}\n\n// Usage\nconst crewData = {\n    first_name: 'John',\n    last_name: 'Smith',\n    email: 'john.smith@example.com',\n    rank: 'Chief Officer',\n    department: 'deck',\n    date_joined: '2024-01-15',\n    nationality: 'Panama',\n    certificates: [\n        {\n            type: 'STCW Basic Safety',\n            name: 'Basic Safety Training',\n            number: 'STCW123456',\n            issue_date: '2023-01-01',\n            expiry_date: '2025-01-01',\n            issued_by: 'Panama Maritime Authority'\n        }\n    ]\n};\n\nconst newCrewMember = await createCrewMember(accessToken, crewData);\nif (newCrewMember) {\n    console.log(`Created crew member ID: ${newCrewMember.id}`);\n}\n</code></pre> <pre><code>interface Certificate {\n    type: string;\n    name: string;\n    number: string;\n    issue_date: string;\n    issued_by: string;\n    expiry_date?: string;\n    is_lifetime?: boolean;\n    issuing_country?: string;\n    is_required?: boolean;\n}\n\ninterface CrewMemberCreate {\n    first_name: string;\n    last_name: string;\n    email: string;\n    rank: string;\n    department: 'deck' | 'engine' | 'catering' | 'electrical' | 'radio';\n    date_joined: string;\n    middle_name?: string;\n    phone?: string;\n    phone_secondary?: string;\n    status?: 'active' | 'available' | 'on_vessel' | 'on_leave' | 'training' | 'medical' | 'inactive';\n    date_of_birth?: string;\n    nationality?: string;\n    passport_number?: string;\n    passport_expiry?: string;\n    seaman_book_number?: string;\n    employee_id?: string;\n    contract_type?: string;\n    contract_duration_months?: number;\n    certificates?: Certificate[];\n}\n\ninterface CrewMemberResponse extends CrewMemberCreate {\n    id: string;\n    employee_id: string;\n    full_name: string;\n    created_at: string;\n    updated_at: string;\n    certificates: (Certificate &amp; { id: string; status: string })[];\n}\n\ninterface APIError {\n    success: false;\n    error: {\n        code: string;\n        message: string;\n        details?: {\n            field_errors?: Record&lt;string, string[]&gt;;\n        };\n    };\n}\n\nclass CrewMemberAPI {\n    constructor(\n        private baseUrl: string,\n        private accessToken: string\n    ) {}\n\n    async createCrewMember(crewData: CrewMemberCreate): Promise&lt;CrewMemberResponse | null&gt; {\n        try {\n            const response = await fetch(`${this.baseUrl}/api/v1/crew-members`, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${this.accessToken}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(crewData)\n            });\n\n            const data = await response.json();\n\n            if (response.ok) {\n                return data as CrewMemberResponse;\n            } else {\n                this.handleError(response.status, data as APIError);\n                return null;\n            }\n        } catch (error) {\n            console.error('Network error:', error);\n            return null;\n        }\n    }\n\n    private handleError(status: number, errorData: APIError): void {\n        switch (status) {\n            case 409:\n                console.error(`Conflict: ${errorData.error.message}`);\n                break;\n            case 422:\n                console.error('Validation errors:');\n                Object.entries(errorData.error.details?.field_errors || {})\n                    .forEach(([field, errors]) =&gt; {\n                        console.error(`  ${field}: ${errors.join(', ')}`);\n                    });\n                break;\n            case 403:\n                console.error('Permission denied:', errorData.error.message);\n                break;\n            default:\n                console.error(`API Error (${status}):`, errorData.error.message);\n        }\n    }\n\n    // Helper method to validate crew data before sending\n    validateCrewData(crewData: CrewMemberCreate): string[] {\n        const errors: string[] = [];\n\n        if (!crewData.first_name?.trim()) {\n            errors.push('First name is required');\n        }\n        if (!crewData.last_name?.trim()) {\n            errors.push('Last name is required');\n        }\n        if (!crewData.email?.includes('@')) {\n            errors.push('Valid email is required');\n        }\n        if (!crewData.rank?.trim()) {\n            errors.push('Rank is required');\n        }\n        if (!['deck', 'engine', 'catering', 'electrical', 'radio'].includes(crewData.department)) {\n            errors.push('Valid department is required');\n        }\n        if (!crewData.date_joined) {\n            errors.push('Date joined is required');\n        }\n\n        // Validate certificates if present\n        crewData.certificates?.forEach((cert, index) =&gt; {\n            if (!cert.type?.trim()) {\n                errors.push(`Certificate ${index + 1}: Type is required`);\n            }\n            if (!cert.name?.trim()) {\n                errors.push(`Certificate ${index + 1}: Name is required`);\n            }\n            if (!cert.number?.trim()) {\n                errors.push(`Certificate ${index + 1}: Number is required`);\n            }\n            if (cert.expiry_date &amp;&amp; cert.expiry_date &lt;= cert.issue_date) {\n                errors.push(`Certificate ${index + 1}: Expiry date must be after issue date`);\n            }\n        });\n\n        return errors;\n    }\n}\n\n// Usage\nconst api = new CrewMemberAPI('http://localhost:8000', accessToken);\n\nconst crewData: CrewMemberCreate = {\n    first_name: 'John',\n    last_name: 'Smith',\n    email: 'john.smith@example.com',\n    rank: 'Chief Officer',\n    department: 'deck',\n    date_joined: '2024-01-15',\n    nationality: 'Panama',\n    certificates: [\n        {\n            type: 'STCW Basic Safety',\n            name: 'Standards of Training, Certification and Watchkeeping - Basic Safety Training',\n            number: 'STCW123456',\n            issue_date: '2023-01-01',\n            expiry_date: '2025-01-01',\n            issued_by: 'Panama Maritime Authority',\n            is_required: true\n        }\n    ]\n};\n\n// Validate before sending\nconst validationErrors = api.validateCrewData(crewData);\nif (validationErrors.length &gt; 0) {\n    console.error('Validation errors:', validationErrors);\n} else {\n    const newCrewMember = await api.createCrewMember(crewData);\n    if (newCrewMember) {\n        console.log(`Created: ${newCrewMember.full_name} (${newCrewMember.employee_id})`);\n    }\n}\n</code></pre>"},{"location":"api/crew/create/#notes","title":"Notes","text":""},{"location":"api/crew/create/#business-logic","title":"Business Logic","text":"<ol> <li>Employee ID Generation: If not provided, the system generates a unique employee ID</li> <li>Email Uniqueness: Email addresses must be unique across all crew members</li> <li>Certificate Validation: Certificate expiry dates are validated against issue dates</li> <li>Status Default: New crew members default to \"available\" status</li> </ol>"},{"location":"api/crew/create/#data-validation","title":"Data Validation","text":"<ol> <li>Required Fields: First name, last name, email, rank, department, and date joined are mandatory</li> <li>Email Format: Must be a valid email address format</li> <li>Date Formats: All dates must be in ISO format (YYYY-MM-DD)</li> <li>Department Values: Must be one of the allowed department enums</li> <li>Certificate Logic: If <code>is_lifetime</code> is true, <code>expiry_date</code> should not be provided</li> </ol>"},{"location":"api/crew/create/#error-handling","title":"Error Handling","text":"<ol> <li>Duplicate Detection: System checks for duplicate email addresses and employee IDs</li> <li>Validation Errors: Detailed field-level validation errors are returned</li> <li>Certificate Errors: Validation errors for individual certificates are clearly identified</li> <li>Rollback: If crew member creation fails, no partial data is saved</li> </ol>"},{"location":"api/crew/create/#best-practices","title":"Best Practices","text":"<ol> <li>Validate client-side before sending to reduce server requests</li> <li>Handle all error responses appropriately in your application</li> <li>Store returned IDs for future operations</li> <li>Use batch creation for multiple crew members when possible</li> <li>Consider certificate verification workflows after creation</li> </ol>"},{"location":"api/crew/list/","title":"GET /crew-members","text":"<p>List crew members with optional filtering, sorting, and pagination.</p>"},{"location":"api/crew/list/#endpoint","title":"Endpoint","text":"<pre><code>GET /api/v1/crew-members\n</code></pre>"},{"location":"api/crew/list/#description","title":"Description","text":"<p>This endpoint returns a paginated list of crew members with comprehensive filtering and search capabilities. Results can be filtered by various criteria including status, department, rank, nationality, vessel assignment, and certificate validity.</p>"},{"location":"api/crew/list/#authentication","title":"Authentication","text":"<p>Authentication required - Requires the <code>crew.read</code> permission.</p> <p>Allowed Roles: <code>admin</code>, <code>crew_manager</code>, <code>hr_manager</code>, <code>fleet_manager</code></p>"},{"location":"api/crew/list/#request","title":"Request","text":""},{"location":"api/crew/list/#headers","title":"Headers","text":"<pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre>"},{"location":"api/crew/list/#query-parameters","title":"Query Parameters","text":""},{"location":"api/crew/list/#pagination-parameters","title":"Pagination Parameters","text":"Parameter Type Required Default Description <code>page</code> integer No 1 Page number (minimum: 1) <code>size</code> integer No 20 Items per page (minimum: 1, maximum: 100)"},{"location":"api/crew/list/#filter-parameters","title":"Filter Parameters","text":"Parameter Type Required Description <code>status</code> string No Filter by crew status (active, available, on_vessel, etc.) <code>department</code> string No Filter by department (deck, engine, catering, electrical, radio) <code>rank</code> string No Filter by crew rank/position <code>vessel_id</code> string No Filter by current vessel assignment <code>nationality</code> string No Filter by crew nationality <code>has_valid_certificates</code> boolean No Filter by certificate validity status <code>search</code> string No Search across name, email, and employee_id fields"},{"location":"api/crew/list/#date-filter-parameters","title":"Date Filter Parameters","text":"Parameter Type Format Description <code>joined_after</code> string YYYY-MM-DD Filter by joining date (after) <code>joined_before</code> string YYYY-MM-DD Filter by joining date (before) <code>cert_expiring_within_days</code> integer - Filter crew with certificates expiring within specified days"},{"location":"api/crew/list/#sorting-parameters","title":"Sorting Parameters","text":"Parameter Type Description <code>sort_by</code> string Sort field (name, rank, date_joined, status) <code>sort_order</code> string Sort direction (asc, desc)"},{"location":"api/crew/list/#example-request-urls","title":"Example Request URLs","text":"<pre><code># Basic list request\nGET /api/v1/crew-members?page=1&amp;size=20\n\n# Filter by status and department\nGET /api/v1/crew-members?status=available&amp;department=deck\n\n# Search by name\nGET /api/v1/crew-members?search=john&amp;page=1&amp;size=10\n\n# Filter by certificate expiration\nGET /api/v1/crew-members?cert_expiring_within_days=30\n\n# Complex filter\nGET /api/v1/crew-members?status=active&amp;department=engine&amp;nationality=Philippines&amp;page=2&amp;size=25\n</code></pre>"},{"location":"api/crew/list/#response","title":"Response","text":""},{"location":"api/crew/list/#success-response-200-ok","title":"Success Response (200 OK)","text":"Field Type Description <code>success</code> boolean Always true for successful responses <code>data</code> object Response data containing items and pagination <code>data.items</code> array Array of crew member objects <code>data.pagination</code> object Pagination information"},{"location":"api/crew/list/#pagination-object","title":"Pagination Object","text":"Field Type Description <code>page</code> integer Current page number <code>size</code> integer Items per page <code>total</code> integer Total number of items <code>total_pages</code> integer Total number of pages <code>has_next</code> boolean Whether there is a next page <code>has_previous</code> boolean Whether there is a previous page"},{"location":"api/crew/list/#crew-member-object","title":"Crew Member Object","text":"Field Type Description <code>id</code> string Crew member UUID <code>employee_id</code> string Company employee identifier <code>full_name</code> string Full name (computed) <code>first_name</code> string First name <code>last_name</code> string Last name <code>middle_name</code> string Middle name (nullable) <code>email</code> string Email address <code>phone</code> string Primary phone number <code>rank</code> string Current rank/position <code>department</code> string Ship department <code>status</code> string Current operational status <code>nationality</code> string Nationality <code>date_joined</code> string Date joined company (ISO format) <code>current_vessel_assignment</code> object Current vessel assignment (nullable) <code>certificate_status</code> object Certificate validity summary <code>created_at</code> string Record creation timestamp <code>updated_at</code> string Last update timestamp"},{"location":"api/crew/list/#current-vessel-assignment-object","title":"Current Vessel Assignment Object","text":"Field Type Description <code>id</code> string Assignment UUID <code>vessel_id</code> string Vessel UUID <code>vessel_name</code> string Vessel name <code>role</code> string Role on vessel <code>start_date</code> string Assignment start date <code>is_active</code> boolean Whether assignment is active"},{"location":"api/crew/list/#certificate-status-object","title":"Certificate Status Object","text":"Field Type Description <code>total_certificates</code> integer Total number of certificates <code>valid_certificates</code> integer Number of valid certificates <code>expiring_soon</code> integer Certificates expiring within alert period <code>expired_certificates</code> integer Number of expired certificates <code>compliance_score</code> number Overall compliance score (0-100)"},{"location":"api/crew/list/#example-response","title":"Example Response","text":"<pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"items\": [\n      {\n        \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n        \"employee_id\": \"EMP001\",\n        \"full_name\": \"John Smith\",\n        \"first_name\": \"John\",\n        \"last_name\": \"Smith\",\n        \"middle_name\": null,\n        \"email\": \"john.smith@example.com\",\n        \"phone\": \"+1234567890\",\n        \"rank\": \"Chief Officer\",\n        \"department\": \"deck\",\n        \"status\": \"available\",\n        \"nationality\": \"Panama\",\n        \"date_joined\": \"2020-01-15\",\n        \"current_vessel_assignment\": null,\n        \"certificate_status\": {\n          \"total_certificates\": 5,\n          \"valid_certificates\": 4,\n          \"expiring_soon\": 1,\n          \"expired_certificates\": 0,\n          \"compliance_score\": 85.0\n        },\n        \"created_at\": \"2020-01-15T08:00:00Z\",\n        \"updated_at\": \"2024-01-10T14:30:00Z\"\n      },\n      {\n        \"id\": \"660e8400-e29b-41d4-a716-446655440001\",\n        \"employee_id\": \"EMP002\",\n        \"full_name\": \"Maria Rodriguez\",\n        \"first_name\": \"Maria\",\n        \"last_name\": \"Rodriguez\",\n        \"middle_name\": \"Elena\",\n        \"email\": \"maria.rodriguez@example.com\",\n        \"phone\": \"+1234567891\",\n        \"rank\": \"Second Engineer\",\n        \"department\": \"engine\",\n        \"status\": \"on_vessel\",\n        \"nationality\": \"Philippines\",\n        \"date_joined\": \"2021-03-10\",\n        \"current_vessel_assignment\": {\n          \"id\": \"770e8400-e29b-41d4-a716-446655440002\",\n          \"vessel_id\": \"880e8400-e29b-41d4-a716-446655440003\",\n          \"vessel_name\": \"MV Ocean Star\",\n          \"role\": \"Second Engineer\",\n          \"start_date\": \"2024-01-01\",\n          \"is_active\": true\n        },\n        \"certificate_status\": {\n          \"total_certificates\": 8,\n          \"valid_certificates\": 8,\n          \"expiring_soon\": 0,\n          \"expired_certificates\": 0,\n          \"compliance_score\": 100.0\n        },\n        \"created_at\": \"2021-03-10T10:15:00Z\",\n        \"updated_at\": \"2024-01-01T09:00:00Z\"\n      }\n    ],\n    \"pagination\": {\n      \"page\": 1,\n      \"size\": 20,\n      \"total\": 245,\n      \"total_pages\": 13,\n      \"has_next\": true,\n      \"has_previous\": false\n    }\n  }\n}\n</code></pre>"},{"location":"api/crew/list/#error-responses","title":"Error Responses","text":""},{"location":"api/crew/list/#401-unauthorized","title":"401 Unauthorized","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"AUTHENTICATION_REQUIRED\",\n    \"message\": \"Valid authentication token required\"\n  }\n}\n</code></pre>"},{"location":"api/crew/list/#403-forbidden","title":"403 Forbidden","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"PERMISSION_DENIED\",\n    \"message\": \"Insufficient permissions. Required: crew.read\"\n  }\n}\n</code></pre>"},{"location":"api/crew/list/#422-unprocessable-entity-validation-error","title":"422 Unprocessable Entity - Validation Error","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Request validation failed\",\n    \"details\": {\n      \"parameter_errors\": {\n        \"page\": [\"Page number must be greater than 0\"],\n        \"size\": [\"Page size must be between 1 and 100\"],\n        \"status\": [\"Invalid status value. Must be one of: active, available, on_vessel, on_leave, training, medical, inactive\"]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"api/crew/list/#500-internal-server-error","title":"500 Internal Server Error","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"INTERNAL_SERVER_ERROR\",\n    \"message\": \"Failed to retrieve crew members\"\n  }\n}\n</code></pre>"},{"location":"api/crew/list/#examples","title":"Examples","text":""},{"location":"api/crew/list/#curl","title":"cURL","text":"Basic ListWith FiltersSearch and Filter <pre><code>curl -X GET \"http://localhost:8000/api/v1/crew-members?page=1&amp;size=20\" \\\n     -H \"Authorization: Bearer $ACCESS_TOKEN\"\n</code></pre> <pre><code>curl -X GET \"http://localhost:8000/api/v1/crew-members?status=available&amp;department=deck&amp;page=1&amp;size=10\" \\\n     -H \"Authorization: Bearer $ACCESS_TOKEN\"\n</code></pre> <pre><code>curl -X GET \"http://localhost:8000/api/v1/crew-members?search=john&amp;nationality=Panama&amp;sort_by=name&amp;sort_order=asc\" \\\n     -H \"Authorization: Bearer $ACCESS_TOKEN\"\n</code></pre>"},{"location":"api/crew/list/#python","title":"Python","text":"Basic UsageAdvanced Filtering <pre><code>import requests\n\ndef list_crew_members(access_token: str, filters: dict = None, page: int = 1, size: int = 20):\n    \"\"\"\n    List crew members with optional filters.\n\n    Args:\n        access_token: Authentication token\n        filters: Dictionary of filter parameters\n        page: Page number\n        size: Items per page\n\n    Returns:\n        dict: API response with crew members and pagination\n    \"\"\"\n    url = \"http://localhost:8000/api/v1/crew-members\"\n    headers = {\n        \"Authorization\": f\"Bearer {access_token}\",\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Build query parameters\n    params = {\"page\": page, \"size\": size}\n    if filters:\n        params.update(filters)\n\n    try:\n        response = requests.get(url, headers=headers, params=params, timeout=30)\n\n        if response.status_code == 200:\n            return response.json()\n        else:\n            error_data = response.json()\n            print(f\"API Error: {error_data.get('error', {}).get('message')}\")\n            return None\n\n    except requests.RequestException as e:\n        print(f\"Network error: {e}\")\n        return None\n\n# Usage examples\naccess_token = \"your_access_token_here\"\n\n# Get first page of crew members\ncrew_list = list_crew_members(access_token)\nif crew_list:\n    print(f\"Found {crew_list['data']['pagination']['total']} crew members\")\n    for crew in crew_list['data']['items']:\n        print(f\"- {crew['full_name']} ({crew['rank']}) - {crew['status']}\")\n\n# Filter by status and department\navailable_deck_crew = list_crew_members(\n    access_token,\n    filters={\"status\": \"available\", \"department\": \"deck\"},\n    size=50\n)\n\n# Search for specific crew member\nsearch_results = list_crew_members(\n    access_token,\n    filters={\"search\": \"john\"}\n)\n</code></pre> <pre><code>import requests\nfrom datetime import datetime, timedelta\n\nclass CrewMemberFilter:\n    def __init__(self, access_token: str, base_url: str = \"http://localhost:8000\"):\n        self.access_token = access_token\n        self.base_url = base_url\n        self.headers = {\n            \"Authorization\": f\"Bearer {access_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def get_available_crew_by_department(self, department: str):\n        \"\"\"Get all available crew members in a specific department\"\"\"\n        return self._list_crew({\n            \"status\": \"available\",\n            \"department\": department\n        })\n\n    def get_crew_with_expiring_certificates(self, days: int = 30):\n        \"\"\"Get crew members with certificates expiring soon\"\"\"\n        return self._list_crew({\n            \"cert_expiring_within_days\": days\n        })\n\n    def search_crew_by_name(self, name: str):\n        \"\"\"Search crew members by name\"\"\"\n        return self._list_crew({\"search\": name})\n\n    def get_crew_by_vessel(self, vessel_id: str):\n        \"\"\"Get crew members assigned to a specific vessel\"\"\"\n        return self._list_crew({\"vessel_id\": vessel_id})\n\n    def get_crew_joined_in_period(self, start_date: str, end_date: str):\n        \"\"\"Get crew members who joined within a date range\"\"\"\n        return self._list_crew({\n            \"joined_after\": start_date,\n            \"joined_before\": end_date\n        })\n\n    def _list_crew(self, filters: dict, page: int = 1, size: int = 100):\n        \"\"\"Internal method to list crew with filters\"\"\"\n        params = {\"page\": page, \"size\": size}\n        params.update(filters)\n\n        try:\n            response = requests.get(\n                f\"{self.base_url}/api/v1/crew-members\",\n                headers=self.headers,\n                params=params,\n                timeout=30\n            )\n\n            if response.status_code == 200:\n                return response.json()\n            return None\n\n        except requests.RequestException:\n            return None\n\n# Usage\ncrew_filter = CrewMemberFilter(access_token)\n\n# Get available deck crew\navailable_deck = crew_filter.get_available_crew_by_department(\"deck\")\nprint(f\"Available deck crew: {len(available_deck['data']['items'])}\")\n\n# Check for expiring certificates\nexpiring_certs = crew_filter.get_crew_with_expiring_certificates(30)\nprint(f\"Crew with expiring certificates: {len(expiring_certs['data']['items'])}\")\n\n# Search for crew member\njohn_results = crew_filter.search_crew_by_name(\"john\")\nif john_results and john_results['data']['items']:\n    print(f\"Found crew members named John: {len(john_results['data']['items'])}\")\n</code></pre>"},{"location":"api/crew/list/#javascripttypescript","title":"JavaScript/TypeScript","text":"Basic UsageReact Hook <pre><code>class CrewMemberAPI {\n    constructor(baseUrl, accessToken) {\n        this.baseUrl = baseUrl;\n        this.headers = {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json'\n        };\n    }\n\n    async listCrewMembers(options = {}) {\n        const { filters = {}, page = 1, size = 20, sortBy, sortOrder } = options;\n\n        // Build query parameters\n        const params = new URLSearchParams({\n            page: page.toString(),\n            size: size.toString(),\n            ...filters\n        });\n\n        if (sortBy) params.append('sort_by', sortBy);\n        if (sortOrder) params.append('sort_order', sortOrder);\n\n        try {\n            const response = await fetch(\n                `${this.baseUrl}/api/v1/crew-members?${params}`,\n                { headers: this.headers }\n            );\n\n            if (response.ok) {\n                return await response.json();\n            } else {\n                const errorData = await response.json();\n                console.error('API Error:', errorData.error.message);\n                return null;\n            }\n        } catch (error) {\n            console.error('Network error:', error);\n            return null;\n        }\n    }\n\n    async getAllCrewMembers(filters = {}) {\n        \"\"\"Fetch all crew members by iterating through pages\"\"\"\n        const allCrewMembers = [];\n        let page = 1;\n        let hasMore = true;\n\n        while (hasMore) {\n            const response = await this.listCrewMembers({\n                filters,\n                page,\n                size: 100\n            });\n\n            if (response &amp;&amp; response.data) {\n                allCrewMembers.push(...response.data.items);\n                hasMore = response.data.pagination.has_next;\n                page++;\n            } else {\n                break;\n            }\n        }\n\n        return allCrewMembers;\n    }\n}\n\n// Usage\nconst api = new CrewMemberAPI('http://localhost:8000', accessToken);\n\n// Get first page of crew members\nconst crewList = await api.listCrewMembers({\n    page: 1,\n    size: 20,\n    sortBy: 'name',\n    sortOrder: 'asc'\n});\n\nif (crewList) {\n    console.log(`Total crew members: ${crewList.data.pagination.total}`);\n    crewList.data.items.forEach(crew =&gt; {\n        console.log(`${crew.full_name} - ${crew.rank} (${crew.status})`);\n    });\n}\n\n// Filter by status and department\nconst availableEngineCrew = await api.listCrewMembers({\n    filters: {\n        status: 'available',\n        department: 'engine'\n    }\n});\n\n// Search for crew members\nconst searchResults = await api.listCrewMembers({\n    filters: {\n        search: 'maria'\n    }\n});\n\n// Get all crew members (multiple pages)\nconst allCrew = await api.getAllCrewMembers({\n    status: 'active'\n});\nconsole.log(`Total active crew members: ${allCrew.length}`);\n</code></pre> <pre><code>import { useState, useEffect } from 'react';\n\ninterface CrewMember {\n    id: string;\n    full_name: string;\n    rank: string;\n    department: string;\n    status: string;\n    // ... other fields\n}\n\ninterface CrewListFilter {\n    status?: string;\n    department?: string;\n    search?: string;\n    nationality?: string;\n}\n\ninterface UseCrewListOptions {\n    filters?: CrewListFilter;\n    page?: number;\n    size?: number;\n    autoFetch?: boolean;\n}\n\nexport function useCrewList(options: UseCrewListOptions = {}) {\n    const { filters = {}, page = 1, size = 20, autoFetch = true } = options;\n\n    const [crewMembers, setCrewMembers] = useState&lt;CrewMember[]&gt;([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState&lt;string | null&gt;(null);\n    const [pagination, setPagination] = useState({\n        page: 1,\n        size: 20,\n        total: 0,\n        total_pages: 0,\n        has_next: false,\n        has_previous: false\n    });\n\n    const fetchCrewMembers = async (newFilters?: CrewListFilter, newPage?: number) =&gt; {\n        setLoading(true);\n        setError(null);\n\n        try {\n            const currentFilters = newFilters || filters;\n            const currentPage = newPage || page;\n\n            const params = new URLSearchParams({\n                page: currentPage.toString(),\n                size: size.toString(),\n                ...currentFilters\n            });\n\n            const response = await fetch(\n                `/api/v1/crew-members?${params}`,\n                {\n                    headers: {\n                        'Authorization': `Bearer ${getAccessToken()}`,\n                        'Content-Type': 'application/json'\n                    }\n                }\n            );\n\n            if (response.ok) {\n                const data = await response.json();\n                setCrewMembers(data.data.items);\n                setPagination(data.data.pagination);\n            } else {\n                const errorData = await response.json();\n                setError(errorData.error.message);\n            }\n        } catch (err) {\n            setError('Failed to fetch crew members');\n            console.error('Fetch error:', err);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() =&gt; {\n        if (autoFetch) {\n            fetchCrewMembers();\n        }\n    }, [JSON.stringify(filters), page, size, autoFetch]);\n\n    return {\n        crewMembers,\n        loading,\n        error,\n        pagination,\n        refetch: fetchCrewMembers,\n        nextPage: () =&gt; pagination.has_next &amp;&amp; fetchCrewMembers(filters, pagination.page + 1),\n        previousPage: () =&gt; pagination.has_previous &amp;&amp; fetchCrewMembers(filters, pagination.page - 1)\n    };\n}\n\n// Usage in component\nfunction CrewMemberList() {\n    const [filters, setFilters] = useState({});\n\n    const {\n        crewMembers,\n        loading,\n        error,\n        pagination,\n        refetch,\n        nextPage,\n        previousPage\n    } = useCrewList({ filters });\n\n    const handleFilterChange = (newFilters) =&gt; {\n        setFilters(newFilters);\n    };\n\n    if (loading) return &lt;div&gt;Loading...&lt;/div&gt;;\n    if (error) return &lt;div&gt;Error: {error}&lt;/div&gt;;\n\n    return (\n        &lt;div&gt;\n            &lt;CrewFilters onFiltersChange={handleFilterChange} /&gt;\n\n            &lt;div className=\"crew-list\"&gt;\n                {crewMembers.map(crew =&gt; (\n                    &lt;div key={crew.id} className=\"crew-card\"&gt;\n                        &lt;h3&gt;{crew.full_name}&lt;/h3&gt;\n                        &lt;p&gt;{crew.rank} - {crew.department}&lt;/p&gt;\n                        &lt;span className={`status ${crew.status}`}&gt;\n                            {crew.status}\n                        &lt;/span&gt;\n                    &lt;/div&gt;\n                ))}\n            &lt;/div&gt;\n\n            &lt;div className=\"pagination\"&gt;\n                &lt;button onClick={previousPage} disabled={!pagination.has_previous}&gt;\n                    Previous\n                &lt;/button&gt;\n                &lt;span&gt;\n                    Page {pagination.page} of {pagination.total_pages}\n                &lt;/span&gt;\n                &lt;button onClick={nextPage} disabled={!pagination.has_next}&gt;\n                    Next\n                &lt;/button&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre>"},{"location":"api/crew/list/#notes","title":"Notes","text":""},{"location":"api/crew/list/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>Use appropriate page sizes - larger pages reduce API calls but increase response time</li> <li>Apply filters to reduce result sets and improve performance</li> <li>Consider caching frequently accessed crew lists</li> <li>Use search wisely - specific searches are more efficient than broad queries</li> </ol>"},{"location":"api/crew/list/#filtering-best-practices","title":"Filtering Best Practices","text":"<ol> <li>Combine filters for more precise results</li> <li>Use status filters to get actionable crew lists (e.g., available crew)</li> <li>Certificate expiration filtering helps with compliance monitoring</li> <li>Date range filtering is useful for reporting and analytics</li> </ol>"},{"location":"api/crew/list/#error-handling","title":"Error Handling","text":"<ol> <li>Validate filter parameters before sending requests</li> <li>Handle pagination edge cases (empty results, invalid page numbers)</li> <li>Implement retry logic for network failures</li> <li>Display user-friendly error messages for validation failures</li> </ol>"},{"location":"api/crew/list/#integration-tips","title":"Integration Tips","text":"<ol> <li>Implement client-side caching for better user experience</li> <li>Use real-time updates when crew status changes frequently</li> <li>Combine with other APIs (vessels, certificates) for comprehensive views</li> <li>Export capabilities for reporting and data analysis</li> </ol>"},{"location":"api/forms/","title":"Forms API","text":"<p>The Forms API provides dynamic form management capabilities for collecting various types of data from crew members, including medical forms, training records, incident reports, and custom organizational forms.</p>"},{"location":"api/forms/#overview","title":"Overview","text":"<p>The Dynamic Forms system enables flexible data collection through:</p> <ul> <li>Form Templates: Configurable form definitions with various field types</li> <li>Form Submissions: User-submitted form data with validation</li> <li>Workflow Integration: Approval processes and routing</li> <li>File Attachments: Support for document uploads</li> <li>Versioning: Form template versioning and migration</li> <li>Reporting: Data analysis and export capabilities</li> </ul>"},{"location":"api/forms/#form-categories","title":"Form Categories","text":""},{"location":"api/forms/#standard-form-types","title":"Standard Form Types","text":"Category Description Examples Medical Health and medical information Medical examinations, fitness declarations Training Training completion and certificates Course certificates, skill assessments Incident Safety and incident reporting Accident reports, near-miss reports HR Human resources processes Leave requests, grievance forms Compliance Regulatory compliance forms Port state control, audit forms Feedback Feedback and evaluation forms Customer feedback, crew surveys Custom Organization-specific forms Company-specific data collection"},{"location":"api/forms/#data-model","title":"Data Model","text":""},{"location":"api/forms/#form-template","title":"Form Template","text":"Field Type Description <code>id</code> UUID Template identifier <code>name</code> string Form name <code>description</code> string Form description <code>category</code> string Form category <code>version</code> integer Template version number <code>is_active</code> boolean Whether template is active <code>fields</code> array Form field definitions <code>workflow_config</code> object Approval workflow configuration <code>access_permissions</code> array Who can access this form"},{"location":"api/forms/#form-field-types","title":"Form Field Types","text":"<p>The system supports various field types for flexible data collection:</p> Field Type Description Configuration Options <code>text</code> Single-line text input Max length, validation patterns <code>textarea</code> Multi-line text input Rows, max length <code>number</code> Numeric input Min/max values, decimal places <code>email</code> Email address input Email validation <code>date</code> Date selection Min/max dates, format <code>datetime</code> Date and time selection Timezone handling <code>select</code> Dropdown selection Options list, multi-select <code>radio</code> Radio button selection Options list <code>checkbox</code> Checkbox input Single or group <code>file</code> File upload File types, size limits <code>signature</code> Digital signature Signature capture <code>location</code> GPS coordinates Location services"},{"location":"api/forms/#form-submission","title":"Form Submission","text":"Field Type Description <code>id</code> UUID Submission identifier <code>form_template_id</code> UUID Template used for submission <code>submitted_by</code> UUID User who submitted the form <code>submitted_at</code> datetime Submission timestamp <code>status</code> string Submission status <code>data</code> object Form field values <code>attachments</code> array Uploaded file references <code>workflow_state</code> object Current workflow position"},{"location":"api/forms/#submission-status","title":"Submission Status","text":"Status Description <code>draft</code> Form saved but not submitted <code>submitted</code> Submitted for review <code>under_review</code> Being reviewed by approver <code>approved</code> Approved and completed <code>rejected</code> Rejected, needs revision <code>completed</code> Processed and archived"},{"location":"api/forms/#field-validation","title":"Field Validation","text":""},{"location":"api/forms/#built-in-validators","title":"Built-in Validators","text":"Validator Description Configuration <code>required</code> Field must have a value Boolean flag <code>min_length</code> Minimum text length Integer value <code>max_length</code> Maximum text length Integer value <code>pattern</code> Regex pattern matching Regular expression <code>min_value</code> Minimum numeric value Number <code>max_value</code> Maximum numeric value Number <code>file_types</code> Allowed file extensions Array of extensions <code>file_size</code> Maximum file size Size in bytes <code>date_range</code> Valid date range Start and end dates <code>custom</code> Custom validation function JavaScript function"},{"location":"api/forms/#conditional-logic","title":"Conditional Logic","text":"<p>Forms support conditional field display and validation:</p> <ul> <li>Show/Hide Fields: Based on other field values</li> <li>Dynamic Validation: Validation rules that change based on context</li> <li>Calculated Fields: Auto-populated based on other fields</li> <li>Field Dependencies: Cascading dropdown selections</li> </ul>"},{"location":"api/forms/#permissions-and-access-control","title":"Permissions and Access Control","text":"Permission Description Allowed Roles <code>form.view</code> View form templates and submissions All authenticated users <code>form.submit</code> Submit forms <code>crew_member</code>, <code>supervisor</code>, etc. <code>form.manage</code> Create/edit form templates <code>admin</code>, <code>hr_manager</code> <code>form.approve</code> Approve submitted forms <code>supervisor</code>, <code>hr_manager</code>, <code>admin</code> <code>form.reports</code> Access form analytics <code>hr_manager</code>, <code>admin</code>"},{"location":"api/forms/#role-based-form-access","title":"Role-Based Form Access","text":"<ul> <li>Crew Members: Can submit forms assigned to them</li> <li>Supervisors: Can approve team member submissions</li> <li>HR Managers: Full access to HR-related forms</li> <li>Administrators: Complete system access</li> <li>Form Owners: Can manage specific form templates</li> </ul>"},{"location":"api/forms/#workflow-management","title":"Workflow Management","text":""},{"location":"api/forms/#approval-workflows","title":"Approval Workflows","text":"<p>Forms can be configured with multi-step approval processes:</p> <ol> <li>Linear Workflow: Sequential approvals (A \u2192 B \u2192 C)</li> <li>Parallel Workflow: Simultaneous approvals (A + B \u2192 C)</li> <li>Conditional Workflow: Different paths based on data</li> <li>Escalation Workflow: Auto-escalation for delayed approvals</li> </ol>"},{"location":"api/forms/#workflow-configuration","title":"Workflow Configuration","text":"<pre><code>{\n  \"workflow_type\": \"linear\",\n  \"steps\": [\n    {\n      \"name\": \"supervisor_review\",\n      \"approver_role\": \"supervisor\",\n      \"required\": true,\n      \"timeout_hours\": 48\n    },\n    {\n      \"name\": \"hr_approval\",\n      \"approver_role\": \"hr_manager\",\n      \"required\": true,\n      \"timeout_hours\": 72\n    }\n  ],\n  \"notifications\": {\n    \"submit\": [\"approver\", \"submitter\"],\n    \"approve\": [\"submitter\", \"next_approver\"],\n    \"reject\": [\"submitter\"]\n  }\n}\n</code></pre>"},{"location":"api/forms/#endpoints","title":"Endpoints","text":""},{"location":"api/forms/#form-template-management","title":"Form Template Management","text":"<ul> <li>GET /forms/templates - List form templates</li> <li>POST /forms/templates - Create form template</li> <li>GET /forms/templates/{id} - Get template details</li> <li>PUT /forms/templates/{id} - Update template</li> <li>DELETE /forms/templates/{id} - Delete template</li> </ul>"},{"location":"api/forms/#form-submission-operations","title":"Form Submission Operations","text":"<ul> <li>GET /forms/submissions - List form submissions</li> <li>POST /forms/submissions - Submit new form</li> <li>GET /forms/submissions/{id} - Get submission details</li> <li>PUT /forms/submissions/{id} - Update submission</li> <li>DELETE /forms/submissions/{id} - Delete submission</li> </ul>"},{"location":"api/forms/#workflow-operations","title":"Workflow Operations","text":"<ul> <li>POST /forms/submissions/{id}/submit - Submit for approval</li> <li>POST /forms/submissions/{id}/approve - Approve submission</li> <li>POST /forms/submissions/{id}/reject - Reject submission</li> <li>GET /forms/submissions/{id}/workflow - Get workflow status</li> </ul>"},{"location":"api/forms/#file-management","title":"File Management","text":"<ul> <li>POST /forms/submissions/{id}/attachments - Upload file</li> <li>GET /forms/submissions/{id}/attachments - List attachments</li> <li>DELETE /forms/submissions/{id}/attachments/{file_id} - Delete file</li> </ul>"},{"location":"api/forms/#reporting-and-analytics","title":"Reporting and Analytics","text":"<ul> <li>GET /forms/reports/submissions - Submission statistics</li> <li>GET /forms/reports/templates/{id}/analytics - Template usage analytics</li> <li>GET /forms/export/{template_id} - Export submission data</li> </ul>"},{"location":"api/forms/#integration-examples","title":"Integration Examples","text":""},{"location":"api/forms/#dynamic-form-creation-and-management","title":"Dynamic Form Creation and Management","text":"PythonJavaScript <pre><code>import requests\nfrom datetime import datetime, date\n\nclass FormsAPI:\n    def __init__(self, base_url: str, access_token: str):\n        self.base_url = base_url\n        self.headers = {\n            \"Authorization\": f\"Bearer {access_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def create_form_template(self, form_definition: dict):\n        \"\"\"Create a new form template\"\"\"\n        response = requests.post(\n            f\"{self.base_url}/api/v1/forms/templates\",\n            json=form_definition,\n            headers=self.headers\n        )\n        return response.json() if response.status_code == 201 else None\n\n    def submit_form(self, template_id: str, form_data: dict):\n        \"\"\"Submit a completed form\"\"\"\n        submission = {\n            \"form_template_id\": template_id,\n            \"data\": form_data,\n            \"submitted_at\": datetime.utcnow().isoformat()\n        }\n\n        response = requests.post(\n            f\"{self.base_url}/api/v1/forms/submissions\",\n            json=submission,\n            headers=self.headers\n        )\n        return response.json() if response.status_code == 201 else None\n\n    def list_pending_approvals(self):\n        \"\"\"Get forms pending approval\"\"\"\n        response = requests.get(\n            f\"{self.base_url}/api/v1/forms/submissions\",\n            params={\"status\": \"submitted\"},\n            headers=self.headers\n        )\n        return response.json() if response.status_code == 200 else None\n\n    def approve_submission(self, submission_id: str, approval_data: dict):\n        \"\"\"Approve a form submission\"\"\"\n        response = requests.post(\n            f\"{self.base_url}/api/v1/forms/submissions/{submission_id}/approve\",\n            json=approval_data,\n            headers=self.headers\n        )\n        return response.status_code == 200\n\n# Usage example\nforms_api = FormsAPI(\"http://localhost:8000\", access_token)\n\n# Create incident report form template\nincident_form = {\n    \"name\": \"Incident Report Form\",\n    \"description\": \"Report workplace incidents and near misses\",\n    \"category\": \"incident\",\n    \"fields\": [\n        {\n            \"name\": \"incident_date\",\n            \"type\": \"datetime\",\n            \"label\": \"Incident Date and Time\",\n            \"required\": True,\n            \"validation\": {\n                \"max_date\": str(date.today())\n            }\n        },\n        {\n            \"name\": \"incident_type\",\n            \"type\": \"select\",\n            \"label\": \"Incident Type\",\n            \"required\": True,\n            \"options\": [\n                {\"value\": \"injury\", \"label\": \"Personal Injury\"},\n                {\"value\": \"near_miss\", \"label\": \"Near Miss\"},\n                {\"value\": \"equipment\", \"label\": \"Equipment Damage\"},\n                {\"value\": \"environmental\", \"label\": \"Environmental\"}\n            ]\n        },\n        {\n            \"name\": \"location\",\n            \"type\": \"text\",\n            \"label\": \"Location\",\n            \"required\": True,\n            \"validation\": {\n                \"max_length\": 200\n            }\n        },\n        {\n            \"name\": \"description\",\n            \"type\": \"textarea\",\n            \"label\": \"Incident Description\",\n            \"required\": True,\n            \"validation\": {\n                \"min_length\": 50,\n                \"max_length\": 2000\n            }\n        },\n        {\n            \"name\": \"immediate_action\",\n            \"type\": \"textarea\",\n            \"label\": \"Immediate Action Taken\",\n            \"required\": True\n        },\n        {\n            \"name\": \"witnesses\",\n            \"type\": \"text\",\n            \"label\": \"Witnesses\",\n            \"required\": False\n        },\n        {\n            \"name\": \"photos\",\n            \"type\": \"file\",\n            \"label\": \"Photos/Evidence\",\n            \"required\": False,\n            \"validation\": {\n                \"file_types\": [\".jpg\", \".jpeg\", \".png\", \".pdf\"],\n                \"max_files\": 5,\n                \"max_size\": 5242880  # 5MB\n            }\n        }\n    ],\n    \"workflow_config\": {\n        \"workflow_type\": \"linear\",\n        \"steps\": [\n            {\n                \"name\": \"supervisor_review\",\n                \"approver_role\": \"supervisor\",\n                \"required\": True,\n                \"timeout_hours\": 24\n            },\n            {\n                \"name\": \"safety_officer_review\",\n                \"approver_role\": \"safety_officer\",\n                \"required\": True,\n                \"timeout_hours\": 48\n            }\n        ]\n    }\n}\n\ntemplate = forms_api.create_form_template(incident_form)\nif template:\n    print(f\"Created incident report template: {template['id']}\")\n\n    # Submit an incident report\n    incident_data = {\n        \"incident_date\": \"2024-01-15T14:30:00Z\",\n        \"incident_type\": \"near_miss\",\n        \"location\": \"Engine Room - Main Engine\",\n        \"description\": \"Oil spill near main engine during routine maintenance. Crew member nearly slipped but recovered balance. No injury occurred.\",\n        \"immediate_action\": \"Area cordoned off and cleaned immediately. Non-slip mats placed. All crew notified of hazard.\",\n        \"witnesses\": \"John Smith (Second Engineer), Mike Johnson (Oiler)\"\n    }\n\n    submission = forms_api.submit_form(template['id'], incident_data)\n    if submission:\n        print(f\"Incident report submitted: {submission['id']}\")\n\n# Check for pending approvals\npending = forms_api.list_pending_approvals()\nif pending:\n    print(f\"\\nPending approvals: {pending['total']}\")\n    for item in pending['items']:\n        print(f\"- {item['form_name']}: {item['submitted_by_name']} ({item['submitted_at']})\")\n\n        # Approve if supervisor\n        if item['current_approver_role'] == 'supervisor':\n            approval = forms_api.approve_submission(item['id'], {\n                \"approved\": True,\n                \"comments\": \"Incident properly reported. Recommend safety meeting.\"\n            })\n            if approval:\n                print(f\"  Approved submission {item['id']}\")\n</code></pre> <pre><code>class DynamicFormsAPI {\n    constructor(baseUrl, accessToken) {\n        this.baseUrl = baseUrl;\n        this.headers = {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json'\n        };\n    }\n\n    async createFormTemplate(templateDefinition) {\n        const response = await fetch(`${this.baseUrl}/api/v1/forms/templates`, {\n            method: 'POST',\n            headers: this.headers,\n            body: JSON.stringify(templateDefinition)\n        });\n        return response.ok ? await response.json() : null;\n    }\n\n    async getFormTemplates(category = null) {\n        const params = new URLSearchParams();\n        if (category) params.append('category', category);\n        params.append('is_active', 'true');\n\n        const response = await fetch(\n            `${this.baseUrl}/api/v1/forms/templates?${params}`,\n            { headers: this.headers }\n        );\n        return response.ok ? await response.json() : null;\n    }\n\n    async submitForm(templateId, formData, attachments = []) {\n        const submission = {\n            form_template_id: templateId,\n            data: formData,\n            submitted_at: new Date().toISOString()\n        };\n\n        const response = await fetch(`${this.baseUrl}/api/v1/forms/submissions`, {\n            method: 'POST',\n            headers: this.headers,\n            body: JSON.stringify(submission)\n        });\n\n        if (response.ok) {\n            const result = await response.json();\n\n            // Upload attachments if any\n            for (const attachment of attachments) {\n                await this.uploadAttachment(result.id, attachment);\n            }\n\n            return result;\n        }\n        return null;\n    }\n\n    async uploadAttachment(submissionId, file) {\n        const formData = new FormData();\n        formData.append('file', file);\n\n        const response = await fetch(\n            `${this.baseUrl}/api/v1/forms/submissions/${submissionId}/attachments`,\n            {\n                method: 'POST',\n                headers: {\n                    'Authorization': this.headers.Authorization\n                },\n                body: formData\n            }\n        );\n        return response.ok;\n    }\n\n    async getMySubmissions(status = null) {\n        const params = new URLSearchParams();\n        if (status) params.append('status', status);\n\n        const response = await fetch(\n            `${this.baseUrl}/api/v1/forms/submissions?${params}`,\n            { headers: this.headers }\n        );\n        return response.ok ? await response.json() : null;\n    }\n\n    async approveSubmission(submissionId, approvalData) {\n        const response = await fetch(\n            `${this.baseUrl}/api/v1/forms/submissions/${submissionId}/approve`,\n            {\n                method: 'POST',\n                headers: this.headers,\n                body: JSON.stringify(approvalData)\n            }\n        );\n        return response.ok;\n    }\n\n    async rejectSubmission(submissionId, rejectionData) {\n        const response = await fetch(\n            `${this.baseUrl}/api/v1/forms/submissions/${submissionId}/reject`,\n            {\n                method: 'POST',\n                headers: this.headers,\n                body: JSON.stringify(rejectionData)\n            }\n        );\n        return response.ok;\n    }\n}\n\n// Usage\nconst formsAPI = new DynamicFormsAPI('http://localhost:8000', accessToken);\n\n// Create medical declaration form\nasync function createMedicalForm() {\n    const medicalForm = {\n        name: 'Pre-Employment Medical Declaration',\n        description: 'Medical fitness declaration for crew members',\n        category: 'medical',\n        fields: [\n            {\n                name: 'full_name',\n                type: 'text',\n                label: 'Full Name',\n                required: true\n            },\n            {\n                name: 'date_of_birth',\n                type: 'date',\n                label: 'Date of Birth',\n                required: true\n            },\n            {\n                name: 'medical_history',\n                type: 'checkbox',\n                label: 'Medical History',\n                options: [\n                    { value: 'heart_disease', label: 'Heart Disease' },\n                    { value: 'diabetes', label: 'Diabetes' },\n                    { value: 'hypertension', label: 'High Blood Pressure' },\n                    { value: 'respiratory', label: 'Respiratory Issues' },\n                    { value: 'none', label: 'None of the above' }\n                ]\n            },\n            {\n                name: 'medications',\n                type: 'textarea',\n                label: 'Current Medications',\n                required: false,\n                validation: { max_length: 500 }\n            },\n            {\n                name: 'fitness_declaration',\n                type: 'checkbox',\n                label: 'I declare that I am medically fit for sea service',\n                required: true,\n                single: true\n            },\n            {\n                name: 'medical_certificate',\n                type: 'file',\n                label: 'Medical Certificate Upload',\n                required: true,\n                validation: {\n                    file_types: ['.pdf', '.jpg', '.jpeg'],\n                    max_size: 2097152 // 2MB\n                }\n            }\n        ]\n    };\n\n    const template = await formsAPI.createFormTemplate(medicalForm);\n    if (template) {\n        console.log('Medical form template created:', template.id);\n        return template;\n    }\n}\n\n// Submit medical declaration\nasync function submitMedicalDeclaration(templateId) {\n    const formData = {\n        full_name: 'John Smith',\n        date_of_birth: '1985-06-15',\n        medical_history: ['none'],\n        medications: '',\n        fitness_declaration: true\n    };\n\n    const submission = await formsAPI.submitForm(templateId, formData);\n    if (submission) {\n        console.log('Medical declaration submitted:', submission.id);\n\n        // Check submission status\n        setTimeout(async () =&gt; {\n            const mySubmissions = await formsAPI.getMySubmissions();\n            console.log('My submissions:', mySubmissions.items.length);\n        }, 1000);\n    }\n}\n\n// Approval workflow\nasync function handleApprovals() {\n    const pendingSubmissions = await formsAPI.getMySubmissions('submitted');\n\n    if (pendingSubmissions &amp;&amp; pendingSubmissions.items.length &gt; 0) {\n        console.log(`Found ${pendingSubmissions.items.length} submissions pending approval`);\n\n        for (const submission of pendingSubmissions.items) {\n            console.log(`Reviewing: ${submission.form_name} from ${submission.submitted_by_name}`);\n\n            // Approve the submission\n            const approved = await formsAPI.approveSubmission(submission.id, {\n                approved: true,\n                comments: 'Medical declaration reviewed and approved',\n                next_step: 'hr_processing'\n            });\n\n            if (approved) {\n                console.log(`Approved submission ${submission.id}`);\n            }\n        }\n    }\n}\n\n// Create form and demo workflow\ncreateMedicalForm().then(template =&gt; {\n    if (template) {\n        submitMedicalDeclaration(template.id);\n\n        // Simulate approval after delay\n        setTimeout(handleApprovals, 2000);\n    }\n});\n</code></pre>"},{"location":"api/forms/#best-practices","title":"Best Practices","text":""},{"location":"api/forms/#form-design","title":"Form Design","text":"<ol> <li>Keep forms focused - Single purpose per form</li> <li>Use clear labels - Self-explanatory field names</li> <li>Logical grouping - Group related fields together</li> <li>Progressive disclosure - Show fields based on previous answers</li> <li>Mobile-friendly - Consider mobile device limitations</li> </ol>"},{"location":"api/forms/#data-management","title":"Data Management","text":"<ol> <li>Validate early - Client-side validation for immediate feedback</li> <li>Secure sensitive data - Encrypt personal information</li> <li>Regular backups - Protect against data loss</li> <li>Audit trails - Track all form interactions</li> <li>Data retention - Implement appropriate retention policies</li> </ol>"},{"location":"api/forms/#workflow-optimization","title":"Workflow Optimization","text":"<ol> <li>Clear approval paths - Well-defined approval processes</li> <li>Reasonable timeouts - Appropriate approval timeframes</li> <li>Escalation procedures - Handle delayed approvals</li> <li>Notification management - Avoid notification fatigue</li> <li>Status transparency - Keep submitters informed</li> </ol>"},{"location":"api/forms/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>Optimize large forms - Consider pagination for long forms</li> <li>File size limits - Reasonable attachment size restrictions</li> <li>Database indexing - Index frequently queried fields</li> <li>Caching strategies - Cache form templates and static data</li> <li>Async processing - Handle large file uploads asynchronously</li> </ol>"},{"location":"api/vessels/","title":"Vessels API","text":"<p>The Vessels API provides comprehensive endpoints for fleet management, including vessel information, crew assignments, compliance tracking, and operational status management.</p>"},{"location":"api/vessels/#overview","title":"Overview","text":"<p>The Vessel Management system handles all aspects of fleet operations:</p> <ul> <li>Fleet Information: Vessel specifications, technical details, and documentation</li> <li>Crew Assignments: Managing crew deployments and rotations</li> <li>Compliance Tracking: Certificates, inspections, and regulatory requirements</li> <li>Operational Status: Vessel availability, location, and operational state</li> <li>Port Management: Port calls, berth assignments, and logistics</li> <li>Maintenance Scheduling: Dry dock, surveys, and maintenance planning</li> </ul>"},{"location":"api/vessels/#vessel-categories","title":"Vessel Categories","text":""},{"location":"api/vessels/#vessel-types","title":"Vessel Types","text":"<p>The system supports various types of maritime vessels:</p> Type Description Crew Size Range <code>container</code> Container cargo vessels 20-25 <code>bulk_carrier</code> Dry bulk cargo carriers 20-23 <code>tanker</code> Oil/chemical tankers 22-28 <code>general_cargo</code> General cargo vessels 18-22 <code>reefer</code> Refrigerated cargo vessels 20-24 <code>roro</code> Roll-on/Roll-off ferries 15-30 <code>cruise</code> Passenger cruise ships 800-2000 <code>offshore</code> Offshore support vessels 12-25"},{"location":"api/vessels/#vessel-status","title":"Vessel Status","text":"Status Description <code>active</code> In service and operational <code>dry_dock</code> Undergoing maintenance or repairs <code>laid_up</code> Temporarily out of service <code>under_construction</code> Being built or converted <code>sold</code> Sold or transferred out of fleet <code>scrapped</code> Decommissioned and scrapped"},{"location":"api/vessels/#data-model","title":"Data Model","text":""},{"location":"api/vessels/#vessel-object","title":"Vessel Object","text":"Field Type Description <code>id</code> UUID Unique vessel identifier <code>name</code> string Vessel name <code>imo_number</code> string International Maritime Organization number <code>call_sign</code> string Radio call sign <code>mmsi</code> string Maritime Mobile Service Identity <code>vessel_type</code> string Type of vessel <code>flag_state</code> string Country of registration <code>port_of_registry</code> string Official port of registration <code>year_built</code> integer Year of construction <code>gross_tonnage</code> number Gross tonnage (GT) <code>net_tonnage</code> number Net tonnage (NT) <code>deadweight</code> number Deadweight tonnage (DWT) <code>length_overall</code> number Length overall (LOA) in meters <code>beam</code> number Beam (width) in meters <code>draft</code> number Maximum draft in meters <code>crew_capacity</code> integer Maximum crew capacity <code>status</code> string Current operational status"},{"location":"api/vessels/#vessel-assignment","title":"Vessel Assignment","text":"Field Type Description <code>id</code> UUID Assignment identifier <code>vessel_id</code> UUID Vessel being assigned to <code>crew_member_id</code> UUID Crew member assigned <code>rank</code> string Rank/position on vessel <code>start_date</code> date Assignment start date <code>end_date</code> date Assignment end date (if known) <code>sign_on_port</code> string Port where crew member joins <code>sign_off_port</code> string Port where crew member leaves <code>is_active</code> boolean Whether assignment is currently active"},{"location":"api/vessels/#compliance-management","title":"Compliance Management","text":""},{"location":"api/vessels/#certificate-types","title":"Certificate Types","text":"<p>Vessels must maintain various certificates for regulatory compliance:</p> Certificate Type Validity Issuing Authority Safety Certificate 1 year Flag State Authority Security Certificate 5 years Recognized Security Organization Load Line Certificate 5 years Classification Society Tonnage Certificate Permanent Flag State Authority Radio Certificate 1-5 years Telecommunications Authority Insurance Certificate 1 year P&amp;I Club / Insurer"},{"location":"api/vessels/#inspection-types","title":"Inspection Types","text":"Inspection Frequency Authority Annual Survey Yearly Classification Society Intermediate Survey 2.5 years Classification Society Special Survey 5 years Classification Society Port State Control Random Port State Authority Flag State Inspection Varies Flag State Authority Vetting Inspection On demand Oil Majors / Charterers"},{"location":"api/vessels/#permissions","title":"Permissions","text":"Permission Description Allowed Roles <code>vessel.read</code> View vessel information All authenticated users <code>vessel.write</code> Create/update vessels <code>admin</code>, <code>fleet_manager</code> <code>vessel.assign</code> Manage crew assignments <code>admin</code>, <code>fleet_manager</code>, <code>crew_manager</code> <code>vessel.compliance</code> Manage certificates/compliance <code>admin</code>, <code>fleet_manager</code>"},{"location":"api/vessels/#key-features","title":"Key Features","text":""},{"location":"api/vessels/#fleet-tracking","title":"Fleet Tracking","text":"<ul> <li>Real-time vessel position tracking</li> <li>Voyage planning and monitoring</li> <li>Port call scheduling</li> <li>Fuel consumption tracking</li> <li>Performance monitoring</li> </ul>"},{"location":"api/vessels/#crew-planning","title":"Crew Planning","text":"<ul> <li>Optimal crew assignment algorithms</li> <li>Contract duration management</li> <li>Leave planning and coverage</li> <li>Emergency crew replacement</li> <li>Multi-vessel crew rotations</li> </ul>"},{"location":"api/vessels/#compliance-monitoring","title":"Compliance Monitoring","text":"<ul> <li>Certificate expiration tracking</li> <li>Inspection scheduling</li> <li>Regulatory requirement tracking</li> <li>Document management</li> <li>Compliance reporting</li> </ul>"},{"location":"api/vessels/#operational-efficiency","title":"Operational Efficiency","text":"<ul> <li>Voyage optimization</li> <li>Fuel efficiency monitoring</li> <li>Maintenance scheduling</li> <li>Performance benchmarking</li> <li>Cost tracking and analysis</li> </ul>"},{"location":"api/vessels/#endpoints","title":"Endpoints","text":""},{"location":"api/vessels/#core-vessel-operations","title":"Core Vessel Operations","text":"<ul> <li>GET /vessels - List vessels with filtering</li> <li>POST /vessels - Create new vessel</li> <li>GET /vessels/{id} - Get vessel details</li> <li>PUT /vessels/{id} - Update vessel information</li> <li>DELETE /vessels/{id} - Remove vessel from fleet</li> </ul>"},{"location":"api/vessels/#crew-assignment-operations","title":"Crew Assignment Operations","text":"<ul> <li>GET /vessels/{id}/assignments - List current crew assignments</li> <li>POST /vessels/{id}/assignments - Create crew assignment</li> <li>PUT /vessels/{id}/assignments/{assignment_id} - Update assignment</li> <li>DELETE /vessels/{id}/assignments/{assignment_id} - End assignment</li> </ul>"},{"location":"api/vessels/#compliance-operations","title":"Compliance Operations","text":"<ul> <li>GET /vessels/{id}/certificates - List vessel certificates</li> <li>POST /vessels/{id}/certificates - Add certificate</li> <li>GET /vessels/{id}/compliance-status - Get compliance status</li> <li>GET /vessels/{id}/inspections - List inspections</li> </ul>"},{"location":"api/vessels/#operational-operations","title":"Operational Operations","text":"<ul> <li>GET /vessels/{id}/position - Get current position</li> <li>POST /vessels/{id}/position - Update position</li> <li>GET /vessels/{id}/voyage - Get current voyage info</li> <li>POST /vessels/{id}/port-call - Record port call</li> </ul>"},{"location":"api/vessels/#reporting-operations","title":"Reporting Operations","text":"<ul> <li>GET /vessels/reports/fleet-status - Fleet status overview</li> <li>GET /vessels/reports/crew-deployment - Crew deployment report</li> <li>GET /vessels/reports/compliance - Fleet compliance report</li> <li>GET /vessels/reports/utilization - Vessel utilization report</li> </ul>"},{"location":"api/vessels/#integration-examples","title":"Integration Examples","text":""},{"location":"api/vessels/#fleet-management-workflow","title":"Fleet Management Workflow","text":"PythonJavaScript <pre><code>import requests\nfrom datetime import datetime, date, timedelta\n\nclass VesselAPI:\n    def __init__(self, base_url: str, access_token: str):\n        self.base_url = base_url\n        self.headers = {\n            \"Authorization\": f\"Bearer {access_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def list_active_vessels(self):\n        \"\"\"Get all active vessels in the fleet\"\"\"\n        response = requests.get(\n            f\"{self.base_url}/api/v1/vessels\",\n            params={\"is_active\": True},\n            headers=self.headers\n        )\n        return response.json() if response.status_code == 200 else None\n\n    def get_vessel_crew(self, vessel_id: str):\n        \"\"\"Get current crew assignments for a vessel\"\"\"\n        response = requests.get(\n            f\"{self.base_url}/api/v1/vessels/{vessel_id}/assignments\",\n            params={\"is_active\": True},\n            headers=self.headers\n        )\n        return response.json() if response.status_code == 200 else None\n\n    def assign_crew_member(self, vessel_id: str, crew_member_id: str, assignment_data: dict):\n        \"\"\"Assign crew member to vessel\"\"\"\n        data = {\n            \"crew_member_id\": crew_member_id,\n            \"vessel_id\": vessel_id,\n            **assignment_data\n        }\n        response = requests.post(\n            f\"{self.base_url}/api/v1/vessels/{vessel_id}/assignments\",\n            json=data,\n            headers=self.headers\n        )\n        return response.json() if response.status_code == 201 else None\n\n    def check_compliance_status(self, vessel_id: str):\n        \"\"\"Check vessel compliance status\"\"\"\n        response = requests.get(\n            f\"{self.base_url}/api/v1/vessels/{vessel_id}/compliance-status\",\n            headers=self.headers\n        )\n        return response.json() if response.status_code == 200 else None\n\n    def get_vessels_with_expiring_certificates(self, days: int = 30):\n        \"\"\"Find vessels with certificates expiring soon\"\"\"\n        vessels = self.list_active_vessels()\n        if not vessels:\n            return []\n\n        expiring_vessels = []\n        for vessel in vessels['items']:\n            compliance = self.check_compliance_status(vessel['id'])\n            if compliance and compliance.get('certificates_expiring_soon', 0) &gt; 0:\n                expiring_vessels.append({\n                    'vessel': vessel,\n                    'compliance': compliance\n                })\n\n        return expiring_vessels\n\n# Usage\nvessel_api = VesselAPI(\"http://localhost:8000\", access_token)\n\n# Get fleet overview\nactive_vessels = vessel_api.list_active_vessels()\nif active_vessels:\n    print(f\"Active vessels in fleet: {active_vessels['total']}\")\n\n    for vessel in active_vessels['items']:\n        print(f\"- {vessel['name']} ({vessel['vessel_type']}) - {vessel['flag_state']}\")\n\n        # Check crew status\n        crew = vessel_api.get_vessel_crew(vessel['id'])\n        if crew:\n            print(f\"  Current crew: {len(crew['items'])}/{vessel['crew_capacity']}\")\n\n            for assignment in crew['items']:\n                print(f\"    {assignment['crew_member_name']} - {assignment['rank']}\")\n\n# Check compliance across fleet\ncompliance_issues = vessel_api.get_vessels_with_expiring_certificates(60)\nif compliance_issues:\n    print(\"\\nVessels with expiring certificates:\")\n    for item in compliance_issues:\n        vessel = item['vessel']\n        compliance = item['compliance']\n        print(f\"- {vessel['name']}: {compliance['certificates_expiring_soon']} certificates expiring\")\n\n# Assign crew member to vessel\nassignment_data = {\n    \"rank\": \"Chief Officer\",\n    \"start_date\": str(date.today() + timedelta(days=7)),\n    \"sign_on_port\": \"Singapore\",\n    \"contract_duration_months\": 4\n}\n\nassignment = vessel_api.assign_crew_member(\n    vessel_id=\"vessel-uuid-here\",\n    crew_member_id=\"crew-member-uuid-here\",\n    assignment_data=assignment_data\n)\n\nif assignment:\n    print(f\"Assigned crew member to {assignment['vessel_name']}\")\n</code></pre> <pre><code>class FleetManager {\n    constructor(baseUrl, accessToken) {\n        this.baseUrl = baseUrl;\n        this.headers = {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json'\n        };\n    }\n\n    async getFleetOverview() {\n        const response = await fetch(`${this.baseUrl}/api/v1/vessels`, {\n            headers: this.headers\n        });\n        return response.ok ? await response.json() : null;\n    }\n\n    async getVesselDetails(vesselId) {\n        const response = await fetch(\n            `${this.baseUrl}/api/v1/vessels/${vesselId}`,\n            { headers: this.headers }\n        );\n        return response.ok ? await response.json() : null;\n    }\n\n    async assignCrewToVessel(vesselId, assignments) {\n        const results = [];\n\n        for (const assignment of assignments) {\n            const response = await fetch(\n                `${this.baseUrl}/api/v1/vessels/${vesselId}/assignments`,\n                {\n                    method: 'POST',\n                    headers: this.headers,\n                    body: JSON.stringify(assignment)\n                }\n            );\n\n            if (response.ok) {\n                results.push(await response.json());\n            } else {\n                console.error(`Failed to assign ${assignment.crew_member_id}`);\n            }\n        }\n\n        return results;\n    }\n\n    async monitorFleetCompliance() {\n        const vessels = await this.getFleetOverview();\n        if (!vessels) return;\n\n        const complianceReport = [];\n\n        for (const vessel of vessels.items) {\n            const compliance = await this.getVesselCompliance(vessel.id);\n            if (compliance) {\n                complianceReport.push({\n                    vessel: vessel.name,\n                    imo: vessel.imo_number,\n                    status: compliance.overall_status,\n                    expiring_soon: compliance.certificates_expiring_soon || 0,\n                    expired: compliance.expired_certificates || 0\n                });\n            }\n        }\n\n        return complianceReport;\n    }\n\n    async getVesselCompliance(vesselId) {\n        const response = await fetch(\n            `${this.baseUrl}/api/v1/vessels/${vesselId}/compliance-status`,\n            { headers: this.headers }\n        );\n        return response.ok ? await response.json() : null;\n    }\n\n    async planCrewRotation(vesselId, rotationPlan) {\n        // End current assignments\n        const currentCrew = await this.getVesselCrew(vesselId);\n\n        for (const crewMember of currentCrew.items) {\n            if (rotationPlan.off_signers.includes(crewMember.crew_member_id)) {\n                await this.endAssignment(vesselId, crewMember.id, rotationPlan.sign_off_date);\n            }\n        }\n\n        // Create new assignments\n        const newAssignments = rotationPlan.on_signers.map(signer =&gt; ({\n            crew_member_id: signer.crew_member_id,\n            rank: signer.rank,\n            start_date: rotationPlan.sign_on_date,\n            sign_on_port: rotationPlan.port,\n            contract_duration_months: signer.contract_duration\n        }));\n\n        return await this.assignCrewToVessel(vesselId, newAssignments);\n    }\n\n    async getVesselCrew(vesselId) {\n        const response = await fetch(\n            `${this.baseUrl}/api/v1/vessels/${vesselId}/assignments?is_active=true`,\n            { headers: this.headers }\n        );\n        return response.ok ? await response.json() : null;\n    }\n\n    async endAssignment(vesselId, assignmentId, endDate) {\n        const response = await fetch(\n            `${this.baseUrl}/api/v1/vessels/${vesselId}/assignments/${assignmentId}`,\n            {\n                method: 'PUT',\n                headers: this.headers,\n                body: JSON.stringify({\n                    end_date: endDate,\n                    is_active: false\n                })\n            }\n        );\n        return response.ok;\n    }\n}\n\n// Usage\nconst fleetManager = new FleetManager('http://localhost:8000', accessToken);\n\n// Monitor fleet compliance\nasync function checkFleetCompliance() {\n    const report = await fleetManager.monitorFleetCompliance();\n\n    console.log('Fleet Compliance Report:');\n    report.forEach(vessel =&gt; {\n        console.log(`${vessel.vessel} (${vessel.imo}):`);\n        console.log(`  Status: ${vessel.status}`);\n        console.log(`  Expiring: ${vessel.expiring_soon} certificates`);\n        console.log(`  Expired: ${vessel.expired} certificates`);\n    });\n\n    // Alert for critical issues\n    const criticalVessels = report.filter(v =&gt;\n        v.expired &gt; 0 || v.status === 'non_compliant'\n    );\n\n    if (criticalVessels.length &gt; 0) {\n        console.log('\\n\u26a0\ufe0f CRITICAL COMPLIANCE ISSUES:');\n        criticalVessels.forEach(vessel =&gt; {\n            console.log(`- ${vessel.vessel}: ${vessel.expired} expired certificates`);\n        });\n    }\n}\n\n// Plan crew rotation\nasync function planRotation(vesselId) {\n    const rotationPlan = {\n        port: 'Singapore',\n        sign_off_date: '2024-02-15',\n        sign_on_date: '2024-02-16',\n        off_signers: ['crew-uuid-1', 'crew-uuid-2'],\n        on_signers: [\n            {\n                crew_member_id: 'crew-uuid-3',\n                rank: 'Master',\n                contract_duration: 4\n            },\n            {\n                crew_member_id: 'crew-uuid-4',\n                rank: 'Chief Officer',\n                contract_duration: 4\n            }\n        ]\n    };\n\n    const results = await fleetManager.planCrewRotation(vesselId, rotationPlan);\n    console.log(`Planned rotation: ${results.length} new assignments created`);\n}\n\n// Run compliance check\ncheckFleetCompliance();\n</code></pre>"},{"location":"api/vessels/#best-practices","title":"Best Practices","text":""},{"location":"api/vessels/#fleet-management","title":"Fleet Management","text":"<ol> <li>Maintain accurate vessel data - Keep technical specifications up to date</li> <li>Monitor compliance proactively - Track certificate expiration dates</li> <li>Optimize crew deployment - Balance experience levels and contract terms</li> <li>Plan maintenance windows - Coordinate dry dock and survey scheduling</li> <li>Track performance metrics - Monitor fuel consumption, speed, and efficiency</li> </ol>"},{"location":"api/vessels/#operational-efficiency_1","title":"Operational Efficiency","text":"<ol> <li>Real-time tracking - Maintain current vessel position and status</li> <li>Voyage optimization - Plan efficient routes and port calls</li> <li>Crew rotation planning - Minimize gaps in crew coverage</li> <li>Emergency response - Maintain rapid crew replacement capabilities</li> <li>Cost management - Track and analyze operational expenses</li> </ol>"},{"location":"api/vessels/#regulatory-compliance","title":"Regulatory Compliance","text":"<ol> <li>Certificate management - Ensure all documents are valid and current</li> <li>Inspection scheduling - Plan surveys and inspections in advance</li> <li>Flag state requirements - Comply with registration country regulations</li> <li>Port state control - Prepare for random inspections</li> <li>Industry standards - Meet charterer and industry requirements</li> </ol>"},{"location":"api/vessels/#common-workflows","title":"Common Workflows","text":""},{"location":"api/vessels/#new-vessel-onboarding","title":"New Vessel Onboarding","text":"<ol> <li>Create vessel record with technical specifications</li> <li>Upload initial certificates and documentation</li> <li>Set up compliance monitoring schedules</li> <li>Plan initial crew assignment</li> <li>Configure operational tracking systems</li> </ol>"},{"location":"api/vessels/#crew-change-planning","title":"Crew Change Planning","text":"<ol> <li>Review contract expiration dates</li> <li>Check crew member availability</li> <li>Plan optimal port and timing</li> <li>Arrange travel and logistics</li> <li>Execute sign-on/sign-off process</li> </ol>"},{"location":"api/vessels/#compliance-monitoring_1","title":"Compliance Monitoring","text":"<ol> <li>Track certificate expiration dates</li> <li>Schedule renewal activities</li> <li>Monitor inspection schedules</li> <li>Prepare documentation for authorities</li> <li>Maintain compliance records</li> </ol>"},{"location":"api/vessels/#performance-analysis","title":"Performance Analysis","text":"<ol> <li>Collect operational data</li> <li>Analyze fuel consumption trends</li> <li>Monitor voyage efficiency</li> <li>Compare fleet performance</li> <li>Identify optimization opportunities</li> </ol>"},{"location":"architecture/","title":"Architecture Overview","text":"<p>Welcome to the architecture documentation for the Crew Appraisals Backend system. This section provides comprehensive insights into the system design, architectural patterns, and technical decisions that shape our robust maritime crew management platform.</p>"},{"location":"architecture/#system-design-philosophy","title":"System Design Philosophy","text":"<p>Our architecture is built on several core principles:</p>"},{"location":"architecture/#api-first-approach","title":"API-First Approach","text":"<p>The system is designed as an API-first platform, enabling seamless integration with multiple frontends and third-party systems. Every feature is exposed through well-documented REST APIs, ensuring consistency and reusability across different consumers.</p>"},{"location":"architecture/#modular-microservices-architecture","title":"Modular Microservices Architecture","text":"<p>While currently deployed as a single application, the codebase is structured following microservices principles with clear service boundaries, enabling future extraction into separate services as the system scales.</p>"},{"location":"architecture/#domain-driven-design-ddd","title":"Domain-Driven Design (DDD)","text":"<p>The application is organized around business domains such as Crew Management, Vessel Operations, Appraisals, and Authentication, ensuring that the code structure reflects the business requirements.</p>"},{"location":"architecture/#event-driven-patterns","title":"Event-Driven Patterns","text":"<p>Critical business operations utilize event-driven patterns to ensure data consistency, enable audit trails, and support future integration with message queues and event streaming systems.</p>"},{"location":"architecture/#technology-stack-overview","title":"Technology Stack Overview","text":""},{"location":"architecture/#core-framework","title":"Core Framework","text":"<ul> <li>FastAPI: Modern, high-performance Python web framework with automatic OpenAPI/Swagger documentation</li> <li>Python 3.11: Latest stable Python version with enhanced performance and type hints</li> <li>Pydantic v2: Data validation and settings management using Python type annotations</li> </ul>"},{"location":"architecture/#database-layer","title":"Database Layer","text":"<ul> <li>PostgreSQL: Primary database with advanced features like UUID support, full-text search, and JSONB storage</li> <li>SQLAlchemy 2.0: Modern async ORM with type-safe queries and relationship management</li> <li>Alembic: Database migration management with version control</li> <li>Asyncpg: High-performance asynchronous PostgreSQL adapter</li> </ul>"},{"location":"architecture/#caching-session-management","title":"Caching &amp; Session Management","text":"<ul> <li>Redis: In-memory data store for caching, session management, and real-time features</li> <li>Distributed Caching: Session data and frequently accessed information cached for performance</li> </ul>"},{"location":"architecture/#security-authentication","title":"Security &amp; Authentication","text":"<ul> <li>JWT Tokens: Secure authentication with access and refresh token patterns</li> <li>Password Hashing: bcrypt-based secure password storage</li> <li>Role-Based Access Control (RBAC): Granular permission system for different user types</li> </ul>"},{"location":"architecture/#integration-communication","title":"Integration &amp; Communication","text":"<ul> <li>FASTMCP: Model Context Protocol integration for LLM interactions</li> <li>WebSocket: Real-time communication for live updates and notifications</li> <li>HTTPX: Modern HTTP client for external API integrations</li> </ul>"},{"location":"architecture/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<ul> <li>Prometheus: Metrics collection and monitoring</li> <li>OpenTelemetry: Distributed tracing and performance monitoring</li> <li>Structured Logging: Comprehensive logging with correlation IDs</li> </ul>"},{"location":"architecture/#development-testing","title":"Development &amp; Testing","text":"<ul> <li>pytest: Comprehensive testing framework with async support</li> <li>Factory Boy: Test data generation</li> <li>Testcontainers: Integration testing with containerized dependencies</li> <li>Black &amp; isort: Code formatting and import organization</li> <li>mypy: Static type checking for enhanced code quality</li> </ul>"},{"location":"architecture/#architectural-components","title":"Architectural Components","text":""},{"location":"architecture/#api-layer-apiv1","title":"API Layer (<code>/api/v1/</code>)","text":"<p>RESTful API endpoints organized by domain: - Authentication: User login, JWT management, session handling - Crew Management: Crew member profiles, certifications, assignments - Vessel Operations: Vessel information, assignments, operational data - Appraisals: Performance evaluations, feedback systems, reporting - Forms: Dynamic form management and submission handling - WebSocket: Real-time updates and notifications</p>"},{"location":"architecture/#service-layer-services","title":"Service Layer (<code>/services/</code>)","text":"<p>Business logic implementation: - Auth Service: Authentication and authorization logic - Crew Service: Crew member management operations - Vessel Service: Vessel and assignment management - Appraisal Service: Performance evaluation workflows - Form Service: Dynamic form processing and validation - Certificate Service: Certification tracking and validation</p>"},{"location":"architecture/#data-layer-models","title":"Data Layer (<code>/models/</code>)","text":"<p>SQLAlchemy models with: - Base Model: Common fields (UUID, timestamps, soft delete, audit) - Domain Models: User, Crew Member, Vessel, Appraisal, Certificate, etc. - Relationship Management: Proper foreign keys and database constraints - Soft Delete Support: Archival system for data retention</p>"},{"location":"architecture/#schema-layer-schemas","title":"Schema Layer (<code>/schemas/</code>)","text":"<p>Pydantic schemas for: - Request/Response Models: API input/output validation - Database Models: ORM to Pydantic conversion - Configuration: Settings and environment variable management</p>"},{"location":"architecture/#mcp-integration-mcp","title":"MCP Integration (<code>/mcp/</code>)","text":"<p>Model Context Protocol integration: - Tool Definitions: LLM-accessible functions - Context Management: Conversation context and memory - Data Retrieval: Intelligent data access for AI interactions</p>"},{"location":"architecture/#core-features","title":"Core Features","text":""},{"location":"architecture/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>Multi-factor authentication support</li> <li>Role-based permissions (Admin, HR, Captain, Crew)</li> <li>Session management with configurable expiry</li> <li>JWT token refresh mechanisms</li> </ul>"},{"location":"architecture/#crew-management","title":"Crew Management","text":"<ul> <li>Comprehensive crew member profiles</li> <li>Certificate tracking with expiry notifications</li> <li>Vessel assignment management</li> <li>Performance history tracking</li> </ul>"},{"location":"architecture/#vessel-operations","title":"Vessel Operations","text":"<ul> <li>Fleet management with vessel hierarchies</li> <li>Assignment tracking and scheduling</li> <li>Operational status monitoring</li> <li>Compliance tracking</li> </ul>"},{"location":"architecture/#performance-appraisals","title":"Performance Appraisals","text":"<ul> <li>Configurable appraisal forms</li> <li>Multi-stage approval workflows</li> <li>Historical performance tracking</li> <li>Automated reporting and analytics</li> </ul>"},{"location":"architecture/#document-management","title":"Document Management","text":"<ul> <li>Secure file upload and storage</li> <li>Document categorization and tagging</li> <li>Version control for critical documents</li> <li>Integration with appraisal processes</li> </ul>"},{"location":"architecture/#quick-navigation","title":"Quick Navigation","text":"<p>Explore the detailed architecture documentation:</p> <ul> <li>System Overview - High-level architecture diagrams and component interactions</li> <li>Design Patterns - Implementation patterns and code examples</li> <li>API Documentation - Comprehensive API reference</li> <li>Deployment Guide - Infrastructure and deployment strategies</li> <li>Development Setup - Local development environment setup</li> </ul>"},{"location":"architecture/#architecture-evolution","title":"Architecture Evolution","text":"<p>The system is designed to evolve from a monolithic deployment to true microservices as requirements grow:</p> <ol> <li>Phase 1 (Current): Modular monolith with clear service boundaries</li> <li>Phase 2 (Future): Extract services into separate containers with API gateways</li> <li>Phase 3 (Scale): Event-driven architecture with message queues and service mesh</li> </ol> <p>This approach ensures we can maintain development velocity while preparing for future scalability requirements.</p>"},{"location":"architecture/overview/","title":"System Overview","text":"<p>This document provides a comprehensive overview of the Crew Appraisals Backend system architecture, including high-level component diagrams, data flow patterns, and service boundaries.</p>"},{"location":"architecture/overview/#high-level-architecture","title":"High-Level Architecture","text":"<p>The system follows a layered architecture pattern with clear separation of concerns:</p> <pre><code>graph TB\n    subgraph \"Client Layer\"\n        WEB[Web Frontend]\n        MOBILE[Mobile App]\n        API_CLIENT[API Clients]\n    end\n\n    subgraph \"API Gateway Layer\"\n        NGINX[Nginx/Load Balancer]\n        CORS[CORS Middleware]\n        SECURITY[Security Headers]\n        RATE_LIMIT[Rate Limiting]\n    end\n\n    subgraph \"Application Layer\"\n        FASTAPI[FastAPI Application]\n\n        subgraph \"API Endpoints\"\n            AUTH_API[Auth API]\n            CREW_API[Crew API]\n            VESSEL_API[Vessel API]\n            APPRAISAL_API[Appraisal API]\n            FORM_API[Form API]\n            WS_API[WebSocket API]\n        end\n\n        subgraph \"Services\"\n            AUTH_SVC[Auth Service]\n            CREW_SVC[Crew Service]\n            VESSEL_SVC[Vessel Service]\n            APPRAISAL_SVC[Appraisal Service]\n            FORM_SVC[Form Service]\n            CERT_SVC[Certificate Service]\n        end\n\n        subgraph \"Core Components\"\n            MCP[MCP Integration]\n            MIDDLEWARE[Custom Middleware]\n            DEPS[Dependencies]\n        end\n    end\n\n    subgraph \"Data Layer\"\n        POSTGRES[(PostgreSQL)]\n        REDIS[(Redis Cache)]\n        FILES[File Storage]\n    end\n\n    subgraph \"External Systems\"\n        METRICS[Prometheus]\n        LOGS[Logging System]\n        MCP_CLIENT[MCP Client/LLM]\n    end\n\n    %% Client connections\n    WEB --&gt; NGINX\n    MOBILE --&gt; NGINX\n    API_CLIENT --&gt; NGINX\n\n    %% Gateway to application\n    NGINX --&gt; CORS\n    CORS --&gt; SECURITY\n    SECURITY --&gt; RATE_LIMIT\n    RATE_LIMIT --&gt; FASTAPI\n\n    %% API to services\n    FASTAPI --&gt; AUTH_API\n    FASTAPI --&gt; CREW_API\n    FASTAPI --&gt; VESSEL_API\n    FASTAPI --&gt; APPRAISAL_API\n    FASTAPI --&gt; FORM_API\n    FASTAPI --&gt; WS_API\n\n    AUTH_API --&gt; AUTH_SVC\n    CREW_API --&gt; CREW_SVC\n    VESSEL_API --&gt; VESSEL_SVC\n    APPRAISAL_API --&gt; APPRAISAL_SVC\n    FORM_API --&gt; FORM_SVC\n\n    %% Services to data\n    AUTH_SVC --&gt; POSTGRES\n    AUTH_SVC --&gt; REDIS\n    CREW_SVC --&gt; POSTGRES\n    VESSEL_SVC --&gt; POSTGRES\n    APPRAISAL_SVC --&gt; POSTGRES\n    FORM_SVC --&gt; POSTGRES\n    CERT_SVC --&gt; POSTGRES\n\n    %% File and cache access\n    APPRAISAL_SVC --&gt; FILES\n    FORM_SVC --&gt; FILES\n\n    %% MCP integration\n    MCP --&gt; MCP_CLIENT\n    MCP --&gt; POSTGRES\n\n    %% Monitoring\n    FASTAPI --&gt; METRICS\n    FASTAPI --&gt; LOGS\n\n    classDef clientLayer fill:#e1f5fe\n    classDef apiLayer fill:#f3e5f5\n    classDef serviceLayer fill:#e8f5e8\n    classDef dataLayer fill:#fff3e0\n    classDef external fill:#fce4ec\n\n    class WEB,MOBILE,API_CLIENT clientLayer\n    class NGINX,CORS,SECURITY,RATE_LIMIT,AUTH_API,CREW_API,VESSEL_API,APPRAISAL_API,FORM_API,WS_API apiLayer\n    class AUTH_SVC,CREW_SVC,VESSEL_SVC,APPRAISAL_SVC,FORM_SVC,CERT_SVC,MCP,MIDDLEWARE,DEPS serviceLayer\n    class POSTGRES,REDIS,FILES dataLayer\n    class METRICS,LOGS,MCP_CLIENT external</code></pre>"},{"location":"architecture/overview/#component-descriptions","title":"Component Descriptions","text":""},{"location":"architecture/overview/#client-layer","title":"Client Layer","text":"<ul> <li>Web Frontend: React/Next.js application for administrative users</li> <li>Mobile App: React Native application for crew members</li> <li>API Clients: Third-party integrations and automated systems</li> </ul>"},{"location":"architecture/overview/#api-gateway-layer","title":"API Gateway Layer","text":"<ul> <li>Nginx/Load Balancer: Request routing, SSL termination, static file serving</li> <li>CORS Middleware: Cross-origin request handling for web applications</li> <li>Security Headers: Security headers for XSS protection, content type validation</li> <li>Rate Limiting: Request throttling to prevent abuse and ensure fair usage</li> </ul>"},{"location":"architecture/overview/#application-layer","title":"Application Layer","text":""},{"location":"architecture/overview/#api-endpoints","title":"API Endpoints","text":"<ul> <li>Auth API: Authentication, authorization, session management</li> <li>Crew API: Crew member management, profiles, certifications</li> <li>Vessel API: Vessel information, assignments, operational data</li> <li>Appraisal API: Performance evaluations, workflow management</li> <li>Form API: Dynamic form creation, validation, submission handling</li> <li>WebSocket API: Real-time notifications, live updates</li> </ul>"},{"location":"architecture/overview/#services-business-logic","title":"Services (Business Logic)","text":"<ul> <li>Auth Service: User authentication, JWT management, role validation</li> <li>Crew Service: Crew operations, certificate tracking, assignment management</li> <li>Vessel Service: Fleet management, vessel assignments, compliance tracking</li> <li>Appraisal Service: Performance evaluation workflows, reporting</li> <li>Form Service: Dynamic form processing, validation rules, submission handling</li> <li>Certificate Service: Certification management, expiry tracking, compliance</li> </ul>"},{"location":"architecture/overview/#core-components","title":"Core Components","text":"<ul> <li>MCP Integration: Model Context Protocol for LLM interactions</li> <li>Custom Middleware: Request logging, error handling, security enforcement</li> <li>Dependencies: Dependency injection, database connections, configuration</li> </ul>"},{"location":"architecture/overview/#data-layer","title":"Data Layer","text":"<ul> <li>PostgreSQL: Primary relational database with ACID compliance</li> <li>Redis Cache: Session storage, caching layer, real-time data</li> <li>File Storage: Document storage with version control</li> </ul>"},{"location":"architecture/overview/#external-systems","title":"External Systems","text":"<ul> <li>Prometheus: Metrics collection for monitoring and alerting</li> <li>Logging System: Centralized logging with structured data</li> <li>MCP Client/LLM: AI integration for intelligent data processing</li> </ul>"},{"location":"architecture/overview/#data-flow-patterns","title":"Data Flow Patterns","text":""},{"location":"architecture/overview/#request-flow","title":"Request Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Gateway\n    participant API\n    participant Service\n    participant Database\n    participant Cache\n\n    Client-&gt;&gt;Gateway: HTTP Request\n    Gateway-&gt;&gt;Gateway: Rate Limiting Check\n    Gateway-&gt;&gt;Gateway: Security Validation\n    Gateway-&gt;&gt;API: Forward Request\n\n    API-&gt;&gt;API: Authentication Check\n    API-&gt;&gt;Cache: Check Session/Cache\n\n    alt Cache Hit\n        Cache--&gt;&gt;API: Return Cached Data\n    else Cache Miss\n        API-&gt;&gt;Service: Business Logic Call\n        Service-&gt;&gt;Database: Query Data\n        Database--&gt;&gt;Service: Return Results\n        Service--&gt;&gt;API: Processed Data\n        API-&gt;&gt;Cache: Store in Cache\n    end\n\n    API--&gt;&gt;Gateway: HTTP Response\n    Gateway--&gt;&gt;Client: Return Response</code></pre>"},{"location":"architecture/overview/#authentication-flow","title":"Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant API\n    participant AuthService\n    participant Database\n    participant Redis\n\n    Client-&gt;&gt;API: Login Request\n    API-&gt;&gt;AuthService: Validate Credentials\n    AuthService-&gt;&gt;Database: Query User\n    Database--&gt;&gt;AuthService: User Data\n\n    AuthService-&gt;&gt;AuthService: Verify Password\n    AuthService-&gt;&gt;Database: Create Session\n    AuthService-&gt;&gt;Redis: Store Session Data\n\n    AuthService-&gt;&gt;AuthService: Generate JWT Tokens\n    AuthService--&gt;&gt;API: Auth Response\n    API--&gt;&gt;Client: Access &amp; Refresh Tokens\n\n    Note over Client,Redis: Subsequent Requests\n    Client-&gt;&gt;API: Request with JWT\n    API-&gt;&gt;API: Validate JWT\n    API-&gt;&gt;Redis: Check Session\n    Redis--&gt;&gt;API: Session Valid\n    API-&gt;&gt;API: Process Request</code></pre>"},{"location":"architecture/overview/#appraisal-workflow","title":"Appraisal Workflow","text":"<pre><code>flowchart TD\n    START([Start Appraisal]) --&gt; CREATE[Create Appraisal Form]\n    CREATE --&gt; ASSIGN[Assign to Evaluator]\n    ASSIGN --&gt; NOTIFY[Send Notification]\n    NOTIFY --&gt; COMPLETE[Complete Evaluation]\n\n    COMPLETE --&gt; REVIEW{Requires Review?}\n    REVIEW --&gt;|Yes| REVIEWER[Assign Reviewer]\n    REVIEW --&gt;|No| FINALIZE[Finalize Appraisal]\n\n    REVIEWER --&gt; REVIEW_COMPLETE[Review Complete]\n    REVIEW_COMPLETE --&gt; APPROVED{Approved?}\n\n    APPROVED --&gt;|Yes| FINALIZE\n    APPROVED --&gt;|No| REVISE[Request Revisions]\n    REVISE --&gt; COMPLETE\n\n    FINALIZE --&gt; STORE[Store in Database]\n    STORE --&gt; ARCHIVE[Archive Documents]\n    ARCHIVE --&gt; END([End])\n\n    classDef process fill:#e3f2fd\n    classDef decision fill:#fff3e0\n    classDef start fill:#e8f5e8\n    classDef end fill:#ffebee\n\n    class CREATE,ASSIGN,NOTIFY,COMPLETE,REVIEWER,REVIEW_COMPLETE,REVISE,FINALIZE,STORE,ARCHIVE process\n    class REVIEW,APPROVED decision\n    class START start\n    class END end</code></pre>"},{"location":"architecture/overview/#service-boundaries","title":"Service Boundaries","text":"<p>The application maintains clear service boundaries to enable future microservice extraction:</p>"},{"location":"architecture/overview/#authentication-domain","title":"Authentication Domain","text":"<ul> <li>Responsibilities: User authentication, authorization, session management</li> <li>Data Ownership: Users, Roles, Permissions, Sessions</li> <li>External Dependencies: Redis for session storage</li> <li>API Surface: Login, logout, token refresh, user profile</li> </ul>"},{"location":"architecture/overview/#crew-management-domain","title":"Crew Management Domain","text":"<ul> <li>Responsibilities: Crew member lifecycle, certification tracking</li> <li>Data Ownership: Crew Members, Certificates, Qualifications</li> <li>External Dependencies: File storage for documents</li> <li>API Surface: Crew CRUD operations, certificate management</li> </ul>"},{"location":"architecture/overview/#vessel-operations-domain","title":"Vessel Operations Domain","text":"<ul> <li>Responsibilities: Fleet management, assignments, operational status</li> <li>Data Ownership: Vessels, Assignments, Operational Data</li> <li>External Dependencies: External vessel tracking systems (future)</li> <li>API Surface: Vessel management, assignment tracking</li> </ul>"},{"location":"architecture/overview/#appraisal-domain","title":"Appraisal Domain","text":"<ul> <li>Responsibilities: Performance evaluation workflows, reporting</li> <li>Data Ownership: Appraisals, Evaluations, Performance Data</li> <li>External Dependencies: Document storage, notification services</li> <li>API Surface: Appraisal workflows, reporting endpoints</li> </ul>"},{"location":"architecture/overview/#form-management-domain","title":"Form Management Domain","text":"<ul> <li>Responsibilities: Dynamic form creation, validation, submission</li> <li>Data Ownership: Forms, Form Versions, Submissions</li> <li>External Dependencies: File storage for attachments</li> <li>API Surface: Form builder, submission handling</li> </ul>"},{"location":"architecture/overview/#communication-patterns","title":"Communication Patterns","text":""},{"location":"architecture/overview/#synchronous-communication","title":"Synchronous Communication","text":"<ul> <li>HTTP/REST: Primary API communication pattern</li> <li>Database Queries: Direct database access through SQLAlchemy ORM</li> <li>Cache Access: Direct Redis access for session and performance data</li> </ul>"},{"location":"architecture/overview/#asynchronous-communication","title":"Asynchronous Communication","text":"<ul> <li>WebSocket: Real-time updates for notifications and live data</li> <li>Background Tasks: Future implementation for email, reports, data processing</li> <li>Event Publishing: Domain events for cross-service communication (future)</li> </ul>"},{"location":"architecture/overview/#data-access-patterns","title":"Data Access Patterns","text":"<ul> <li>Repository Pattern: Abstracted data access through service layer</li> <li>Unit of Work: Transaction management across multiple operations</li> <li>Caching Strategy: Multi-level caching with Redis and application-level cache</li> </ul>"},{"location":"architecture/overview/#scalability-considerations","title":"Scalability Considerations","text":""},{"location":"architecture/overview/#current-architecture-benefits","title":"Current Architecture Benefits","text":"<ul> <li>Modular Design: Clear separation enables future service extraction</li> <li>Async Operations: Non-blocking I/O for better performance</li> <li>Connection Pooling: Efficient database and cache connection management</li> <li>Caching Strategy: Reduced database load through intelligent caching</li> </ul>"},{"location":"architecture/overview/#future-evolution-path","title":"Future Evolution Path","text":"<ol> <li>Service Extraction: Move individual services to separate containers</li> <li>API Gateway: Implement centralized API gateway for routing and authentication</li> <li>Message Queues: Add event-driven communication between services</li> <li>Service Mesh: Implement service mesh for advanced traffic management</li> <li>Auto-scaling: Kubernetes-based auto-scaling for individual services</li> </ol>"},{"location":"architecture/overview/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture/overview/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>JWT Tokens: Stateless authentication with refresh token pattern</li> <li>Role-Based Access Control: Granular permissions based on user roles</li> <li>Session Management: Secure session handling with Redis storage</li> </ul>"},{"location":"architecture/overview/#data-protection","title":"Data Protection","text":"<ul> <li>Encryption at Rest: Database encryption for sensitive data</li> <li>Encryption in Transit: TLS/SSL for all API communication</li> <li>Input Validation: Comprehensive input validation using Pydantic schemas</li> <li>SQL Injection Prevention: Parameterized queries through SQLAlchemy ORM</li> </ul>"},{"location":"architecture/overview/#security-headers","title":"Security Headers","text":"<ul> <li>CORS Configuration: Proper cross-origin resource sharing setup</li> <li>Security Headers: XSS protection, content type validation, frame options</li> <li>Rate Limiting: Request throttling to prevent abuse</li> <li>Audit Logging: Comprehensive audit trails for security monitoring</li> </ul>"},{"location":"architecture/overview/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"architecture/overview/#metrics-collection","title":"Metrics Collection","text":"<ul> <li>Application Metrics: Request counts, response times, error rates</li> <li>Business Metrics: User activity, feature usage, performance indicators</li> <li>Infrastructure Metrics: Database connections, memory usage, CPU utilization</li> </ul>"},{"location":"architecture/overview/#distributed-tracing","title":"Distributed Tracing","text":"<ul> <li>Request Tracing: End-to-end request tracking across components</li> <li>Performance Analysis: Identify bottlenecks and optimization opportunities</li> <li>Error Tracking: Detailed error context and stack traces</li> </ul>"},{"location":"architecture/overview/#logging-strategy","title":"Logging Strategy","text":"<ul> <li>Structured Logging: JSON-formatted logs with correlation IDs</li> <li>Log Levels: Appropriate log levels for different environments</li> <li>Centralized Logging: Aggregated logs for analysis and troubleshooting</li> </ul>"},{"location":"architecture/patterns/","title":"Design Patterns","text":"<p>This document outlines the key design patterns implemented in the Crew Appraisals Backend system, providing both conceptual explanations and practical code examples from the codebase.</p>"},{"location":"architecture/patterns/#repository-pattern","title":"Repository Pattern","text":"<p>The Repository pattern provides a uniform interface for accessing data, abstracting the underlying data storage mechanisms and enabling easier testing and maintenance.</p>"},{"location":"architecture/patterns/#implementation","title":"Implementation","text":"<p>While not implemented as explicit repository classes, our services follow the repository pattern principles by encapsulating data access logic:</p> <pre><code># Example from src/services/crew_service.py\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy import select, and_\nfrom src.models import CrewMember, Certificate\nfrom src.schemas.crew import CrewMemberCreate, CrewMemberUpdate\n\nclass CrewService:\n    \"\"\"Service acting as repository for crew member operations\"\"\"\n\n    def __init__(self, db: AsyncSession):\n        self.db = db\n\n    async def get_crew_member(self, crew_id: str) -&gt; CrewMember | None:\n        \"\"\"Get crew member by ID\"\"\"\n        stmt = select(CrewMember).where(\n            and_(\n                CrewMember.id == crew_id,\n                CrewMember.archived_at.is_(None)  # Exclude soft-deleted\n            )\n        )\n        result = await self.db.execute(stmt)\n        return result.scalar_one_or_none()\n\n    async def create_crew_member(self, crew_data: CrewMemberCreate) -&gt; CrewMember:\n        \"\"\"Create new crew member\"\"\"\n        crew_member = CrewMember(**crew_data.model_dump())\n        self.db.add(crew_member)\n        await self.db.flush()  # Get ID without committing\n        await self.db.refresh(crew_member)\n        return crew_member\n\n    async def update_crew_member(\n        self,\n        crew_id: str,\n        crew_data: CrewMemberUpdate\n    ) -&gt; CrewMember | None:\n        \"\"\"Update existing crew member\"\"\"\n        crew_member = await self.get_crew_member(crew_id)\n        if not crew_member:\n            return None\n\n        for field, value in crew_data.model_dump(exclude_unset=True).items():\n            setattr(crew_member, field, value)\n\n        await self.db.flush()\n        await self.db.refresh(crew_member)\n        return crew_member\n</code></pre>"},{"location":"architecture/patterns/#benefits","title":"Benefits","text":"<ul> <li>Abstraction: Data access logic is separated from business logic</li> <li>Testability: Easy to mock for unit testing</li> <li>Consistency: Uniform interface across different data operations</li> <li>Maintainability: Changes to data access patterns are centralized</li> </ul>"},{"location":"architecture/patterns/#unit-of-work-pattern","title":"Unit of Work Pattern","text":"<p>The Unit of Work pattern maintains a list of objects affected by a business transaction and coordinates writing out changes and resolving concurrency problems.</p>"},{"location":"architecture/patterns/#implementation_1","title":"Implementation","text":"<p>Our implementation uses SQLAlchemy's session management within dependency injection:</p> <pre><code># Example from src/core/database.py\nfrom contextlib import asynccontextmanager\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\n@asynccontextmanager\nasync def get_db_context() -&gt; AsyncGenerator[AsyncSession, None]:\n    \"\"\"\n    Context manager for database session - implements Unit of Work pattern\n    \"\"\"\n    async with AsyncSessionLocal() as session:\n        try:\n            yield session\n            await session.commit()  # Commit all changes as one unit\n        except Exception as e:\n            await session.rollback()  # Rollback entire unit on error\n            logger.error(f\"Database context error: {str(e)}\")\n            raise\n        finally:\n            await session.close()\n\n# Usage example in complex business operations\nasync def create_appraisal_with_assignments(\n    appraisal_data: AppraisalCreate,\n    assignments: List[AssignmentCreate],\n    db: AsyncSession\n) -&gt; Appraisal:\n    \"\"\"\n    Complex operation requiring multiple database operations\n    All operations succeed or fail together (Unit of Work)\n    \"\"\"\n    # Create appraisal\n    appraisal = Appraisal(**appraisal_data.model_dump())\n    db.add(appraisal)\n    await db.flush()  # Get ID but don't commit yet\n\n    # Create assignments\n    for assignment_data in assignments:\n        assignment = Assignment(\n            appraisal_id=appraisal.id,\n            **assignment_data.model_dump()\n        )\n        db.add(assignment)\n\n    # Send notifications (would be implemented)\n    await send_appraisal_notifications(appraisal.id, db)\n\n    # All operations committed together when session closes\n    # If any operation fails, everything rolls back\n    return appraisal\n</code></pre>"},{"location":"architecture/patterns/#fastapi-integration","title":"FastAPI Integration","text":"<pre><code># Example from src/api/v1/crew.py\nfrom fastapi import Depends\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom src.core.database import get_db\n\n@router.post(\"/\", response_model=CrewMemberResponse)\nasync def create_crew_member(\n    crew_data: CrewMemberCreate,\n    db: AsyncSession = Depends(get_db)  # Unit of Work scope\n):\n    \"\"\"\n    The dependency injection provides a session that implements Unit of Work\n    All database operations in this endpoint are part of one transaction\n    \"\"\"\n    service = CrewService(db)\n    crew_member = await service.create_crew_member(crew_data)\n\n    # Additional operations that are part of the same transaction\n    await service.assign_initial_certificates(crew_member.id)\n    await service.create_audit_log(\"crew_created\", crew_member.id)\n\n    # Transaction commits when the dependency completes successfully\n    return crew_member\n</code></pre>"},{"location":"architecture/patterns/#benefits_1","title":"Benefits","text":"<ul> <li>ACID Compliance: Ensures data consistency across multiple operations</li> <li>Error Handling: Automatic rollback on failures</li> <li>Performance: Reduces database round trips by batching operations</li> <li>Simplicity: Transparent transaction management</li> </ul>"},{"location":"architecture/patterns/#dependency-injection-pattern","title":"Dependency Injection Pattern","text":"<p>Dependency Injection promotes loose coupling by removing hard dependencies between components and providing dependencies from external sources.</p>"},{"location":"architecture/patterns/#implementation_2","title":"Implementation","text":"<p>Our system uses FastAPI's dependency injection system extensively:</p> <pre><code># Example from src/core/deps.py\nfrom fastapi import Depends, HTTPException, status\nfrom fastapi.security import HTTPBearer\nfrom jose import jwt, JWTError\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nfrom src.core.database import get_db\nfrom src.core.config import settings\nfrom src.models import User\nfrom src.services.auth_service import AuthService\n\n# Security dependency\nsecurity = HTTPBearer()\n\nasync def get_current_user(\n    token: str = Depends(security),\n    db: AsyncSession = Depends(get_db)\n) -&gt; User:\n    \"\"\"\n    Dependency that validates JWT token and returns current user\n    Can be injected into any endpoint that requires authentication\n    \"\"\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n\n    try:\n        payload = jwt.decode(\n            token.credentials,\n            settings.SECRET_KEY,\n            algorithms=[settings.ALGORITHM]\n        )\n        user_id: str = payload.get(\"sub\")\n        if user_id is None:\n            raise credentials_exception\n    except JWTError:\n        raise credentials_exception\n\n    auth_service = AuthService(db)\n    user = await auth_service.get_user_by_id(user_id)\n    if user is None:\n        raise credentials_exception\n\n    return user\n\nasync def get_admin_user(\n    current_user: User = Depends(get_current_user)\n) -&gt; User:\n    \"\"\"\n    Dependency that ensures the current user has admin privileges\n    Builds on top of get_current_user dependency\n    \"\"\"\n    if not current_user.is_admin:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Admin privileges required\"\n        )\n    return current_user\n\n# Service dependencies\ndef get_crew_service(db: AsyncSession = Depends(get_db)) -&gt; CrewService:\n    \"\"\"Factory function for CrewService dependency\"\"\"\n    return CrewService(db)\n\ndef get_appraisal_service(db: AsyncSession = Depends(get_db)) -&gt; AppraisalService:\n    \"\"\"Factory function for AppraisalService dependency\"\"\"\n    return AppraisalService(db)\n</code></pre>"},{"location":"architecture/patterns/#usage-in-endpoints","title":"Usage in Endpoints","text":"<pre><code># Example from src/api/v1/crew.py\n@router.get(\"/{crew_id}\", response_model=CrewMemberResponse)\nasync def get_crew_member(\n    crew_id: str,\n    current_user: User = Depends(get_current_user),  # Authentication\n    crew_service: CrewService = Depends(get_crew_service)  # Business logic\n):\n    \"\"\"\n    Dependencies are injected automatically:\n    - current_user: Handles authentication and authorization\n    - crew_service: Provides business logic operations\n    \"\"\"\n    crew_member = await crew_service.get_crew_member(crew_id)\n    if not crew_member:\n        raise HTTPException(status_code=404, detail=\"Crew member not found\")\n\n    # Authorization check\n    if not crew_service.can_access_crew_member(current_user, crew_member):\n        raise HTTPException(status_code=403, detail=\"Access denied\")\n\n    return crew_member\n\n@router.put(\"/{crew_id}\", response_model=CrewMemberResponse)\nasync def update_crew_member(\n    crew_id: str,\n    crew_data: CrewMemberUpdate,\n    admin_user: User = Depends(get_admin_user),  # Admin-only endpoint\n    crew_service: CrewService = Depends(get_crew_service)\n):\n    \"\"\"\n    Uses get_admin_user which automatically includes authentication\n    and adds admin privilege validation\n    \"\"\"\n    crew_member = await crew_service.update_crew_member(crew_id, crew_data)\n    if not crew_member:\n        raise HTTPException(status_code=404, detail=\"Crew member not found\")\n\n    return crew_member\n</code></pre>"},{"location":"architecture/patterns/#benefits_2","title":"Benefits","text":"<ul> <li>Loose Coupling: Components don't need to know how to create their dependencies</li> <li>Testability: Easy to inject mock dependencies for testing</li> <li>Configurability: Dependencies can be swapped based on environment</li> <li>Reusability: Common dependencies can be shared across endpoints</li> </ul>"},{"location":"architecture/patterns/#event-driven-patterns","title":"Event-Driven Patterns","text":"<p>Event-driven patterns help maintain loose coupling between components and enable audit trails and future integrations.</p>"},{"location":"architecture/patterns/#domain-events-implementation","title":"Domain Events Implementation","text":"<pre><code># Example domain event structure\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom typing import Any, Dict\n\n@dataclass\nclass DomainEvent:\n    \"\"\"Base class for domain events\"\"\"\n    event_type: str\n    entity_id: str\n    entity_type: str\n    user_id: str | None\n    timestamp: datetime\n    data: Dict[str, Any]\n\n@dataclass\nclass AppraisalCreatedEvent(DomainEvent):\n    \"\"\"Event raised when an appraisal is created\"\"\"\n    event_type: str = \"appraisal.created\"\n    entity_type: str = \"appraisal\"\n\n@dataclass\nclass CertificateExpiringEvent(DomainEvent):\n    \"\"\"Event raised when a certificate is expiring soon\"\"\"\n    event_type: str = \"certificate.expiring\"\n    entity_type: str = \"certificate\"\n</code></pre>"},{"location":"architecture/patterns/#event-publishing-in-services","title":"Event Publishing in Services","text":"<pre><code># Example from appraisal service with event publishing\nfrom typing import List\nfrom src.models import Appraisal, AuditLog\nfrom src.schemas.appraisal import AppraisalCreate\n\nclass AppraisalService:\n    def __init__(self, db: AsyncSession):\n        self.db = db\n        self._events: List[DomainEvent] = []\n\n    async def create_appraisal(\n        self,\n        appraisal_data: AppraisalCreate,\n        created_by: str\n    ) -&gt; Appraisal:\n        \"\"\"Create appraisal and publish domain event\"\"\"\n        # Create the appraisal\n        appraisal = Appraisal(**appraisal_data.model_dump())\n        appraisal.created_by = created_by\n        self.db.add(appraisal)\n        await self.db.flush()\n\n        # Create audit log entry\n        audit_entry = AuditLog(\n            entity_type=\"appraisal\",\n            entity_id=appraisal.id,\n            action=\"created\",\n            user_id=created_by,\n            changes=appraisal_data.model_dump()\n        )\n        self.db.add(audit_entry)\n\n        # Publish domain event\n        event = AppraisalCreatedEvent(\n            entity_id=appraisal.id,\n            user_id=created_by,\n            timestamp=datetime.utcnow(),\n            data={\n                \"appraisal_type\": appraisal.appraisal_type,\n                \"crew_member_id\": appraisal.crew_member_id,\n                \"evaluator_id\": appraisal.evaluator_id\n            }\n        )\n        await self._publish_event(event)\n\n        return appraisal\n\n    async def _publish_event(self, event: DomainEvent):\n        \"\"\"Publish domain event (placeholder for future message queue)\"\"\"\n        # For now, just log the event\n        # Future: Publish to message queue (Redis Streams, RabbitMQ, etc.)\n        logger.info(f\"Domain event published: {event.event_type}\", extra={\n            \"event\": event,\n            \"entity_id\": event.entity_id\n        })\n\n        # Store events for potential batch processing\n        self._events.append(event)\n</code></pre>"},{"location":"architecture/patterns/#event-handlers","title":"Event Handlers","text":"<pre><code># Event handler example for certificate expiry notifications\nfrom datetime import datetime, timedelta\n\nclass CertificateEventHandler:\n    \"\"\"Handle certificate-related events\"\"\"\n\n    def __init__(self, db: AsyncSession):\n        self.db = db\n\n    async def handle_certificate_expiring(self, event: CertificateExpiringEvent):\n        \"\"\"Handle certificate expiring event\"\"\"\n        certificate = await self.get_certificate(event.entity_id)\n        if not certificate:\n            return\n\n        # Send notification to crew member\n        await self.send_expiry_notification(certificate)\n\n        # Create task for HR team\n        await self.create_renewal_task(certificate)\n\n        # Update certificate status\n        certificate.status = \"expiring_soon\"\n        await self.db.flush()\n\n    async def handle_appraisal_created(self, event: AppraisalCreatedEvent):\n        \"\"\"Handle new appraisal creation\"\"\"\n        # Send notification to evaluator\n        await self.notify_evaluator(event.data[\"evaluator_id\"])\n\n        # Schedule reminder emails\n        await self.schedule_appraisal_reminders(event.entity_id)\n\n        # Update crew member's appraisal status\n        await self.update_crew_appraisal_status(\n            event.data[\"crew_member_id\"],\n            \"in_progress\"\n        )\n</code></pre>"},{"location":"architecture/patterns/#benefits_3","title":"Benefits","text":"<ul> <li>Decoupling: Components communicate through events without direct dependencies</li> <li>Audit Trail: All important business events are captured</li> <li>Extensibility: New event handlers can be added without modifying existing code</li> <li>Future Integration: Events can be easily published to external message queues</li> </ul>"},{"location":"architecture/patterns/#cqrs-command-query-responsibility-segregation","title":"CQRS (Command Query Responsibility Segregation)","text":"<p>While not fully implemented, our architecture shows CQRS principles in some areas, particularly in separating read and write operations.</p>"},{"location":"architecture/patterns/#read-models-queries","title":"Read Models (Queries)","text":"<pre><code># Example read models for complex queries\nfrom pydantic import BaseModel\nfrom typing import List, Optional\n\nclass CrewMemberSummary(BaseModel):\n    \"\"\"Read model for crew member list views\"\"\"\n    id: str\n    full_name: str\n    rank: str\n    vessel_name: Optional[str]\n    certificate_status: str\n    appraisal_status: str\n\nclass AppraisalReport(BaseModel):\n    \"\"\"Read model for appraisal reporting\"\"\"\n    crew_member_name: str\n    evaluator_name: str\n    completion_date: Optional[datetime]\n    overall_rating: float\n    categories: List[Dict[str, Any]]\n\n# Service methods optimized for reads\nclass CrewQueryService:\n    \"\"\"Specialized service for crew member queries\"\"\"\n\n    def __init__(self, db: AsyncSession):\n        self.db = db\n\n    async def get_crew_summary(\n        self,\n        filters: CrewFilters\n    ) -&gt; List[CrewMemberSummary]:\n        \"\"\"Optimized query for crew member list view\"\"\"\n        query = \"\"\"\n        SELECT\n            cm.id,\n            CONCAT(cm.first_name, ' ', cm.last_name) as full_name,\n            cm.current_rank,\n            v.name as vessel_name,\n            CASE\n                WHEN COUNT(c.id) FILTER (WHERE c.expires_at &lt; NOW() + INTERVAL '30 days') &gt; 0\n                THEN 'expiring'\n                WHEN COUNT(c.id) FILTER (WHERE c.expires_at &lt; NOW()) &gt; 0\n                THEN 'expired'\n                ELSE 'valid'\n            END as certificate_status,\n            COALESCE(a.status, 'none') as appraisal_status\n        FROM crew_members cm\n        LEFT JOIN vessel_assignments va ON cm.id = va.crew_member_id AND va.active = true\n        LEFT JOIN vessels v ON va.vessel_id = v.id\n        LEFT JOIN certificates c ON cm.id = c.crew_member_id\n        LEFT JOIN appraisals a ON cm.id = a.crew_member_id AND a.status = 'in_progress'\n        WHERE cm.archived_at IS NULL\n        GROUP BY cm.id, v.name, a.status\n        ORDER BY cm.last_name, cm.first_name\n        \"\"\"\n\n        result = await self.db.execute(text(query))\n        return [CrewMemberSummary(**row._asdict()) for row in result]\n</code></pre>"},{"location":"architecture/patterns/#command-models-writes","title":"Command Models (Writes)","text":"<pre><code># Command models for write operations\nclass CreateAppraisalCommand(BaseModel):\n    \"\"\"Command for creating an appraisal\"\"\"\n    crew_member_id: str\n    evaluator_id: str\n    appraisal_type: str\n    due_date: datetime\n    categories: List[str]\n\nclass UpdateCertificateCommand(BaseModel):\n    \"\"\"Command for updating certificate information\"\"\"\n    certificate_id: str\n    issue_date: datetime\n    expires_at: datetime\n    issuing_authority: str\n    document_url: Optional[str]\n\n# Separate command handlers\nclass AppraisalCommandHandler:\n    \"\"\"Handler for appraisal-related commands\"\"\"\n\n    def __init__(self, db: AsyncSession):\n        self.db = db\n\n    async def handle_create_appraisal(\n        self,\n        command: CreateAppraisalCommand\n    ) -&gt; str:\n        \"\"\"Handle appraisal creation command\"\"\"\n        # Validate command\n        await self._validate_create_appraisal(command)\n\n        # Create appraisal\n        appraisal = Appraisal(\n            crew_member_id=command.crew_member_id,\n            evaluator_id=command.evaluator_id,\n            appraisal_type=command.appraisal_type,\n            due_date=command.due_date,\n            status=\"pending\"\n        )\n        self.db.add(appraisal)\n        await self.db.flush()\n\n        # Create appraisal categories\n        for category_name in command.categories:\n            category = AppraisalCategory(\n                appraisal_id=appraisal.id,\n                category_name=category_name,\n                status=\"pending\"\n            )\n            self.db.add(category)\n\n        # Publish event\n        await self._publish_appraisal_created_event(appraisal.id)\n\n        return appraisal.id\n</code></pre>"},{"location":"architecture/patterns/#benefits_4","title":"Benefits","text":"<ul> <li>Performance: Optimized read and write operations</li> <li>Scalability: Read and write operations can be scaled independently</li> <li>Complexity Management: Separates simple queries from complex business logic</li> <li>Future Evolution: Enables eventual consistency patterns if needed</li> </ul>"},{"location":"architecture/patterns/#factory-pattern","title":"Factory Pattern","text":"<p>The Factory pattern is used to create objects without specifying their exact classes, particularly useful for creating services and configurations.</p>"},{"location":"architecture/patterns/#service-factory-implementation","title":"Service Factory Implementation","text":"<pre><code># Example service factory\nfrom typing import Protocol\nfrom src.core.config import settings\n\nclass ServiceFactory:\n    \"\"\"Factory for creating service instances\"\"\"\n\n    def __init__(self, db: AsyncSession):\n        self.db = db\n\n    def create_crew_service(self) -&gt; CrewService:\n        \"\"\"Create crew service with proper configuration\"\"\"\n        return CrewService(self.db)\n\n    def create_appraisal_service(self) -&gt; AppraisalService:\n        \"\"\"Create appraisal service with proper configuration\"\"\"\n        return AppraisalService(self.db)\n\n    def create_notification_service(self) -&gt; NotificationService:\n        \"\"\"Create notification service based on configuration\"\"\"\n        if settings.ENABLE_EMAIL_NOTIFICATIONS:\n            return EmailNotificationService(\n                smtp_server=settings.SMTP_SERVER,\n                smtp_port=settings.SMTP_PORT\n            )\n        else:\n            return LoggingNotificationService()\n\n# Configuration-based factory\nclass ConfigBasedFactory:\n    \"\"\"Factory that creates services based on configuration\"\"\"\n\n    @staticmethod\n    def create_cache_service() -&gt; CacheService:\n        \"\"\"Create cache service based on environment\"\"\"\n        if settings.is_production:\n            return RedisCacheService(settings.REDIS_URL)\n        elif settings.is_testing:\n            return InMemoryCacheService()\n        else:\n            return DevelopmentCacheService()\n</code></pre>"},{"location":"architecture/patterns/#benefits_5","title":"Benefits","text":"<ul> <li>Flexibility: Object creation can be customized based on configuration</li> <li>Testing: Easy to create mock objects for testing</li> <li>Encapsulation: Object creation logic is centralized</li> <li>Configuration Management: Different implementations for different environments</li> </ul>"},{"location":"architecture/patterns/#conclusion","title":"Conclusion","text":"<p>These design patterns provide a solid foundation for the Crew Appraisals Backend system:</p> <ul> <li>Repository Pattern: Provides clean data access abstraction</li> <li>Unit of Work: Ensures data consistency across operations</li> <li>Dependency Injection: Enables loose coupling and testability</li> <li>Event-Driven Patterns: Supports audit trails and future integrations</li> <li>CQRS Principles: Optimizes read and write operations</li> <li>Factory Pattern: Manages object creation and configuration</li> </ul> <p>The combination of these patterns creates a maintainable, testable, and scalable architecture that can evolve with changing business requirements while maintaining code quality and performance.</p>"},{"location":"deployment/","title":"Deployment Overview","text":"<p>The Crew Appraisals System is designed for flexible deployment across various environments, from local development to production-scale Kubernetes clusters. This guide covers the available deployment options and best practices.</p>"},{"location":"deployment/#deployment-options","title":"Deployment Options","text":"<pre><code>graph TB\n    A[Deployment Options] --&gt; B[Local Development]\n    A --&gt; C[Docker Compose]\n    A --&gt; D[Kubernetes]\n    A --&gt; E[Cloud Platforms]\n\n    B --&gt; B1[Poetry + Local Services]\n    B --&gt; B2[Docker Compose Dev]\n\n    C --&gt; C1[Single Machine]\n    C --&gt; C2[Development/Staging]\n    C --&gt; C3[Production Ready]\n\n    D --&gt; D1[Minikube/Kind]\n    D --&gt; D2[EKS/GKE/AKS]\n    D --&gt; D3[On-Premise K8s]\n\n    E --&gt; E1[AWS/Azure/GCP]\n    E --&gt; E2[Railway/Render]\n    E --&gt; E3[DigitalOcean Apps]</code></pre>"},{"location":"deployment/#quick-start-deployment-matrix","title":"Quick Start Deployment Matrix","text":"Environment Method Complexity Best For Local Development Docker Compose + Dev Profile \u2b50 Daily development, debugging Testing/CI Docker Compose + Testing Profile \u2b50\u2b50 Automated testing, CI/CD Staging Docker Compose + Production Profile \u2b50\u2b50\u2b50 Pre-production validation Production (Small) Docker Compose + Monitoring \u2b50\u2b50\u2b50\u2b50 Small-scale production Production (Scale) Kubernetes + Helm \u2b50\u2b50\u2b50\u2b50\u2b50 High availability, scaling"},{"location":"deployment/#architecture-overview","title":"Architecture Overview","text":""},{"location":"deployment/#system-components","title":"System Components","text":"<pre><code>graph LR\n    subgraph \"Frontend\"\n        A[React App]\n    end\n\n    subgraph \"API Gateway\"\n        B[Nginx/Traefik]\n    end\n\n    subgraph \"Backend Services\"\n        C[FastAPI Backend]\n        D[Background Tasks]\n    end\n\n    subgraph \"Data Layer\"\n        E[PostgreSQL]\n        F[Redis Cache]\n    end\n\n    subgraph \"Monitoring\"\n        G[Prometheus]\n        H[Grafana]\n        I[Fluentd]\n    end\n\n    A --&gt; B\n    B --&gt; C\n    C --&gt; D\n    C --&gt; E\n    C --&gt; F\n    C --&gt; G\n    G --&gt; H\n    C --&gt; I</code></pre>"},{"location":"deployment/#service-dependencies","title":"Service Dependencies","text":"<ul> <li>PostgreSQL: Primary database for persistent data</li> <li>Redis: Session storage and caching</li> <li>Nginx: Reverse proxy and load balancing (production)</li> <li>Prometheus: Metrics collection</li> <li>Grafana: Metrics visualization</li> <li>Fluentd: Log aggregation (optional)</li> </ul>"},{"location":"deployment/#environment-configuration","title":"Environment Configuration","text":""},{"location":"deployment/#environment-variables","title":"Environment Variables","text":"<p>The application uses environment-based configuration for different deployment scenarios:</p> <pre><code># Core Application\nDATABASE_URL=postgresql+asyncpg://user:pass@host:5432/db\nREDIS_URL=redis://user:pass@host:6379/0\nSECRET_KEY=your-secret-key-here\nENVIRONMENT=development|staging|production\n\n# API Configuration\nAPI_PORT=8000\nCORS_ORIGINS=[\"http://localhost:3000\"]\nRATE_LIMIT_ENABLED=true\nRATE_LIMIT_PER_MINUTE=60\n\n# Feature Flags\nENABLE_DOCS=true\nENABLE_METRICS=true\nMCP_ENABLED=true\n\n# Logging\nLOG_LEVEL=INFO\nLOGGING_ENABLED=true\n</code></pre>"},{"location":"deployment/#configuration-files","title":"Configuration Files","text":""},{"location":"deployment/#envexample","title":".env.example","text":"<pre><code># Database Configuration\nDB_USER=crewing_user\nDB_PASSWORD=crewing_pass\nDB_NAME=crew_appraisals\nDB_PORT=5432\n\n# Redis Configuration\nREDIS_PASSWORD=redis_pass\nREDIS_PORT=6379\n\n# Application Settings\nSECRET_KEY=change-this-secret-key-in-production\nENVIRONMENT=development\nAPI_PORT=8000\n\n# External Services\nCORS_ORIGINS=[\"http://localhost:3000\",\"http://localhost:5173\"]\n\n# Optional Services\nNGINX_PORT=80\nPGADMIN_PORT=5050\nPROMETHEUS_PORT=9090\nGRAFANA_PORT=3001\n</code></pre>"},{"location":"deployment/#deployment-profiles","title":"Deployment Profiles","text":""},{"location":"deployment/#development-profile","title":"Development Profile","text":"<p>Purpose: Local development with hot reloading and debugging tools</p> <p>Features: - Hot reloading enabled - Debug tools included (pgAdmin) - Extensive logging - Test database seeding</p> <p>Services: - Backend (development mode) - PostgreSQL - Redis - pgAdmin</p> <pre><code>docker compose --profile development up -d\n</code></pre>"},{"location":"deployment/#testing-profile","title":"Testing Profile","text":"<p>Purpose: Automated testing in CI/CD pipelines</p> <p>Features: - Minimal service set - Test database isolation - Fast startup/teardown - Coverage reporting</p> <p>Services: - Backend (testing mode) - PostgreSQL (test instance) - Redis (test instance)</p> <pre><code>docker compose --profile testing up -d\n</code></pre>"},{"location":"deployment/#production-profile","title":"Production Profile","text":"<p>Purpose: Production deployments with performance optimization</p> <p>Features: - Optimized containers - Health checks - Reverse proxy - SSL termination - Resource limits</p> <p>Services: - Backend (production mode) - PostgreSQL - Redis - Nginx - Monitoring stack</p> <pre><code>docker compose --profile production up -d\n</code></pre>"},{"location":"deployment/#monitoring-profile","title":"Monitoring Profile","text":"<p>Purpose: Observability and monitoring stack</p> <p>Features: - Metrics collection - Log aggregation - Dashboard visualization - Alerting (configured separately)</p> <p>Additional Services: - Prometheus - Grafana - Fluentd</p> <pre><code>docker compose --profile monitoring up -d\n</code></pre>"},{"location":"deployment/#deployment-environments","title":"Deployment Environments","text":""},{"location":"deployment/#local-development","title":"Local Development","text":"<p>Recommended for: Daily development work</p> <p>Setup: <pre><code># Clone repository\ngit clone &lt;repository-url&gt;\ncd crewing-r3/backend\n\n# Copy environment file\ncp docker/.env.example docker/.env\n\n# Start development environment\ndocker compose -f docker/docker-compose.yaml --profile development up -d\n\n# View logs\ndocker compose -f docker/docker-compose.yaml logs -f backend\n</code></pre></p> <p>Access URLs: - API: http://localhost:8000 - API Docs: http://localhost:8000/docs - pgAdmin: http://localhost:5050</p>"},{"location":"deployment/#staging-environment","title":"Staging Environment","text":"<p>Recommended for: Pre-production testing</p> <p>Setup: <pre><code># Use production-like configuration\ncp docker/.env.production docker/.env\n\n# Update environment-specific values\nvim docker/.env\n\n# Deploy with production profile\ndocker compose -f docker/docker-compose.yaml --profile production up -d\n</code></pre></p>"},{"location":"deployment/#production-environment","title":"Production Environment","text":"<p>Recommended for: Live production systems</p> <p>Requirements: - Docker and Docker Compose - SSL certificates - Domain name - Monitoring setup - Backup strategy</p> <p>Setup: <pre><code># Production deployment\ndocker compose -f docker/docker-compose.prod.yaml up -d\n\n# Enable monitoring\ndocker compose -f docker/docker-compose.yaml --profile monitoring up -d\n</code></pre></p>"},{"location":"deployment/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"deployment/#github-actions-example","title":"GitHub Actions Example","text":"<pre><code># .github/workflows/deploy.yml\nname: Deploy to Staging\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Docker\n        uses: docker/setup-docker@v2\n\n      - name: Deploy to staging\n        run: |\n          docker compose -f docker/docker-compose.yaml --profile production up -d\n\n      - name: Run health checks\n        run: |\n          ./scripts/health-check.sh\n</code></pre>"},{"location":"deployment/#health-checks","title":"Health Checks","text":"<pre><code>#!/bin/bash\n# scripts/health-check.sh\n\necho \"Checking application health...\"\n\n# Wait for services to be ready\nsleep 30\n\n# Check API health\ncurl -f http://localhost:8000/api/v1/health || exit 1\n\n# Check database connectivity\ncurl -f http://localhost:8000/api/v1/health/db || exit 1\n\n# Check Redis connectivity\ncurl -f http://localhost:8000/api/v1/health/redis || exit 1\n\necho \"All health checks passed!\"\n</code></pre>"},{"location":"deployment/#ssltls-configuration","title":"SSL/TLS Configuration","text":""},{"location":"deployment/#lets-encrypt-with-nginx","title":"Let's Encrypt with Nginx","text":"<pre><code># docker/nginx/conf.d/default.conf\nserver {\n    listen 80;\n    server_name your-domain.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name your-domain.com;\n\n    ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;\n\n    location / {\n        proxy_pass http://backend:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"deployment/#ssl-certificate-management","title":"SSL Certificate Management","text":"<pre><code># Generate Let's Encrypt certificates\ndocker run -it --rm \\\n    -v /path/to/ssl:/etc/letsencrypt \\\n    certbot/certbot certonly \\\n    --webroot \\\n    --webroot-path=/var/www/certbot \\\n    -d your-domain.com\n\n# Auto-renewal setup\necho \"0 12 * * * /usr/bin/certbot renew --quiet\" | crontab -\n</code></pre>"},{"location":"deployment/#performance-optimization","title":"Performance Optimization","text":""},{"location":"deployment/#resource-allocation","title":"Resource Allocation","text":"<pre><code># docker-compose.prod.yaml (excerpt)\nservices:\n  backend:\n    deploy:\n      resources:\n        limits:\n          cpus: '2'\n          memory: 2G\n        reservations:\n          cpus: '1'\n          memory: 1G\n    environment:\n      - WORKERS=4  # CPU cores * 2\n\n  postgres:\n    deploy:\n      resources:\n        limits:\n          memory: 1G\n        reservations:\n          memory: 512M\n\n  redis:\n    deploy:\n      resources:\n        limits:\n          memory: 256M\n        reservations:\n          memory: 128M\n</code></pre>"},{"location":"deployment/#production-optimizations","title":"Production Optimizations","text":"<ol> <li>Multi-stage Docker builds: Minimize image size</li> <li>Process management: Use multiple workers</li> <li>Connection pooling: Optimize database connections</li> <li>Caching: Redis for frequently accessed data</li> <li>CDN: Static asset delivery</li> <li>Monitoring: Performance metrics and alerting</li> </ol>"},{"location":"deployment/#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"deployment/#database-backups","title":"Database Backups","text":"<pre><code>#!/bin/bash\n# scripts/backup-db.sh\n\nBACKUP_DIR=\"/backups/postgresql\"\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\n\n# Create backup\ndocker compose exec -T postgres pg_dump \\\n    -U crewing_user \\\n    -d crew_appraisals \\\n    --no-owner \\\n    --no-privileges &gt; \"$BACKUP_DIR/backup_$TIMESTAMP.sql\"\n\n# Compress backup\ngzip \"$BACKUP_DIR/backup_$TIMESTAMP.sql\"\n\n# Cleanup old backups (keep 7 days)\nfind \"$BACKUP_DIR\" -name \"*.sql.gz\" -mtime +7 -delete\n\necho \"Backup completed: backup_$TIMESTAMP.sql.gz\"\n</code></pre>"},{"location":"deployment/#restore-process","title":"Restore Process","text":"<pre><code>#!/bin/bash\n# scripts/restore-db.sh\n\nBACKUP_FILE=$1\n\nif [ -z \"$BACKUP_FILE\" ]; then\n    echo \"Usage: $0 &lt;backup_file&gt;\"\n    exit 1\nfi\n\n# Stop application\ndocker compose stop backend\n\n# Restore database\nzcat \"$BACKUP_FILE\" | docker compose exec -T postgres psql \\\n    -U crewing_user \\\n    -d crew_appraisals\n\n# Restart application\ndocker compose start backend\n\necho \"Restore completed from: $BACKUP_FILE\"\n</code></pre>"},{"location":"deployment/#security-considerations","title":"Security Considerations","text":""},{"location":"deployment/#production-security-checklist","title":"Production Security Checklist","text":"<ul> <li> Strong passwords: Use generated passwords for all services</li> <li> SSL/TLS: Enable HTTPS with valid certificates</li> <li> Firewall: Restrict network access to necessary ports</li> <li> Updates: Keep base images and dependencies updated</li> <li> Secrets: Use external secret management</li> <li> Monitoring: Enable security monitoring and alerting</li> <li> Backups: Implement automated backup strategy</li> <li> Access: Implement proper authentication and authorization</li> </ul>"},{"location":"deployment/#environment-variables-security","title":"Environment Variables Security","text":"<pre><code># Use external secret management\n# Example with Docker Secrets\necho \"super-secret-key\" | docker secret create api_secret_key -\n\n# Reference in compose file\nservices:\n  backend:\n    secrets:\n      - api_secret_key\n    environment:\n      SECRET_KEY_FILE: /run/secrets/api_secret_key\n</code></pre>"},{"location":"deployment/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"deployment/#metrics-collection","title":"Metrics Collection","text":"<p>The deployment includes Prometheus for metrics collection:</p> <ul> <li>Application metrics: Request count, response time, error rate</li> <li>System metrics: CPU, memory, disk usage</li> <li>Database metrics: Connection count, query performance</li> <li>Business metrics: User activity, appraisal completion rates</li> </ul>"},{"location":"deployment/#log-management","title":"Log Management","text":"<p>Structured logging with Fluentd:</p> <pre><code>{\n  \"timestamp\": \"2024-01-01T12:00:00Z\",\n  \"level\": \"INFO\",\n  \"service\": \"crew-appraisals-backend\",\n  \"message\": \"Appraisal created\",\n  \"user_id\": 123,\n  \"appraisal_id\": 456,\n  \"request_id\": \"req-789\"\n}\n</code></pre>"},{"location":"deployment/#alerting","title":"Alerting","text":"<p>Configure alerts for: - High error rates - Response time degradation - Database connection issues - Resource exhaustion - Security events</p>"},{"location":"deployment/#next-steps","title":"Next Steps","text":"<ol> <li>Choose your deployment method:</li> <li>Docker Setup Guide for container-based deployment</li> <li> <p>Kubernetes with Helm for orchestrated deployment</p> </li> <li> <p>Configure monitoring: Set up Prometheus and Grafana dashboards</p> </li> <li> <p>Implement backups: Automate database and configuration backups</p> </li> <li> <p>Set up CI/CD: Automate deployments with your preferred CI/CD platform</p> </li> <li> <p>Security hardening: Follow the security checklist for production</p> </li> <li> <p>Performance testing: Validate performance under expected load</p> </li> </ol> <p>For troubleshooting common deployment issues, see our Troubleshooting Guide.</p>"},{"location":"deployment/troubleshooting/","title":"Deployment Troubleshooting Guide","text":"<p>This comprehensive troubleshooting guide covers common issues encountered when deploying and operating the Crew Appraisals System across different environments and deployment methods.</p>"},{"location":"deployment/troubleshooting/#quick-diagnostic-commands","title":"Quick Diagnostic Commands","text":""},{"location":"deployment/troubleshooting/#health-check-commands","title":"Health Check Commands","text":"<pre><code># Quick system health check\ncurl -f http://localhost:8000/api/v1/health || echo \"API unhealthy\"\ncurl -f http://localhost:8000/api/v1/health/db || echo \"Database unhealthy\"\ncurl -f http://localhost:8000/api/v1/health/redis || echo \"Redis unhealthy\"\n\n# Docker health checks\ndocker compose ps\ndocker compose logs --tail=50 backend postgres redis\n\n# Kubernetes health checks\nkubectl get pods -l app=crew-appraisals\nkubectl describe pod &lt;pod-name&gt;\nkubectl logs &lt;pod-name&gt; --tail=50\n</code></pre>"},{"location":"deployment/troubleshooting/#database-connection-issues","title":"Database Connection Issues","text":""},{"location":"deployment/troubleshooting/#symptoms","title":"Symptoms","text":"<ul> <li><code>Connection refused</code> errors</li> <li><code>SQLSTATE[08006]</code> connection failure</li> <li>Slow database operations</li> <li>Connection timeout errors</li> </ul>"},{"location":"deployment/troubleshooting/#docker-compose-troubleshooting","title":"Docker Compose Troubleshooting","text":""},{"location":"deployment/troubleshooting/#issue-postgresql-not-starting","title":"Issue: PostgreSQL not starting","text":"<pre><code># Check PostgreSQL logs\ndocker compose logs postgres\n\n# Common error: \"database system was shut down\"\n# Solution: Remove postgres data volume and restart\ndocker compose down\ndocker volume rm $(docker compose config --volumes | grep postgres)\ndocker compose up -d postgres\n\n# Wait for PostgreSQL to initialize\ndocker compose logs -f postgres\n</code></pre>"},{"location":"deployment/troubleshooting/#issue-connection-refused-to-postgresql","title":"Issue: Connection refused to PostgreSQL","text":"<pre><code># Verify PostgreSQL is running and healthy\ndocker compose ps postgres\ndocker compose exec postgres pg_isready -U crewing_user -d crew_appraisals\n\n# Check network connectivity between services\ndocker compose exec backend ping postgres\n\n# Verify environment variables\ndocker compose exec backend env | grep -E \"(DB_|DATABASE_)\"\n</code></pre>"},{"location":"deployment/troubleshooting/#issue-authentication-failed","title":"Issue: Authentication failed","text":"<pre><code># Check PostgreSQL user and database\ndocker compose exec postgres psql -U postgres -c \"\\\\du\"\ndocker compose exec postgres psql -U postgres -c \"\\\\l\"\n\n# Reset password if needed\ndocker compose exec postgres psql -U postgres -c \"ALTER USER crewing_user PASSWORD 'new_password';\"\n\n# Update .env file with correct credentials\nvim docker/.env\n</code></pre>"},{"location":"deployment/troubleshooting/#database-performance-issues","title":"Database Performance Issues","text":""},{"location":"deployment/troubleshooting/#issue-slow-queries","title":"Issue: Slow queries","text":"<pre><code># Enable query logging (development only)\ndocker compose exec postgres psql -U postgres -d crew_appraisals -c \"\nALTER SYSTEM SET log_statement = 'all';\nALTER SYSTEM SET log_min_duration_statement = 100;\nSELECT pg_reload_conf();\n\"\n\n# Monitor slow queries\ndocker compose logs -f postgres | grep \"duration:\"\n\n# Check active connections\ndocker compose exec postgres psql -U postgres -c \"\nSELECT pid, usename, application_name, client_addr, state, query\nFROM pg_stat_activity\nWHERE state = 'active';\"\n</code></pre>"},{"location":"deployment/troubleshooting/#issue-connection-pool-exhaustion","title":"Issue: Connection pool exhaustion","text":"<pre><code># Check connection pool settings in backend code\n# src/core/database.py\nengine = create_async_engine(\n    DATABASE_URL,\n    pool_size=20,        # Increase if needed\n    max_overflow=10,     # Allow burst connections\n    pool_pre_ping=True,  # Validate connections\n    pool_recycle=3600,   # Recycle connections hourly\n)\n</code></pre>"},{"location":"deployment/troubleshooting/#kubernetes-database-issues","title":"Kubernetes Database Issues","text":""},{"location":"deployment/troubleshooting/#issue-postgresql-pod-in-pending-state","title":"Issue: PostgreSQL pod in pending state","text":"<pre><code># Check resource availability\nkubectl describe node\nkubectl get pv,pvc\n\n# Check storage class\nkubectl get storageclass\n\n# Create PV manually if needed\nkubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: postgres-pv\nspec:\n  capacity:\n    storage: 20Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: /data/postgres\nEOF\n</code></pre>"},{"location":"deployment/troubleshooting/#issue-database-initialization-fails-in-kubernetes","title":"Issue: Database initialization fails in Kubernetes","text":"<pre><code># Check init container logs\nkubectl logs &lt;postgres-pod&gt; -c init-db\n\n# Check permissions\nkubectl exec &lt;postgres-pod&gt; -- ls -la /var/lib/postgresql/data\n\n# Fix ownership if needed\nkubectl exec &lt;postgres-pod&gt; -- chown -R postgres:postgres /var/lib/postgresql/data\n</code></pre>"},{"location":"deployment/troubleshooting/#port-conflicts","title":"Port Conflicts","text":""},{"location":"deployment/troubleshooting/#symptoms_1","title":"Symptoms","text":"<ul> <li><code>Port already in use</code> errors</li> <li>Services failing to start</li> <li>Connection refused on expected ports</li> </ul>"},{"location":"deployment/troubleshooting/#docker-port-conflicts","title":"Docker Port Conflicts","text":""},{"location":"deployment/troubleshooting/#issue-port-8000-already-in-use","title":"Issue: Port 8000 already in use","text":"<pre><code># Find process using port 8000\nsudo netstat -tulpn | grep :8000\n# or\nsudo lsof -i :8000\n\n# Kill conflicting process\nsudo kill -9 &lt;PID&gt;\n\n# Use alternative port\nexport API_PORT=8001\ndocker compose up -d\n</code></pre>"},{"location":"deployment/troubleshooting/#issue-postgresql-port-5432-in-use","title":"Issue: PostgreSQL port 5432 in use","text":"<pre><code># Check if local PostgreSQL is running\nsudo service postgresql status\n\n# Stop local PostgreSQL\nsudo service postgresql stop\n\n# Or use different port\nexport DB_PORT=5433\ndocker compose up -d\n</code></pre>"},{"location":"deployment/troubleshooting/#port-mapping-solutions","title":"Port Mapping Solutions","text":"<pre><code># docker-compose.override.yaml\nservices:\n  backend:\n    ports:\n      - \"8001:8000\"  # Map to different host port\n\n  postgres:\n    ports:\n      - \"5433:5432\"  # Use different PostgreSQL port\n\n  redis:\n    ports:\n      - \"6380:6379\"  # Use different Redis port\n</code></pre>"},{"location":"deployment/troubleshooting/#kubernetes-port-issues","title":"Kubernetes Port Issues","text":""},{"location":"deployment/troubleshooting/#issue-service-not-accessible","title":"Issue: Service not accessible","text":"<pre><code># Check service endpoints\nkubectl get svc,ep\n\n# Check if pods are ready\nkubectl get pods -o wide\n\n# Test service connectivity internally\nkubectl run test-pod --rm -i --tty --image=busybox -- sh\n/ # nslookup crew-appraisals-service\n/ # wget -qO- crew-appraisals-service/api/v1/health\n</code></pre>"},{"location":"deployment/troubleshooting/#issue-ingress-not-routing-traffic","title":"Issue: Ingress not routing traffic","text":"<pre><code># Check ingress controller\nkubectl get pods -n ingress-nginx\n\n# Check ingress configuration\nkubectl describe ingress crew-appraisals\n\n# Verify DNS resolution\nnslookup your-domain.com\n\n# Check SSL certificate\nkubectl describe certificate crew-appraisals-tls\n</code></pre>"},{"location":"deployment/troubleshooting/#docker-issues","title":"Docker Issues","text":""},{"location":"deployment/troubleshooting/#container-startup-problems","title":"Container Startup Problems","text":""},{"location":"deployment/troubleshooting/#issue-container-exits-immediately","title":"Issue: Container exits immediately","text":"<pre><code># Check exit code and logs\ndocker compose ps\ndocker compose logs backend\n\n# Run container interactively for debugging\ndocker compose run --rm backend bash\n\n# Check if entrypoint script is executable\ndocker compose exec backend ls -la /entrypoint.sh\ndocker compose exec backend chmod +x /entrypoint.sh\n</code></pre>"},{"location":"deployment/troubleshooting/#issue-python-import-errors","title":"Issue: Python import errors","text":"<pre><code># Check Python path and installed packages\ndocker compose exec backend python -c \"import sys; print(sys.path)\"\ndocker compose exec backend pip list\n\n# Reinstall dependencies if needed\ndocker compose exec backend poetry install\n\n# Check for missing system dependencies\ndocker compose exec backend apt list --installed | grep -E \"(gcc|python|postgresql)\"\n</code></pre>"},{"location":"deployment/troubleshooting/#build-issues","title":"Build Issues","text":""},{"location":"deployment/troubleshooting/#issue-docker-build-fails","title":"Issue: Docker build fails","text":"<pre><code># Build with verbose output\ndocker compose build --progress=plain --no-cache backend\n\n# Check disk space\ndf -h\n\n# Clean up Docker space\ndocker system prune -a\ndocker volume prune\n</code></pre>"},{"location":"deployment/troubleshooting/#issue-poetry-installation-fails","title":"Issue: Poetry installation fails","text":"<pre><code># Add debug information to Dockerfile\nRUN curl -sSL https://install.python-poetry.org | python3 - \\\n    &amp;&amp; ln -s /opt/poetry/bin/poetry /usr/local/bin/poetry \\\n    &amp;&amp; poetry --version  # Verify installation\n</code></pre>"},{"location":"deployment/troubleshooting/#memory-and-resource-issues","title":"Memory and Resource Issues","text":""},{"location":"deployment/troubleshooting/#issue-out-of-memory-errors","title":"Issue: Out of memory errors","text":"<pre><code># Check container memory usage\ndocker stats\n\n# Increase Docker memory limit (Docker Desktop)\n# Settings &gt; Resources &gt; Memory &gt; Increase to 8GB\n\n# Add memory limits to compose file\nservices:\n  backend:\n    deploy:\n      resources:\n        limits:\n          memory: 2g\n        reservations:\n          memory: 1g\n</code></pre>"},{"location":"deployment/troubleshooting/#issue-disk-space-issues","title":"Issue: Disk space issues","text":"<pre><code># Check disk usage\ndocker system df\n\n# Clean up unused resources\ndocker system prune -a --volumes\ndocker volume prune\n\n# Remove unused images\ndocker image prune -a\n</code></pre>"},{"location":"deployment/troubleshooting/#performance-problems","title":"Performance Problems","text":""},{"location":"deployment/troubleshooting/#high-response-times","title":"High Response Times","text":""},{"location":"deployment/troubleshooting/#issue-slow-api-responses","title":"Issue: Slow API responses","text":"<pre><code># Check system resources\ndocker stats\nhtop  # or top\n\n# Enable application performance monitoring\nexport LOG_LEVEL=DEBUG\ndocker compose restart backend\n\n# Check database performance\ndocker compose exec postgres psql -U crewing_user -d crew_appraisals -c \"\nSELECT query, calls, mean_exec_time, total_exec_time\nFROM pg_stat_statements\nORDER BY total_exec_time DESC\nLIMIT 10;\"\n</code></pre>"},{"location":"deployment/troubleshooting/#issue-memory-leaks","title":"Issue: Memory leaks","text":"<pre><code># Monitor memory usage over time\nwhile true; do\n    echo \"$(date): $(docker stats --no-stream --format 'table {{.Name}}\\t{{.MemUsage}}' | grep backend)\"\n    sleep 60\ndone\n\n# Check for memory leaks in application\ndocker compose exec backend python -c \"\nimport psutil\nprocess = psutil.Process()\nprint(f'Memory: {process.memory_info().rss / 1024 / 1024:.1f} MB')\nprint(f'Open files: {len(process.open_files())}')\nprint(f'Connections: {len(process.connections())}')\n\"\n</code></pre>"},{"location":"deployment/troubleshooting/#database-performance","title":"Database Performance","text":""},{"location":"deployment/troubleshooting/#issue-slow-database-queries","title":"Issue: Slow database queries","text":"<pre><code>-- Check slow queries\nSELECT query, calls, total_exec_time, mean_exec_time, rows\nFROM pg_stat_statements\nWHERE mean_exec_time &gt; 100\nORDER BY mean_exec_time DESC;\n\n-- Check missing indexes\nSELECT schemaname, tablename, attname, n_distinct, correlation\nFROM pg_stats\nWHERE schemaname = 'public'\n  AND n_distinct &gt; 100\n  AND correlation &lt; 0.1;\n\n-- Check table sizes\nSELECT schemaname, tablename,\n       pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size\nFROM pg_tables\nWHERE schemaname = 'public'\nORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;\n</code></pre>"},{"location":"deployment/troubleshooting/#redis-performance","title":"Redis Performance","text":""},{"location":"deployment/troubleshooting/#issue-redis-connection-timeouts","title":"Issue: Redis connection timeouts","text":"<pre><code># Check Redis connectivity and performance\ndocker compose exec redis redis-cli ping\ndocker compose exec redis redis-cli info stats\n\n# Check Redis slow log\ndocker compose exec redis redis-cli slowlog get 10\n\n# Monitor Redis commands\ndocker compose exec redis redis-cli monitor\n\n# Check memory usage\ndocker compose exec redis redis-cli info memory\n</code></pre>"},{"location":"deployment/troubleshooting/#ssltls-certificate-issues","title":"SSL/TLS Certificate Issues","text":""},{"location":"deployment/troubleshooting/#lets-encrypt-certificate-problems","title":"Let's Encrypt Certificate Problems","text":""},{"location":"deployment/troubleshooting/#issue-certificate-generation-fails","title":"Issue: Certificate generation fails","text":"<pre><code># Check cert-manager logs (Kubernetes)\nkubectl logs -n cert-manager -l app=cert-manager\n\n# Verify DNS configuration\ndig your-domain.com\ndig _acme-challenge.your-domain.com TXT\n\n# Check rate limits\ncurl -s \"https://crt.sh/?q=%.your-domain.com&amp;output=json\" | jq length\n\n# Manual certificate generation (Docker)\ndocker run -it --rm \\\n    -v /path/to/ssl:/etc/letsencrypt \\\n    certbot/certbot certonly \\\n    --manual \\\n    --preferred-challenges dns \\\n    -d your-domain.com\n</code></pre>"},{"location":"deployment/troubleshooting/#issue-certificate-renewal-fails","title":"Issue: Certificate renewal fails","text":"<pre><code># Test certificate renewal\ncertbot renew --dry-run\n\n# Check certificate expiry\nopenssl x509 -in /path/to/cert.pem -text -noout | grep \"Not After\"\n\n# Force renewal\ncertbot renew --force-renewal\n</code></pre>"},{"location":"deployment/troubleshooting/#self-signed-certificate-issues","title":"Self-Signed Certificate Issues","text":""},{"location":"deployment/troubleshooting/#issue-browser-security-warnings","title":"Issue: Browser security warnings","text":"<pre><code># Generate proper self-signed certificate\nopenssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes \\\n    -subj \"/C=US/ST=State/L=City/O=Organization/CN=localhost\" \\\n    -addext \"subjectAltName=DNS:localhost,DNS:*.localhost,IP:127.0.0.1\"\n\n# Trust certificate in browser or OS\n# Chrome: chrome://settings/certificates\n# Firefox: about:config &gt; security.tls.insecure_fallback_hosts\n</code></pre>"},{"location":"deployment/troubleshooting/#monitoring-and-logging-issues","title":"Monitoring and Logging Issues","text":""},{"location":"deployment/troubleshooting/#prometheusgrafana-problems","title":"Prometheus/Grafana Problems","text":""},{"location":"deployment/troubleshooting/#issue-metrics-not-appearing","title":"Issue: Metrics not appearing","text":"<pre><code># Check if metrics endpoint is accessible\ncurl http://localhost:8000/api/v1/metrics\n\n# Verify Prometheus configuration\ndocker compose exec prometheus cat /etc/prometheus/prometheus.yml\n\n# Check Prometheus targets\ncurl http://localhost:9090/api/v1/targets\n\n# Restart Prometheus with new config\ndocker compose restart prometheus\n</code></pre>"},{"location":"deployment/troubleshooting/#issue-grafana-dashboard-not-loading","title":"Issue: Grafana dashboard not loading","text":"<pre><code># Check Grafana logs\ndocker compose logs grafana\n\n# Verify datasource configuration\ncurl -u admin:admin http://localhost:3001/api/datasources\n\n# Import dashboard manually\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d @dashboard.json \\\n    -u admin:admin \\\n    http://localhost:3001/api/dashboards/db\n</code></pre>"},{"location":"deployment/troubleshooting/#log-aggregation-issues","title":"Log Aggregation Issues","text":""},{"location":"deployment/troubleshooting/#issue-fluentd-not-collecting-logs","title":"Issue: Fluentd not collecting logs","text":"<pre><code># Check Fluentd configuration\ndocker compose exec fluentd cat /fluentd/etc/fluent.conf\n\n# Test log forwarding\ndocker compose exec backend logger \"Test log message\"\n\n# Check Fluentd buffer\ndocker compose exec fluentd ls -la /var/log/fluentd/\n\n# Restart Fluentd\ndocker compose restart fluentd\n</code></pre>"},{"location":"deployment/troubleshooting/#network-connectivity-issues","title":"Network Connectivity Issues","text":""},{"location":"deployment/troubleshooting/#service-discovery-problems","title":"Service Discovery Problems","text":""},{"location":"deployment/troubleshooting/#issue-services-cannot-communicate","title":"Issue: Services cannot communicate","text":"<pre><code># Check network configuration\ndocker network ls\ndocker network inspect $(docker compose config --format json | jq -r '.networks | keys[]')\n\n# Test connectivity between services\ndocker compose exec backend ping postgres\ndocker compose exec backend ping redis\n\n# Check service names in DNS\ndocker compose exec backend nslookup postgres\ndocker compose exec backend nslookup redis\n</code></pre>"},{"location":"deployment/troubleshooting/#firewall-issues","title":"Firewall Issues","text":""},{"location":"deployment/troubleshooting/#issue-external-access-blocked","title":"Issue: External access blocked","text":"<pre><code># Check iptables rules\nsudo iptables -L -n\n\n# Check ufw status (Ubuntu)\nsudo ufw status\n\n# Allow specific ports\nsudo ufw allow 8000\nsudo ufw allow 443\n\n# Check if services are binding to correct interfaces\nnetstat -tulpn | grep -E \":(8000|5432|6379)\"\n</code></pre>"},{"location":"deployment/troubleshooting/#kubernetes-network-issues","title":"Kubernetes Network Issues","text":""},{"location":"deployment/troubleshooting/#issue-pod-to-pod-communication-fails","title":"Issue: Pod-to-pod communication fails","text":"<pre><code># Check network policies\nkubectl get networkpolicies\n\n# Test connectivity between pods\nkubectl exec &lt;pod1&gt; -- ping &lt;pod2-ip&gt;\n\n# Check service mesh configuration (if using Istio)\nkubectl get virtualservices,destinationrules\n</code></pre>"},{"location":"deployment/troubleshooting/#environment-specific-issues","title":"Environment-Specific Issues","text":""},{"location":"deployment/troubleshooting/#development-environment","title":"Development Environment","text":""},{"location":"deployment/troubleshooting/#issue-hot-reloading-not-working","title":"Issue: Hot reloading not working","text":"<pre><code># Check volume mounts\ndocker compose config | grep -A 5 volumes\n\n# Verify file watcher limits (Linux)\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Use polling for file changes\nexport CHOKIDAR_USEPOLLING=true\n</code></pre>"},{"location":"deployment/troubleshooting/#production-environment","title":"Production Environment","text":""},{"location":"deployment/troubleshooting/#issue-resource-constraints","title":"Issue: Resource constraints","text":"<pre><code># Check system resources\nfree -h\ndf -h\niostat -x 1 5\n\n# Monitor container resource usage\ndocker stats --no-stream\n\n# Check swap usage\ncat /proc/swaps\nswapon --show\n</code></pre>"},{"location":"deployment/troubleshooting/#issue-security-scanning-alerts","title":"Issue: Security scanning alerts","text":"<pre><code># Scan for vulnerabilities\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n    aquasec/trivy image crew-appraisals/backend:latest\n\n# Update base images\ndocker pull python:3.11-slim\ndocker compose build --no-cache backend\n\n# Check for security updates\ndocker compose exec backend apt list --upgradable\n</code></pre>"},{"location":"deployment/troubleshooting/#emergency-procedures","title":"Emergency Procedures","text":""},{"location":"deployment/troubleshooting/#complete-system-recovery","title":"Complete System Recovery","text":""},{"location":"deployment/troubleshooting/#scenario-total-system-failure","title":"Scenario: Total system failure","text":"<pre><code># 1. Stop all services\ndocker compose down\n\n# 2. Backup any salvageable data\ndocker run --rm -v postgres_data:/data -v $(pwd):/backup \\\n    busybox tar czf /backup/postgres_backup.tar.gz /data\n\n# 3. Reset environment\ndocker system prune -a --volumes\ndocker compose pull\ndocker compose build --no-cache\n\n# 4. Restore from backup\ndocker run --rm -v postgres_data:/data -v $(pwd):/backup \\\n    busybox tar xzf /backup/postgres_backup.tar.gz -C /\n\n# 5. Start services\ndocker compose up -d\n\n# 6. Verify system health\n./scripts/health-check.sh\n</code></pre>"},{"location":"deployment/troubleshooting/#database-recovery","title":"Database Recovery","text":""},{"location":"deployment/troubleshooting/#scenario-database-corruption","title":"Scenario: Database corruption","text":"<pre><code># 1. Stop application\ndocker compose stop backend\n\n# 2. Backup current state\ndocker compose exec postgres pg_dump -U crewing_user crew_appraisals &gt; corrupt_backup.sql\n\n# 3. Check database integrity\ndocker compose exec postgres pg_dump -U crewing_user --schema-only crew_appraisals &gt; schema.sql\n\n# 4. Restore from last known good backup\ncat last_good_backup.sql | docker compose exec -T postgres psql -U crewing_user crew_appraisals\n\n# 5. Restart application\ndocker compose start backend\n</code></pre>"},{"location":"deployment/troubleshooting/#monitoring-and-alerting-setup","title":"Monitoring and Alerting Setup","text":""},{"location":"deployment/troubleshooting/#health-check-automation","title":"Health Check Automation","text":"<pre><code>#!/bin/bash\n# scripts/health-monitor.sh\n\nSERVICES=(\"http://localhost:8000/api/v1/health\" \"http://localhost:8000/api/v1/health/db\")\nALERT_EMAIL=\"admin@example.com\"\n\nfor service in \"${SERVICES[@]}\"; do\n    if ! curl -f -s \"$service\" &gt;/dev/null; then\n        echo \"ALERT: $service is down\" | mail -s \"Service Alert\" \"$ALERT_EMAIL\"\n    fi\ndone\n</code></pre>"},{"location":"deployment/troubleshooting/#log-analysis-scripts","title":"Log Analysis Scripts","text":"<pre><code>#!/bin/bash\n# scripts/analyze-logs.sh\n\n# Extract error patterns\ndocker compose logs backend | grep -E \"(ERROR|CRITICAL)\" | tail -100\n\n# Count error types\ndocker compose logs backend | grep ERROR | awk '{print $NF}' | sort | uniq -c\n\n# Monitor response times\ndocker compose logs nginx | grep -o 'request_time=[0-9.]*' | cut -d= -f2 | sort -n\n</code></pre>"},{"location":"deployment/troubleshooting/#preventive-measures","title":"Preventive Measures","text":""},{"location":"deployment/troubleshooting/#regular-maintenance","title":"Regular Maintenance","text":"<pre><code>#!/bin/bash\n# scripts/maintenance.sh\n\n# Update Docker images\ndocker compose pull\n\n# Clean up unused resources\ndocker system prune -f\n\n# Backup databases\npg_dump crew_appraisals &gt; backup_$(date +%Y%m%d).sql\n\n# Check disk space\ndf -h | grep -E \"(8[0-9]|9[0-9])%\" &amp;&amp; echo \"ALERT: Disk space low\"\n\n# Rotate logs\nfind /var/log -name \"*.log\" -mtime +30 -delete\n</code></pre>"},{"location":"deployment/troubleshooting/#monitoring-checklist","title":"Monitoring Checklist","text":"<ul> <li> API response times &lt; 200ms</li> <li> Database connection pool &lt; 80% utilization</li> <li> Disk space usage &lt; 80%</li> <li> Memory usage &lt; 80%</li> <li> CPU usage &lt; 70% average</li> <li> SSL certificates valid for &gt; 30 days</li> <li> All services healthy and responding</li> <li> Error rate &lt; 1%</li> <li> Backup jobs completing successfully</li> </ul> <p>Remember: When troubleshooting, start with the simplest explanations and work your way up to more complex scenarios. Always check logs first, verify configuration second, and test connectivity third.</p>"},{"location":"deployment/docker/","title":"Docker Deployment Guide","text":"<p>This guide covers deploying the Crew Appraisals System using Docker and Docker Compose, which provides a consistent, containerized environment for development, testing, and production deployments.</p>"},{"location":"deployment/docker/#overview","title":"Overview","text":"<p>The Docker setup includes:</p> <ul> <li>Multi-stage Dockerfile for optimized builds</li> <li>Docker Compose configurations for different environments</li> <li>Service orchestration with health checks and dependencies</li> <li>Development tools integration (pgAdmin, monitoring)</li> <li>Production optimizations (distroless images, resource limits)</li> </ul>"},{"location":"deployment/docker/#prerequisites","title":"Prerequisites","text":""},{"location":"deployment/docker/#system-requirements","title":"System Requirements","text":"<ul> <li>Docker: Version 20.10+</li> <li>Docker Compose: Version 2.0+</li> <li>Memory: Minimum 4GB RAM (8GB recommended for development)</li> <li>Storage: 10GB available space</li> <li>Network: Ports 8000, 5432, 6379, 5050 available</li> </ul>"},{"location":"deployment/docker/#installation","title":"Installation","text":""},{"location":"deployment/docker/#linux-ubuntudebian","title":"Linux (Ubuntu/Debian)","text":"<pre><code># Install Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n\n# Install Docker Compose\nsudo apt-get install docker-compose-plugin\n\n# Add user to docker group\nsudo usermod -aG docker $USER\nnewgrp docker\n</code></pre>"},{"location":"deployment/docker/#macos","title":"macOS","text":"<pre><code># Install Docker Desktop\nbrew install --cask docker\n\n# Verify installation\ndocker --version\ndocker compose version\n</code></pre>"},{"location":"deployment/docker/#windows","title":"Windows","text":"<ol> <li>Install Docker Desktop from docker.com</li> <li>Enable WSL2 backend</li> <li>Restart system</li> </ol>"},{"location":"deployment/docker/#verification","title":"Verification","text":"<pre><code># Test Docker installation\ndocker run hello-world\n\n# Test Docker Compose\ndocker compose version\n</code></pre>"},{"location":"deployment/docker/#project-structure","title":"Project Structure","text":"<pre><code>backend/\n\u251c\u2500\u2500 docker/\n\u2502   \u251c\u2500\u2500 Dockerfile              # Multi-stage build configuration\n\u2502   \u251c\u2500\u2500 docker-compose.yaml     # Main compose file\n\u2502   \u251c\u2500\u2500 docker-compose.dev.yaml # Development overrides\n\u2502   \u251c\u2500\u2500 docker-compose.prod.yaml # Production overrides\n\u2502   \u251c\u2500\u2500 .env.example            # Environment template\n\u2502   \u251c\u2500\u2500 .dockerignore           # Docker build exclusions\n\u2502   \u251c\u2500\u2500 nginx/                  # Nginx configuration\n\u2502   \u251c\u2500\u2500 postgres/               # PostgreSQL initialization\n\u2502   \u251c\u2500\u2500 prometheus/             # Monitoring configuration\n\u2502   \u251c\u2500\u2500 grafana/                # Dashboard configuration\n\u2502   \u2514\u2500\u2500 fluentd/                # Log aggregation setup\n\u251c\u2500\u2500 src/                        # Application source code\n\u251c\u2500\u2500 tests/                      # Test suites\n\u251c\u2500\u2500 migrations/                 # Database migrations\n\u2514\u2500\u2500 pyproject.toml              # Python dependencies\n</code></pre>"},{"location":"deployment/docker/#docker-configuration-files","title":"Docker Configuration Files","text":""},{"location":"deployment/docker/#dockerfile-analysis","title":"Dockerfile Analysis","text":"<p>The multi-stage Dockerfile provides optimized builds for different use cases:</p> <pre><code># Stage 1: Base image with Python and Poetry\nFROM python:3.11-slim as base\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    POETRY_VERSION=1.6.1\n\n# Stage 2: Dependencies installation\nFROM base as dependencies\nCOPY pyproject.toml poetry.lock* ./\nRUN poetry install --no-root --no-dev\n\n# Stage 3: Development (includes dev dependencies)\nFROM dependencies as development\nRUN poetry install --no-root\nCOPY . .\nCMD [\"uvicorn\", \"src.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\", \"--reload\"]\n\n# Stage 4: Testing (includes test dependencies)\nFROM dependencies as testing\nRUN poetry install --no-root\nCOPY . .\nCMD [\"pytest\", \"-v\", \"--cov=src\", \"--cov-report=term-missing\"]\n\n# Stage 5: Production (distroless, optimized)\nFROM gcr.io/distroless/python3.11-debian12 as production\nCOPY --from=production-build /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages\nCOPY --from=production-build /app /app\nENTRYPOINT [\"python\", \"-m\", \"uvicorn\", \"src.main:app\"]\nCMD [\"--host\", \"0.0.0.0\", \"--port\", \"8000\", \"--workers\", \"4\"]\n</code></pre>"},{"location":"deployment/docker/#docker-compose-services","title":"Docker Compose Services","text":""},{"location":"deployment/docker/#core-services","title":"Core Services","text":"<p>PostgreSQL Database: <pre><code>postgres:\n  image: postgres:15-alpine\n  environment:\n    POSTGRES_USER: ${DB_USER:-crewing_user}\n    POSTGRES_PASSWORD: ${DB_PASSWORD:-crewing_pass}\n    POSTGRES_DB: ${DB_NAME:-crew_appraisals}\n  volumes:\n    - postgres_data:/var/lib/postgresql/data\n    - ./postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro\n  healthcheck:\n    test: [\"CMD-SHELL\", \"pg_isready -U ${DB_USER:-crewing_user}\"]\n    interval: 10s\n    timeout: 5s\n    retries: 5\n</code></pre></p> <p>Redis Cache: <pre><code>redis:\n  image: redis:7-alpine\n  command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_pass}\n  volumes:\n    - redis_data:/data\n  healthcheck:\n    test: [\"CMD\", \"redis-cli\", \"--raw\", \"incr\", \"ping\"]\n    interval: 10s\n    timeout: 5s\n    retries: 5\n</code></pre></p> <p>Backend API: <pre><code>backend:\n  build:\n    context: ../\n    dockerfile: docker/Dockerfile\n    target: ${BUILD_TARGET:-development}\n  environment:\n    DATABASE_URL: postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}\n    REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379/0\n  depends_on:\n    postgres:\n      condition: service_healthy\n    redis:\n      condition: service_healthy\n  healthcheck:\n    test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/api/v1/health\"]\n    interval: 30s\n    timeout: 10s\n    retries: 3\n</code></pre></p>"},{"location":"deployment/docker/#environment-configuration","title":"Environment Configuration","text":""},{"location":"deployment/docker/#environment-variables","title":"Environment Variables","text":"<p>Create your environment configuration:</p> <pre><code># Copy the example environment file\ncp docker/.env.example docker/.env\n\n# Edit with your specific values\nvim docker/.env\n</code></pre>"},{"location":"deployment/docker/#env-configuration","title":".env Configuration","text":"<pre><code># Database Configuration\nDB_USER=crewing_user\nDB_PASSWORD=your_secure_db_password\nDB_NAME=crew_appraisals\nDB_PORT=5432\n\n# Redis Configuration\nREDIS_PASSWORD=your_secure_redis_password\nREDIS_PORT=6379\n\n# Application Settings\nSECRET_KEY=your-super-secure-secret-key-minimum-32-characters\nENVIRONMENT=development\nAPI_PORT=8000\n\n# CORS Settings\nCORS_ORIGINS=[\"http://localhost:3000\",\"http://localhost:5173\",\"http://127.0.0.1:3000\"]\n\n# Feature Flags\nENABLE_DOCS=true\nENABLE_METRICS=true\nMCP_ENABLED=true\nRATE_LIMIT_ENABLED=true\nRATE_LIMIT_PER_MINUTE=60\n\n# Logging\nLOG_LEVEL=INFO\nLOGGING_ENABLED=true\n\n# Optional Services Ports\nNGINX_PORT=80\nNGINX_SSL_PORT=443\nPGADMIN_PORT=5050\nPROMETHEUS_PORT=9090\nGRAFANA_PORT=3001\n\n# pgAdmin Configuration\nPGADMIN_EMAIL=admin@crewing.local\nPGADMIN_PASSWORD=admin\n\n# Grafana Configuration\nGRAFANA_USER=admin\nGRAFANA_PASSWORD=admin\n</code></pre>"},{"location":"deployment/docker/#deployment-scenarios","title":"Deployment Scenarios","text":""},{"location":"deployment/docker/#local-development","title":"Local Development","text":"<p>Purpose: Day-to-day development with hot reloading</p> <pre><code># Navigate to docker directory\ncd backend/docker\n\n# Start development environment\ndocker compose --profile development up -d\n\n# View logs\ndocker compose logs -f backend\n\n# Stop services\ndocker compose down\n</code></pre> <p>Development Features: - Hot reloading enabled - pgAdmin for database management - Debug logging - Source code mounted for instant updates</p> <p>Access URLs: - API: http://localhost:8000 - API Documentation: http://localhost:8000/docs - pgAdmin: http://localhost:5050 - Health Check: http://localhost:8000/api/v1/health</p>"},{"location":"deployment/docker/#testing-environment","title":"Testing Environment","text":"<p>Purpose: Automated testing in CI/CD</p> <pre><code># Run tests in Docker\ndocker compose run --rm backend pytest\n\n# Run with coverage\ndocker compose run --rm backend pytest --cov=src --cov-report=term-missing\n\n# Run specific test category\ndocker compose run --rm backend pytest tests/unit/\n\n# Build testing target\ndocker compose build --target testing backend\ndocker compose run --rm backend\n</code></pre>"},{"location":"deployment/docker/#staging-environment","title":"Staging Environment","text":"<p>Purpose: Production-like testing environment</p> <pre><code># Use production compose file with staging overrides\ndocker compose -f docker-compose.yaml -f docker-compose.prod.yaml up -d\n\n# Enable monitoring\ndocker compose --profile monitoring up -d\n</code></pre>"},{"location":"deployment/docker/#production-environment","title":"Production Environment","text":"<p>Purpose: Live production deployment</p> <pre><code># Production deployment\ndocker compose -f docker-compose.prod.yaml up -d\n\n# Enable all monitoring\ndocker compose -f docker-compose.prod.yaml --profile monitoring up -d\n\n# View production logs\ndocker compose -f docker-compose.prod.yaml logs backend\n</code></pre>"},{"location":"deployment/docker/#service-management","title":"Service Management","text":""},{"location":"deployment/docker/#container-lifecycle","title":"Container Lifecycle","text":"<pre><code># Start all services\ndocker compose up -d\n\n# Start specific services\ndocker compose up -d postgres redis backend\n\n# Stop all services\ndocker compose down\n\n# Stop and remove volumes (\u26a0\ufe0f Data loss)\ndocker compose down -v\n\n# Restart specific service\ndocker compose restart backend\n\n# View service status\ndocker compose ps\n</code></pre>"},{"location":"deployment/docker/#logs-and-debugging","title":"Logs and Debugging","text":"<pre><code># View all logs\ndocker compose logs\n\n# Follow logs for specific service\ndocker compose logs -f backend\n\n# View last 100 lines\ndocker compose logs --tail=100 postgres\n\n# View logs with timestamps\ndocker compose logs -t redis\n</code></pre>"},{"location":"deployment/docker/#service-health-monitoring","title":"Service Health Monitoring","text":"<pre><code># Check service health\ndocker compose ps\n\n# Inspect service health\ndocker inspect $(docker compose ps -q backend) | jq '.[0].State.Health'\n\n# Manual health check\ncurl -f http://localhost:8000/api/v1/health\n</code></pre>"},{"location":"deployment/docker/#database-management","title":"Database Management","text":""},{"location":"deployment/docker/#database-initialization","title":"Database Initialization","text":"<p>The PostgreSQL service includes initialization scripts:</p> <pre><code>-- docker/postgres/init.sql\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\nCREATE EXTENSION IF NOT EXISTS \"pg_trgm\";\n\n-- Create application user (if not exists)\nDO $$\nBEGIN\n   IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'app_user') THEN\n      CREATE ROLE app_user WITH LOGIN PASSWORD 'app_password';\n   END IF;\nEND\n$$;\n\n-- Grant necessary permissions\nGRANT CONNECT ON DATABASE crew_appraisals TO app_user;\nGRANT USAGE ON SCHEMA public TO app_user;\nGRANT CREATE ON SCHEMA public TO app_user;\n</code></pre>"},{"location":"deployment/docker/#database-operations","title":"Database Operations","text":"<pre><code># Run migrations\ndocker compose exec backend alembic upgrade head\n\n# Create new migration\ndocker compose exec backend alembic revision --autogenerate -m \"Add new table\"\n\n# Connect to database\ndocker compose exec postgres psql -U crewing_user -d crew_appraisals\n\n# Backup database\ndocker compose exec postgres pg_dump -U crewing_user crew_appraisals &gt; backup.sql\n\n# Restore database\ncat backup.sql | docker compose exec -T postgres psql -U crewing_user crew_appraisals\n</code></pre>"},{"location":"deployment/docker/#pgadmin-usage","title":"pgAdmin Usage","text":"<p>Access pgAdmin at http://localhost:5050:</p> <ol> <li>Login: Use credentials from .env file</li> <li>Add Server:</li> <li>Name: Crewing Database</li> <li>Host: postgres</li> <li>Port: 5432</li> <li>Username: crewing_user</li> <li>Password: [from .env file]</li> </ol>"},{"location":"deployment/docker/#production-optimizations","title":"Production Optimizations","text":""},{"location":"deployment/docker/#security-hardening","title":"Security Hardening","text":"<pre><code># docker-compose.prod.yaml\nservices:\n  postgres:\n    # Remove exposed ports in production\n    # ports: [\"5432:5432\"]  # Commented out\n    networks:\n      - backend_network  # Internal network only\n\n  backend:\n    # Use production image\n    build:\n      target: production\n    # Set resource limits\n    deploy:\n      resources:\n        limits:\n          cpus: '2'\n          memory: 2G\n        reservations:\n          cpus: '1'\n          memory: 1G\n    # Security options\n    security_opt:\n      - no-new-privileges:true\n    read_only: true\n    tmpfs:\n      - /tmp\n</code></pre>"},{"location":"deployment/docker/#ssltls-with-nginx","title":"SSL/TLS with Nginx","text":"<pre><code># docker/nginx/conf.d/default.conf\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name your-domain.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name your-domain.com;\n\n    ssl_certificate /etc/nginx/ssl/fullchain.pem;\n    ssl_certificate_key /etc/nginx/ssl/privkey.pem;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n\n    location / {\n        proxy_pass http://backend:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"deployment/docker/#resource-management","title":"Resource Management","text":"<pre><code># Resource limits for production\nservices:\n  backend:\n    deploy:\n      resources:\n        limits:\n          cpus: '2.0'\n          memory: 2G\n        reservations:\n          cpus: '1.0'\n          memory: 1G\n      restart_policy:\n        condition: unless-stopped\n        delay: 5s\n        max_attempts: 3\n\n  postgres:\n    deploy:\n      resources:\n        limits:\n          memory: 1G\n        reservations:\n          memory: 512M\n    command: &gt;\n      postgres\n      -c max_connections=200\n      -c shared_buffers=256MB\n      -c effective_cache_size=1GB\n      -c checkpoint_completion_target=0.9\n      -c wal_buffers=16MB\n      -c default_statistics_target=100\n</code></pre>"},{"location":"deployment/docker/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"deployment/docker/#prometheus-configuration","title":"Prometheus Configuration","text":"<pre><code># docker/prometheus/prometheus.yml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files: []\n\nscrape_configs:\n  - job_name: 'fastapi-app'\n    static_configs:\n      - targets: ['backend:8000']\n    metrics_path: '/api/v1/metrics'\n    scrape_interval: 10s\n\n  - job_name: 'postgres-exporter'\n    static_configs:\n      - targets: ['postgres-exporter:9187']\n\n  - job_name: 'redis-exporter'\n    static_configs:\n      - targets: ['redis-exporter:9121']\n</code></pre>"},{"location":"deployment/docker/#grafana-dashboards","title":"Grafana Dashboards","text":"<p>Pre-configured dashboards are available in <code>docker/grafana/provisioning/</code>:</p> <ol> <li>Application Dashboard: Request rates, response times, error rates</li> <li>Database Dashboard: Connection counts, query performance</li> <li>Infrastructure Dashboard: CPU, memory, disk usage</li> <li>Business Dashboard: User activity, appraisal metrics</li> </ol>"},{"location":"deployment/docker/#log-aggregation","title":"Log Aggregation","text":"<pre><code># Fluentd configuration for centralized logging\nfluentd:\n  image: fluent/fluentd:v1.16-1\n  volumes:\n    - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf\n    - fluentd_logs:/var/log/fluentd\n  ports:\n    - \"24224:24224\"\n  logging:\n    driver: json-file\n    options:\n      max-size: 10m\n      max-file: 3\n</code></pre>"},{"location":"deployment/docker/#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"deployment/docker/#automated-backups","title":"Automated Backups","text":"<pre><code>#!/bin/bash\n# docker/scripts/backup.sh\n\n# Configuration\nBACKUP_DIR=\"/backups\"\nRETENTION_DAYS=7\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\n\n# Create backup directory\nmkdir -p $BACKUP_DIR\n\n# Database backup\necho \"Creating database backup...\"\ndocker compose exec -T postgres pg_dump \\\n    -U crewing_user \\\n    -d crew_appraisals \\\n    --clean \\\n    --no-owner \\\n    --no-privileges &gt; \"$BACKUP_DIR/db_backup_$TIMESTAMP.sql\"\n\n# Compress backup\ngzip \"$BACKUP_DIR/db_backup_$TIMESTAMP.sql\"\n\n# Redis backup\necho \"Creating Redis backup...\"\ndocker compose exec -T redis redis-cli \\\n    --rdb /data/dump_$TIMESTAMP.rdb SAVE\ndocker cp $(docker compose ps -q redis):/data/dump_$TIMESTAMP.rdb \"$BACKUP_DIR/\"\ngzip \"$BACKUP_DIR/dump_$TIMESTAMP.rdb\"\n\n# Cleanup old backups\nfind \"$BACKUP_DIR\" -name \"*.gz\" -mtime +$RETENTION_DAYS -delete\n\necho \"Backup completed: $TIMESTAMP\"\n</code></pre>"},{"location":"deployment/docker/#restore-procedures","title":"Restore Procedures","text":"<pre><code>#!/bin/bash\n# docker/scripts/restore.sh\n\nBACKUP_FILE=$1\nif [ -z \"$BACKUP_FILE\" ]; then\n    echo \"Usage: $0 &lt;backup_file.sql.gz&gt;\"\n    exit 1\nfi\n\n# Stop application\necho \"Stopping application...\"\ndocker compose stop backend\n\n# Restore database\necho \"Restoring database...\"\nzcat \"$BACKUP_FILE\" | docker compose exec -T postgres psql \\\n    -U crewing_user \\\n    -d crew_appraisals\n\n# Restart application\necho \"Starting application...\"\ndocker compose start backend\n\n# Verify health\nsleep 10\ncurl -f http://localhost:8000/api/v1/health\n\necho \"Restore completed!\"\n</code></pre>"},{"location":"deployment/docker/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/docker/#common-issues","title":"Common Issues","text":""},{"location":"deployment/docker/#port-conflicts","title":"Port Conflicts","text":"<pre><code># Find processes using ports\nsudo netstat -tulpn | grep :8000\nsudo netstat -tulpn | grep :5432\n\n# Kill conflicting processes\nsudo kill -9 &lt;PID&gt;\n\n# Use different ports\nexport API_PORT=8001\nexport DB_PORT=5433\n</code></pre>"},{"location":"deployment/docker/#memory-issues","title":"Memory Issues","text":"<pre><code># Check Docker memory usage\ndocker stats\n\n# Increase Docker memory limit (Docker Desktop)\n# Settings &gt; Resources &gt; Memory\n\n# Clean up unused containers/images\ndocker system prune -a\n</code></pre>"},{"location":"deployment/docker/#database-connection-issues","title":"Database Connection Issues","text":"<pre><code># Check PostgreSQL logs\ndocker compose logs postgres\n\n# Test connectivity\ndocker compose exec backend python -c \"\nfrom src.core.database import engine\nwith engine.connect() as conn:\n    print('Database connected successfully')\n\"\n</code></pre>"},{"location":"deployment/docker/#debug-mode","title":"Debug Mode","text":"<p>Enable debug mode for detailed troubleshooting:</p> <pre><code># Set debug environment\nexport LOG_LEVEL=DEBUG\nexport ENVIRONMENT=development\n\n# Restart with debug logging\ndocker compose up -d backend\n\n# Follow debug logs\ndocker compose logs -f backend\n</code></pre>"},{"location":"deployment/docker/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"deployment/docker/#github-actions-example","title":"GitHub Actions Example","text":"<pre><code># .github/workflows/docker.yml\nname: Docker Build and Test\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Build test image\n        run: |\n          cd backend\n          docker compose build --target testing backend\n\n      - name: Run tests\n        run: |\n          cd backend\n          docker compose run --rm backend pytest --cov=src\n\n      - name: Integration tests\n        run: |\n          cd backend\n          docker compose --profile testing up -d\n          docker compose run --rm backend pytest tests/integration/\n          docker compose down\n\n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Deploy to staging\n        run: |\n          cd backend\n          docker compose -f docker-compose.prod.yaml up -d\n\n      - name: Health check\n        run: |\n          sleep 30\n          curl -f http://localhost:8000/api/v1/health\n</code></pre>"},{"location":"deployment/docker/#best-practices","title":"Best Practices","text":""},{"location":"deployment/docker/#development-workflow","title":"Development Workflow","text":"<ol> <li>Use profiles: Organize services with Docker Compose profiles</li> <li>Environment consistency: Use the same base images across environments</li> <li>Health checks: Implement proper health checks for all services</li> <li>Resource limits: Set appropriate resource limits</li> <li>Security: Follow Docker security best practices</li> </ol>"},{"location":"deployment/docker/#production-checklist","title":"Production Checklist","text":"<ul> <li> Environment variables: All secrets configured securely</li> <li> SSL certificates: Valid certificates installed and configured</li> <li> Resource limits: CPU and memory limits set appropriately</li> <li> Health checks: All services have health checks configured</li> <li> Backups: Automated backup strategy implemented</li> <li> Monitoring: Prometheus and Grafana configured</li> <li> Logging: Centralized logging configured</li> <li> Updates: Process for updating container images</li> <li> Firewall: Network access properly restricted</li> <li> Documentation: Deployment procedures documented</li> </ul>"},{"location":"deployment/docker/#performance-tuning","title":"Performance Tuning","text":"<pre><code># Optimized PostgreSQL configuration\npostgres:\n  command: &gt;\n    postgres\n    -c max_connections=200\n    -c shared_buffers=256MB\n    -c effective_cache_size=1GB\n    -c maintenance_work_mem=64MB\n    -c checkpoint_completion_target=0.9\n    -c wal_buffers=16MB\n    -c default_statistics_target=100\n    -c random_page_cost=1.1\n    -c effective_io_concurrency=200\n</code></pre> <p>The Docker setup provides a robust, scalable foundation for deploying the Crew Appraisals System across different environments while maintaining consistency and reliability.</p>"},{"location":"deployment/k8s/helm/","title":"Kubernetes Deployment with Helm","text":"<p>This guide covers deploying the Crew Appraisals System on Kubernetes using Helm charts, providing a production-ready, scalable deployment with high availability and automatic scaling capabilities.</p>"},{"location":"deployment/k8s/helm/#overview","title":"Overview","text":"<p>Kubernetes deployment provides:</p> <ul> <li>High Availability: Multi-replica deployments with load balancing</li> <li>Auto-scaling: Horizontal Pod Autoscaler (HPA) for dynamic scaling</li> <li>Service Discovery: Built-in DNS and service mesh capabilities</li> <li>Rolling Updates: Zero-downtime deployments</li> <li>Resource Management: CPU/memory limits and requests</li> <li>Persistent Storage: StatefulSets for database persistence</li> <li>Monitoring: Integrated with Prometheus and Grafana</li> </ul>"},{"location":"deployment/k8s/helm/#prerequisites","title":"Prerequisites","text":""},{"location":"deployment/k8s/helm/#cluster-requirements","title":"Cluster Requirements","text":"<ul> <li>Kubernetes: Version 1.24+ (tested with 1.28)</li> <li>Helm: Version 3.8+</li> <li>kubectl: Compatible with your cluster version</li> <li>Storage: Dynamic volume provisioning</li> <li>Ingress Controller: nginx-ingress or similar</li> <li>Resources: Minimum 4 CPU cores, 8GB RAM</li> </ul>"},{"location":"deployment/k8s/helm/#local-development-clusters","title":"Local Development Clusters","text":""},{"location":"deployment/k8s/helm/#minikube","title":"Minikube","text":"<pre><code># Install minikube\ncurl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nchmod +x minikube\nsudo mv minikube /usr/local/bin/\n\n# Start cluster\nminikube start --cpus=4 --memory=8192 --disk-size=20g\n\n# Enable addons\nminikube addons enable ingress\nminikube addons enable metrics-server\n</code></pre>"},{"location":"deployment/k8s/helm/#kind-kubernetes-in-docker","title":"Kind (Kubernetes in Docker)","text":"<pre><code># Install kind\ngo install sigs.k8s.io/kind@v0.20.0\n\n# Create cluster\nkind create cluster --config=kind-config.yaml\n\n# Install ingress controller\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml\n</code></pre>"},{"location":"deployment/k8s/helm/#cloud-kubernetes-services","title":"Cloud Kubernetes Services","text":""},{"location":"deployment/k8s/helm/#aws-eks","title":"AWS EKS","text":"<pre><code># Install eksctl\ncurl --silent --location \"https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz\" | tar xz -C /tmp\nsudo mv /tmp/eksctl /usr/local/bin\n\n# Create cluster\neksctl create cluster --name crew-appraisals --region us-west-2 --nodegroup-name standard-workers --node-type m5.large --nodes 3\n</code></pre>"},{"location":"deployment/k8s/helm/#google-gke","title":"Google GKE","text":"<pre><code># Create cluster\ngcloud container clusters create crew-appraisals \\\n    --zone=us-central1-a \\\n    --machine-type=e2-standard-4 \\\n    --num-nodes=3 \\\n    --enable-autoscaling \\\n    --min-nodes=1 \\\n    --max-nodes=10\n</code></pre>"},{"location":"deployment/k8s/helm/#azure-aks","title":"Azure AKS","text":"<pre><code># Create cluster\naz aks create \\\n    --resource-group crew-appraisals-rg \\\n    --name crew-appraisals-aks \\\n    --node-count 3 \\\n    --node-vm-size Standard_D2s_v3 \\\n    --enable-addons monitoring \\\n    --generate-ssh-keys\n</code></pre>"},{"location":"deployment/k8s/helm/#helm-chart-structure","title":"Helm Chart Structure","text":""},{"location":"deployment/k8s/helm/#directory-layout","title":"Directory Layout","text":"<pre><code>helm/\n\u251c\u2500\u2500 Chart.yaml                    # Chart metadata\n\u251c\u2500\u2500 values.yaml                   # Default configuration\n\u251c\u2500\u2500 values-dev.yaml              # Development overrides\n\u251c\u2500\u2500 values-staging.yaml          # Staging overrides\n\u251c\u2500\u2500 values-production.yaml       # Production overrides\n\u251c\u2500\u2500 templates/\n\u2502   \u251c\u2500\u2500 _helpers.tpl             # Template helpers\n\u2502   \u251c\u2500\u2500 configmap.yaml           # Application configuration\n\u2502   \u251c\u2500\u2500 secret.yaml              # Sensitive configuration\n\u2502   \u251c\u2500\u2500 deployment.yaml          # Backend deployment\n\u2502   \u251c\u2500\u2500 service.yaml             # Backend service\n\u2502   \u251c\u2500\u2500 ingress.yaml             # External access\n\u2502   \u251c\u2500\u2500 hpa.yaml                 # Horizontal Pod Autoscaler\n\u2502   \u251c\u2500\u2500 pdb.yaml                 # Pod Disruption Budget\n\u2502   \u251c\u2500\u2500 serviceaccount.yaml      # Service account\n\u2502   \u251c\u2500\u2500 postgres/\n\u2502   \u2502   \u251c\u2500\u2500 statefulset.yaml     # PostgreSQL StatefulSet\n\u2502   \u2502   \u251c\u2500\u2500 service.yaml         # PostgreSQL service\n\u2502   \u2502   \u2514\u2500\u2500 pvc.yaml             # Persistent volume claim\n\u2502   \u251c\u2500\u2500 redis/\n\u2502   \u2502   \u251c\u2500\u2500 deployment.yaml      # Redis deployment\n\u2502   \u2502   \u251c\u2500\u2500 service.yaml         # Redis service\n\u2502   \u2502   \u2514\u2500\u2500 configmap.yaml       # Redis configuration\n\u2502   \u2514\u2500\u2500 monitoring/\n\u2502       \u251c\u2500\u2500 servicemonitor.yaml  # Prometheus monitoring\n\u2502       \u2514\u2500\u2500 grafana-dashboard.yaml\n\u251c\u2500\u2500 charts/                      # Chart dependencies\n\u2514\u2500\u2500 crds/                       # Custom Resource Definitions\n</code></pre>"},{"location":"deployment/k8s/helm/#chartyaml","title":"Chart.yaml","text":"<pre><code>apiVersion: v2\nname: crew-appraisals\ndescription: A Helm chart for Crew Appraisals System\ntype: application\nversion: 0.1.0\nappVersion: \"1.0.0\"\n\nmaintainers:\n  - name: Platform Team\n    email: platform@crew-appraisals.com\n\ndependencies:\n  - name: postgresql\n    version: \"12.x.x\"\n    repository: \"https://charts.bitnami.com/bitnami\"\n    condition: postgresql.enabled\n\n  - name: redis\n    version: \"18.x.x\"\n    repository: \"https://charts.bitnami.com/bitnami\"\n    condition: redis.enabled\n\n  - name: prometheus\n    version: \"23.x.x\"\n    repository: \"https://prometheus-community.github.io/helm-charts\"\n    condition: monitoring.prometheus.enabled\n\nkeywords:\n  - fastapi\n  - postgresql\n  - redis\n  - crew-management\n  - appraisals\n</code></pre>"},{"location":"deployment/k8s/helm/#default-values-valuesyaml","title":"Default Values (values.yaml)","text":"<pre><code># Global configuration\nglobal:\n  imageRegistry: \"\"\n  storageClass: \"\"\n\n# Application configuration\napp:\n  name: crew-appraisals\n  image:\n    repository: crew-appraisals/backend\n    tag: \"1.0.0\"\n    pullPolicy: IfNotPresent\n\n  replicaCount: 2\n\n  port: 8000\n\n  environment: production\n\n  resources:\n    limits:\n      cpu: 1000m\n      memory: 1Gi\n    requests:\n      cpu: 500m\n      memory: 512Mi\n\n  # Health checks\n  livenessProbe:\n    httpGet:\n      path: /api/v1/health\n      port: 8000\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    timeoutSeconds: 5\n    failureThreshold: 3\n\n  readinessProbe:\n    httpGet:\n      path: /api/v1/ready\n      port: 8000\n    initialDelaySeconds: 5\n    periodSeconds: 5\n    timeoutSeconds: 3\n    failureThreshold: 3\n\n# Auto-scaling configuration\nautoscaling:\n  enabled: true\n  minReplicas: 2\n  maxReplicas: 10\n  targetCPUUtilizationPercentage: 70\n  targetMemoryUtilizationPercentage: 80\n\n# Pod disruption budget\npodDisruptionBudget:\n  enabled: true\n  minAvailable: 1\n\n# Service configuration\nservice:\n  type: ClusterIP\n  port: 80\n  targetPort: 8000\n\n# Ingress configuration\ningress:\n  enabled: true\n  className: \"nginx\"\n  annotations:\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n  hosts:\n    - host: crew-appraisals.example.com\n      paths:\n        - path: /\n          pathType: Prefix\n  tls:\n    - secretName: crew-appraisals-tls\n      hosts:\n        - crew-appraisals.example.com\n\n# Database configuration (PostgreSQL)\npostgresql:\n  enabled: true\n  auth:\n    postgresPassword: \"postgres123\"\n    username: \"crewing_user\"\n    password: \"crewing_pass\"\n    database: \"crew_appraisals\"\n\n  primary:\n    persistence:\n      enabled: true\n      size: 20Gi\n\n    resources:\n      limits:\n        memory: 1Gi\n        cpu: 1000m\n      requests:\n        memory: 512Mi\n        cpu: 500m\n\n# Redis configuration\nredis:\n  enabled: true\n  auth:\n    enabled: true\n    password: \"redis123\"\n\n  master:\n    persistence:\n      enabled: true\n      size: 5Gi\n\n    resources:\n      limits:\n        memory: 512Mi\n        cpu: 500m\n      requests:\n        memory: 256Mi\n        cpu: 250m\n\n# Monitoring configuration\nmonitoring:\n  enabled: true\n  prometheus:\n    enabled: true\n    serviceMonitor:\n      enabled: true\n      interval: 30s\n      path: /api/v1/metrics\n\n  grafana:\n    enabled: true\n    dashboard:\n      enabled: true\n\n# Security configuration\nsecurity:\n  podSecurityContext:\n    fsGroup: 1000\n    runAsNonRoot: true\n    runAsUser: 1000\n\n  securityContext:\n    allowPrivilegeEscalation: false\n    capabilities:\n      drop:\n        - ALL\n    readOnlyRootFilesystem: true\n    runAsNonRoot: true\n    runAsUser: 1000\n\n# Network policies\nnetworkPolicy:\n  enabled: true\n\n# Configuration for different environments\nconfig:\n  database:\n    url: \"postgresql+asyncpg://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):5432/$(DB_NAME)\"\n\n  redis:\n    url: \"redis://default:$(REDIS_PASSWORD)@$(REDIS_HOST):6379/0\"\n\n  app:\n    secretKey: \"\"  # Set in secrets\n    corsOrigins: '[\"https://crew-appraisals.example.com\"]'\n    logLevel: \"INFO\"\n    environment: \"production\"\n\n    # Feature flags\n    enableDocs: false\n    enableMetrics: true\n    mcpEnabled: true\n\n    # Rate limiting\n    rateLimitEnabled: true\n    rateLimitPerMinute: 100\n</code></pre>"},{"location":"deployment/k8s/helm/#deployment-templates","title":"Deployment Templates","text":""},{"location":"deployment/k8s/helm/#backend-deployment","title":"Backend Deployment","text":"<pre><code># templates/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ include \"crew-appraisals.fullname\" . }}-backend\n  labels:\n    {{- include \"crew-appraisals.labels\" . | nindent 4 }}\n    app.kubernetes.io/component: backend\nspec:\n  {{- if not .Values.autoscaling.enabled }}\n  replicas: {{ .Values.app.replicaCount }}\n  {{- end }}\n  selector:\n    matchLabels:\n      {{- include \"crew-appraisals.selectorLabels\" . | nindent 6 }}\n      app.kubernetes.io/component: backend\n  template:\n    metadata:\n      annotations:\n        checksum/config: {{ include (print $.Template.BasePath \"/configmap.yaml\") . | sha256sum }}\n        checksum/secret: {{ include (print $.Template.BasePath \"/secret.yaml\") . | sha256sum }}\n      labels:\n        {{- include \"crew-appraisals.selectorLabels\" . | nindent 8 }}\n        app.kubernetes.io/component: backend\n    spec:\n      {{- with .Values.security.podSecurityContext }}\n      securityContext:\n        {{- toYaml . | nindent 8 }}\n      {{- end }}\n      serviceAccountName: {{ include \"crew-appraisals.serviceAccountName\" . }}\n      containers:\n        - name: backend\n          {{- with .Values.security.securityContext }}\n          securityContext:\n            {{- toYaml . | nindent 12 }}\n          {{- end }}\n          image: \"{{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}\"\n          imagePullPolicy: {{ .Values.app.image.pullPolicy }}\n          ports:\n            - name: http\n              containerPort: {{ .Values.app.port }}\n              protocol: TCP\n          env:\n            # Database configuration\n            - name: DB_HOST\n              value: {{ include \"crew-appraisals.postgresql.fullname\" . }}\n            - name: DB_USER\n              valueFrom:\n                secretKeyRef:\n                  name: {{ include \"crew-appraisals.secretName\" . }}\n                  key: db-username\n            - name: DB_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: {{ include \"crew-appraisals.secretName\" . }}\n                  key: db-password\n            - name: DB_NAME\n              valueFrom:\n                secretKeyRef:\n                  name: {{ include \"crew-appraisals.secretName\" . }}\n                  key: db-name\n            - name: DATABASE_URL\n              value: {{ .Values.config.database.url }}\n\n            # Redis configuration\n            - name: REDIS_HOST\n              value: {{ include \"crew-appraisals.redis.fullname\" . }}-master\n            - name: REDIS_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: {{ include \"crew-appraisals.secretName\" . }}\n                  key: redis-password\n            - name: REDIS_URL\n              value: {{ .Values.config.redis.url }}\n\n            # Application configuration\n            - name: SECRET_KEY\n              valueFrom:\n                secretKeyRef:\n                  name: {{ include \"crew-appraisals.secretName\" . }}\n                  key: secret-key\n            - name: ENVIRONMENT\n              value: {{ .Values.config.app.environment }}\n            - name: CORS_ORIGINS\n              value: {{ .Values.config.app.corsOrigins }}\n            - name: LOG_LEVEL\n              value: {{ .Values.config.app.logLevel }}\n\n            # Feature flags\n            - name: ENABLE_DOCS\n              value: {{ .Values.config.app.enableDocs | quote }}\n            - name: ENABLE_METRICS\n              value: {{ .Values.config.app.enableMetrics | quote }}\n            - name: MCP_ENABLED\n              value: {{ .Values.config.app.mcpEnabled | quote }}\n\n            # Rate limiting\n            - name: RATE_LIMIT_ENABLED\n              value: {{ .Values.config.app.rateLimitEnabled | quote }}\n            - name: RATE_LIMIT_PER_MINUTE\n              value: {{ .Values.config.app.rateLimitPerMinute | quote }}\n\n          {{- with .Values.app.livenessProbe }}\n          livenessProbe:\n            {{- toYaml . | nindent 12 }}\n          {{- end }}\n          {{- with .Values.app.readinessProbe }}\n          readinessProbe:\n            {{- toYaml . | nindent 12 }}\n          {{- end }}\n          {{- with .Values.app.resources }}\n          resources:\n            {{- toYaml . | nindent 12 }}\n          {{- end }}\n          volumeMounts:\n            - name: tmp\n              mountPath: /tmp\n      volumes:\n        - name: tmp\n          emptyDir: {}\n      {{- with .Values.nodeSelector }}\n      nodeSelector:\n        {{- toYaml . | nindent 8 }}\n      {{- end }}\n      {{- with .Values.affinity }}\n      affinity:\n        {{- toYaml . | nindent 8 }}\n      {{- end }}\n      {{- with .Values.tolerations }}\n      tolerations:\n        {{- toYaml . | nindent 8 }}\n      {{- end }}\n</code></pre>"},{"location":"deployment/k8s/helm/#horizontal-pod-autoscaler","title":"Horizontal Pod Autoscaler","text":"<pre><code># templates/hpa.yaml\n{{- if .Values.autoscaling.enabled }}\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: {{ include \"crew-appraisals.fullname\" . }}-hpa\n  labels:\n    {{- include \"crew-appraisals.labels\" . | nindent 4 }}\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: {{ include \"crew-appraisals.fullname\" . }}-backend\n  minReplicas: {{ .Values.autoscaling.minReplicas }}\n  maxReplicas: {{ .Values.autoscaling.maxReplicas }}\n  metrics:\n    {{- if .Values.autoscaling.targetCPUUtilizationPercentage }}\n    - type: Resource\n      resource:\n        name: cpu\n        target:\n          type: Utilization\n          averageUtilization: {{ .Values.autoscaling.targetCPUUtilizationPercentage }}\n    {{- end }}\n    {{- if .Values.autoscaling.targetMemoryUtilizationPercentage }}\n    - type: Resource\n      resource:\n        name: memory\n        target:\n          type: Utilization\n          averageUtilization: {{ .Values.autoscaling.targetMemoryUtilizationPercentage }}\n    {{- end }}\n{{- end }}\n</code></pre>"},{"location":"deployment/k8s/helm/#ingress-configuration","title":"Ingress Configuration","text":"<pre><code># templates/ingress.yaml\n{{- if .Values.ingress.enabled -}}\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: {{ include \"crew-appraisals.fullname\" . }}\n  labels:\n    {{- include \"crew-appraisals.labels\" . | nindent 4 }}\n  {{- with .Values.ingress.annotations }}\n  annotations:\n    {{- toYaml . | nindent 4 }}\n  {{- end }}\nspec:\n  {{- if .Values.ingress.className }}\n  ingressClassName: {{ .Values.ingress.className }}\n  {{- end }}\n  {{- if .Values.ingress.tls }}\n  tls:\n    {{- range .Values.ingress.tls }}\n    - hosts:\n        {{- range .hosts }}\n        - {{ . | quote }}\n        {{- end }}\n      secretName: {{ .secretName }}\n    {{- end }}\n  {{- end }}\n  rules:\n    {{- range .Values.ingress.hosts }}\n    - host: {{ .host | quote }}\n      http:\n        paths:\n          {{- range .paths }}\n          - path: {{ .path }}\n            pathType: {{ .pathType }}\n            backend:\n              service:\n                name: {{ include \"crew-appraisals.fullname\" $ }}\n                port:\n                  number: {{ $.Values.service.port }}\n          {{- end }}\n    {{- end }}\n{{- end }}\n</code></pre>"},{"location":"deployment/k8s/helm/#network-policy","title":"Network Policy","text":"<pre><code># templates/networkpolicy.yaml\n{{- if .Values.networkPolicy.enabled }}\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: {{ include \"crew-appraisals.fullname\" . }}\n  labels:\n    {{- include \"crew-appraisals.labels\" . | nindent 4 }}\nspec:\n  podSelector:\n    matchLabels:\n      {{- include \"crew-appraisals.selectorLabels\" . | nindent 6 }}\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  # Allow ingress from ingress controller\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: ingress-nginx\n    ports:\n    - protocol: TCP\n      port: {{ .Values.app.port }}\n\n  # Allow ingress from prometheus for metrics\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: monitoring\n    ports:\n    - protocol: TCP\n      port: {{ .Values.app.port }}\n\n  egress:\n  # Allow egress to PostgreSQL\n  - to:\n    - podSelector:\n        matchLabels:\n          app.kubernetes.io/name: postgresql\n    ports:\n    - protocol: TCP\n      port: 5432\n\n  # Allow egress to Redis\n  - to:\n    - podSelector:\n        matchLabels:\n          app.kubernetes.io/name: redis\n    ports:\n    - protocol: TCP\n      port: 6379\n\n  # Allow DNS resolution\n  - to: []\n    ports:\n    - protocol: UDP\n      port: 53\n\n  # Allow HTTPS for external APIs\n  - to: []\n    ports:\n    - protocol: TCP\n      port: 443\n{{- end }}\n</code></pre>"},{"location":"deployment/k8s/helm/#environment-specific-values","title":"Environment-Specific Values","text":""},{"location":"deployment/k8s/helm/#development-values-devyaml","title":"Development (values-dev.yaml)","text":"<pre><code>app:\n  replicaCount: 1\n  image:\n    tag: \"dev\"\n    pullPolicy: Always\n\n  environment: development\n\n  resources:\n    limits:\n      cpu: 500m\n      memory: 512Mi\n    requests:\n      cpu: 250m\n      memory: 256Mi\n\nconfig:\n  app:\n    enableDocs: true\n    logLevel: \"DEBUG\"\n\nautoscaling:\n  enabled: false\n\npostgresql:\n  primary:\n    persistence:\n      size: 5Gi\n    resources:\n      limits:\n        memory: 512Mi\n        cpu: 500m\n      requests:\n        memory: 256Mi\n        cpu: 250m\n\nredis:\n  master:\n    persistence:\n      size: 2Gi\n    resources:\n      limits:\n        memory: 256Mi\n        cpu: 250m\n      requests:\n        memory: 128Mi\n        cpu: 125m\n\ningress:\n  hosts:\n    - host: crew-appraisals-dev.example.com\n      paths:\n        - path: /\n          pathType: Prefix\n  tls:\n    - secretName: crew-appraisals-dev-tls\n      hosts:\n        - crew-appraisals-dev.example.com\n</code></pre>"},{"location":"deployment/k8s/helm/#production-values-productionyaml","title":"Production (values-production.yaml)","text":"<pre><code>app:\n  replicaCount: 3\n  image:\n    tag: \"1.0.0\"\n    pullPolicy: IfNotPresent\n\n  resources:\n    limits:\n      cpu: 2000m\n      memory: 2Gi\n    requests:\n      cpu: 1000m\n      memory: 1Gi\n\nconfig:\n  app:\n    enableDocs: false\n    logLevel: \"INFO\"\n    rateLimitPerMinute: 200\n\nautoscaling:\n  enabled: true\n  minReplicas: 3\n  maxReplicas: 20\n  targetCPUUtilizationPercentage: 60\n  targetMemoryUtilizationPercentage: 70\n\npodDisruptionBudget:\n  enabled: true\n  minAvailable: 2\n\npostgresql:\n  primary:\n    persistence:\n      size: 100Gi\n    resources:\n      limits:\n        memory: 4Gi\n        cpu: 2000m\n      requests:\n        memory: 2Gi\n        cpu: 1000m\n\nredis:\n  master:\n    persistence:\n      size: 10Gi\n    resources:\n      limits:\n        memory: 1Gi\n        cpu: 500m\n      requests:\n        memory: 512Mi\n        cpu: 250m\n\nmonitoring:\n  enabled: true\n  prometheus:\n    enabled: true\n  grafana:\n    enabled: true\n\n# Node affinity for production\naffinity:\n  podAntiAffinity:\n    preferredDuringSchedulingIgnoredDuringExecution:\n    - weight: 100\n      podAffinityTerm:\n        labelSelector:\n          matchExpressions:\n          - key: app.kubernetes.io/name\n            operator: In\n            values:\n            - crew-appraisals\n        topologyKey: kubernetes.io/hostname\n\n# Tolerations for dedicated nodes\ntolerations:\n- key: \"dedicated\"\n  operator: \"Equal\"\n  value: \"crew-appraisals\"\n  effect: \"NoSchedule\"\n\nnodeSelector:\n  node-type: \"application\"\n</code></pre>"},{"location":"deployment/k8s/helm/#deployment-commands","title":"Deployment Commands","text":""},{"location":"deployment/k8s/helm/#install-helm-and-dependencies","title":"Install Helm and Dependencies","text":"<pre><code># Install Helm\ncurl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\n\n# Add repositories\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo update\n\n# Install dependencies\ncd helm/\nhelm dependency build\n</code></pre>"},{"location":"deployment/k8s/helm/#deploy-to-different-environments","title":"Deploy to Different Environments","text":""},{"location":"deployment/k8s/helm/#development-deployment","title":"Development Deployment","text":"<pre><code># Create namespace\nkubectl create namespace crew-appraisals-dev\n\n# Install/upgrade\nhelm upgrade --install crew-appraisals-dev ./helm \\\n  --namespace crew-appraisals-dev \\\n  --values helm/values-dev.yaml \\\n  --set app.image.tag=\"dev-$(git rev-parse --short HEAD)\"\n\n# Port forward for local access\nkubectl port-forward -n crew-appraisals-dev service/crew-appraisals-dev 8080:80\n</code></pre>"},{"location":"deployment/k8s/helm/#staging-deployment","title":"Staging Deployment","text":"<pre><code># Create namespace\nkubectl create namespace crew-appraisals-staging\n\n# Install cert-manager for SSL\nhelm repo add jetstack https://charts.jetstack.io\nhelm install cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --version v1.13.0 \\\n  --set installCRDs=true\n\n# Deploy application\nhelm upgrade --install crew-appraisals-staging ./helm \\\n  --namespace crew-appraisals-staging \\\n  --values helm/values-staging.yaml \\\n  --set config.app.secretKey=\"$(openssl rand -base64 32)\"\n</code></pre>"},{"location":"deployment/k8s/helm/#production-deployment","title":"Production Deployment","text":"<pre><code># Create namespace\nkubectl create namespace crew-appraisals-prod\n\n# Create secrets\nkubectl create secret generic crew-appraisals-secrets \\\n  --namespace crew-appraisals-prod \\\n  --from-literal=secret-key=\"$(openssl rand -base64 32)\" \\\n  --from-literal=db-password=\"$(openssl rand -base64 32)\" \\\n  --from-literal=redis-password=\"$(openssl rand -base64 32)\"\n\n# Deploy with production values\nhelm upgrade --install crew-appraisals ./helm \\\n  --namespace crew-appraisals-prod \\\n  --values helm/values-production.yaml \\\n  --wait \\\n  --timeout=10m\n\n# Verify deployment\nkubectl get pods -n crew-appraisals-prod\nkubectl get services -n crew-appraisals-prod\nkubectl get ingress -n crew-appraisals-prod\n</code></pre>"},{"location":"deployment/k8s/helm/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":"<pre><code># Check deployment status\nhelm status crew-appraisals -n crew-appraisals-prod\n\n# View deployment history\nhelm history crew-appraisals -n crew-appraisals-prod\n\n# Rollback to previous version\nhelm rollback crew-appraisals 1 -n crew-appraisals-prod\n\n# Update deployment\nhelm upgrade crew-appraisals ./helm \\\n  --namespace crew-appraisals-prod \\\n  --values helm/values-production.yaml \\\n  --set app.image.tag=\"1.0.1\"\n</code></pre>"},{"location":"deployment/k8s/helm/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"deployment/k8s/helm/#custom-resource-definitions-crds","title":"Custom Resource Definitions (CRDs)","text":"<pre><code># crds/appraisal-crd.yaml\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: appraisalconfigs.crew-appraisals.io\nspec:\n  group: crew-appraisals.io\n  versions:\n  - name: v1\n    served: true\n    storage: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              reviewCycle:\n                type: string\n                enum: [\"monthly\", \"quarterly\", \"yearly\"]\n              autoReminder:\n                type: boolean\n              emailNotifications:\n                type: boolean\n  scope: Namespaced\n  names:\n    plural: appraisalconfigs\n    singular: appraisalconfig\n    kind: AppraisalConfig\n</code></pre>"},{"location":"deployment/k8s/helm/#service-mesh-integration-istio","title":"Service Mesh Integration (Istio)","text":"<pre><code># templates/virtualservice.yaml\n{{- if .Values.istio.enabled }}\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: {{ include \"crew-appraisals.fullname\" . }}\nspec:\n  hosts:\n  - crew-appraisals.example.com\n  gateways:\n  - {{ include \"crew-appraisals.fullname\" . }}-gateway\n  http:\n  - match:\n    - uri:\n        prefix: /api/\n    route:\n    - destination:\n        host: {{ include \"crew-appraisals.fullname\" . }}\n        port:\n          number: 80\n    timeout: 30s\n    retries:\n      attempts: 3\n      perTryTimeout: 10s\n{{- end }}\n</code></pre>"},{"location":"deployment/k8s/helm/#gitops-integration-argocd","title":"GitOps Integration (ArgoCD)","text":"<pre><code># argocd/application.yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: crew-appraisals-prod\n  namespace: argocd\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/your-org/crew-appraisals\n    targetRevision: main\n    path: helm\n    helm:\n      valueFiles:\n        - values-production.yaml\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: crew-appraisals-prod\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n    - CreateNamespace=true\n</code></pre>"},{"location":"deployment/k8s/helm/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/k8s/helm/#common-issues","title":"Common Issues","text":""},{"location":"deployment/k8s/helm/#pod-startup-issues","title":"Pod Startup Issues","text":"<pre><code># Check pod status\nkubectl get pods -n crew-appraisals-prod\n\n# Describe problematic pod\nkubectl describe pod &lt;pod-name&gt; -n crew-appraisals-prod\n\n# Check logs\nkubectl logs &lt;pod-name&gt; -n crew-appraisals-prod -f\n\n# Check events\nkubectl get events -n crew-appraisals-prod --sort-by='.lastTimestamp'\n</code></pre>"},{"location":"deployment/k8s/helm/#database-connection-issues","title":"Database Connection Issues","text":"<pre><code># Test database connectivity\nkubectl exec -it &lt;backend-pod&gt; -n crew-appraisals-prod -- python -c \"\nfrom src.core.database import engine\ntry:\n    with engine.connect() as conn:\n        print('Database connected successfully')\nexcept Exception as e:\n    print(f'Database connection failed: {e}')\n\"\n\n# Check PostgreSQL logs\nkubectl logs &lt;postgres-pod&gt; -n crew-appraisals-prod\n</code></pre>"},{"location":"deployment/k8s/helm/#ingress-issues","title":"Ingress Issues","text":"<pre><code># Check ingress configuration\nkubectl get ingress -n crew-appraisals-prod -o yaml\n\n# Check ingress controller logs\nkubectl logs -n ingress-nginx -l app.kubernetes.io/component=controller\n\n# Test DNS resolution\nnslookup crew-appraisals.example.com\n</code></pre>"},{"location":"deployment/k8s/helm/#performance-tuning","title":"Performance Tuning","text":""},{"location":"deployment/k8s/helm/#resource-optimization","title":"Resource Optimization","text":"<pre><code># Optimized resource requests/limits\nresources:\n  requests:\n    cpu: 100m      # Start small\n    memory: 128Mi   # Minimum required\n  limits:\n    cpu: 1000m     # Allow bursting\n    memory: 1Gi    # Prevent OOM kills\n</code></pre>"},{"location":"deployment/k8s/helm/#jvm-tuning-if-using-java","title":"JVM Tuning (if using Java)","text":"<pre><code>env:\n- name: JAVA_OPTS\n  value: \"-Xms512m -Xmx1g -XX:+UseG1GC -XX:+UseContainerSupport\"\n</code></pre>"},{"location":"deployment/k8s/helm/#monitoring-and-alerting","title":"Monitoring and Alerting","text":""},{"location":"deployment/k8s/helm/#prometheus-rules","title":"Prometheus Rules","text":"<pre><code># monitoring/rules.yaml\ngroups:\n- name: crew-appraisals\n  rules:\n  - alert: HighErrorRate\n    expr: rate(http_requests_total{status=~\"5..\"}[5m]) &gt; 0.1\n    for: 2m\n    annotations:\n      summary: \"High error rate detected\"\n\n  - alert: HighMemoryUsage\n    expr: container_memory_usage_bytes / container_spec_memory_limit_bytes &gt; 0.9\n    for: 5m\n    annotations:\n      summary: \"High memory usage detected\"\n</code></pre> <p>The Kubernetes deployment with Helm provides a robust, scalable foundation for running the Crew Appraisals System in production environments with high availability, automatic scaling, and comprehensive monitoring capabilities.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to the Crew Management API! This section will help you get up and running quickly.</p>"},{"location":"getting-started/#overview","title":"Overview","text":"<p>The Crew Management API provides comprehensive backend services for maritime crew management, including:</p> <ul> <li>Authentication &amp; Authorization - Secure JWT-based access control</li> <li>Crew Data Management - Complete CRUD operations for crew members</li> <li>Performance Appraisals - Structured evaluation workflows</li> <li>Vessel Assignments - Fleet and crew rotation management</li> <li>Certificate Tracking - Compliance and expiry monitoring</li> <li>AI/LLM Integration - MCP tools for automation</li> </ul>"},{"location":"getting-started/#quick-navigation","title":"Quick Navigation","text":"<ul> <li> <p> Quickstart</p> <p>5-minute guide to your first API call</p> </li> <li> <p> Installation</p> <p>Detailed setup instructions for all environments</p> </li> <li> <p> Configuration</p> <p>Environment variables and settings</p> </li> <li> <p> Authentication</p> <p>JWT tokens and session management</p> </li> <li> <p> First API Call</p> <p>Make your first successful request</p> </li> </ul>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":""},{"location":"getting-started/#required-software","title":"Required Software","text":"<ul> <li>Python 3.11+ - Primary backend language</li> <li>PostgreSQL 15+ - Main database</li> <li>Redis 7.0+ - Caching and sessions (optional)</li> <li>Docker - For containerized deployment (optional)</li> </ul>"},{"location":"getting-started/#recommended-tools","title":"Recommended Tools","text":"<ul> <li>Postman or Insomnia - API testing</li> <li>pgAdmin or DBeaver - Database management</li> <li>Git - Version control</li> <li>VS Code or PyCharm - IDE</li> </ul>"},{"location":"getting-started/#architecture-overview","title":"Architecture Overview","text":"<pre><code>sequenceDiagram\n    participant C as Client\n    participant A as API Gateway\n    participant Auth as Auth Service\n    participant DB as PostgreSQL\n    participant Cache as Redis\n\n    C-&gt;&gt;A: Request + JWT\n    A-&gt;&gt;Auth: Validate Token\n    Auth-&gt;&gt;Cache: Check Session\n    Cache--&gt;&gt;Auth: Session Valid\n    Auth--&gt;&gt;A: Authorized\n    A-&gt;&gt;DB: Query Data\n    DB--&gt;&gt;A: Return Results\n    A--&gt;&gt;C: JSON Response</code></pre>"},{"location":"getting-started/#development-workflow","title":"Development Workflow","text":""},{"location":"getting-started/#1-local-development","title":"1. Local Development","text":"<pre><code># Clone repository\ngit clone https://github.com/example/crewing-backend.git\ncd crewing-backend/backend\n\n# Create virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\npip install -r requirements-dev.txt\n\n# Run development server\nuvicorn src.main:app --reload\n</code></pre>"},{"location":"getting-started/#2-docker-development","title":"2. Docker Development","text":"<pre><code># Navigate to docker directory\ncd backend/docker\n\n# Start services\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f backend\n\n# Access at http://localhost:8000\n</code></pre>"},{"location":"getting-started/#3-testing","title":"3. Testing","text":"<pre><code># Run all tests\npytest tests/ -v\n\n# Run with coverage\npytest --cov=src --cov-report=html\n\n# Run specific test category\npytest tests/unit/ -v\npytest tests/integration/ -v\npytest tests/contract/ -v\n</code></pre>"},{"location":"getting-started/#api-base-urls","title":"API Base URLs","text":"Environment Base URL Purpose Local <code>http://localhost:8000</code> Local development Docker <code>http://localhost:8000</code> Containerized local Staging <code>https://api-staging.crewing.example.com</code> Testing environment Production <code>https://api.crewing.example.com</code> Live environment"},{"location":"getting-started/#response-format","title":"Response Format","text":"<p>All API responses follow a consistent JSON structure:</p>"},{"location":"getting-started/#success-response","title":"Success Response","text":"<pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    // Response data here\n  },\n  \"meta\": {\n    \"timestamp\": \"2024-01-15T10:30:00Z\",\n    \"version\": \"1.0.0\"\n  }\n}\n</code></pre>"},{"location":"getting-started/#error-response","title":"Error Response","text":"<pre><code>{\n  \"status\": \"error\",\n  \"error\": {\n    \"code\": \"AUTH_001\",\n    \"message\": \"Invalid credentials\",\n    \"details\": {\n      // Additional error context\n    }\n  },\n  \"meta\": {\n    \"timestamp\": \"2024-01-15T10:30:00Z\",\n    \"request_id\": \"req_12345\"\n  }\n}\n</code></pre>"},{"location":"getting-started/#rate-limiting","title":"Rate Limiting","text":"<p>The API implements rate limiting to ensure fair usage:</p> Endpoint Type Limit Window Authentication 5 requests 1 minute Read Operations 100 requests 1 minute Write Operations 50 requests 1 minute Bulk Operations 10 requests 1 minute"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ol> <li>Complete the Quickstart - Get your environment set up</li> <li>Configure your environment - Set up database and services</li> <li>Authenticate - Get your access token</li> <li>Make your first API call - Start using the API</li> <li>Explore the API Reference - Deep dive into endpoints</li> </ol>"},{"location":"getting-started/#support","title":"Support","text":""},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: You're here! Browse all sections</li> <li>API Reference: Interactive API docs</li> <li>GitHub Issues: Report bugs or request features</li> <li>Community: Join our Slack</li> </ul>"},{"location":"getting-started/#common-issues","title":"Common Issues","text":"<p>Database Connection</p> <p>If you encounter database connection errors, ensure PostgreSQL is running and the connection string in <code>.env</code> is correct.</p> <p>Port Already in Use</p> <p>If port 8000 is already in use, you can specify a different port: <pre><code>uvicorn src.main:app --reload --port 8001\n</code></pre></p> <p>Windows Users</p> <p>On Windows, use <code>venv\\Scripts\\activate</code> to activate the virtual environment and ensure PostgreSQL is installed via the official installer.</p>"},{"location":"getting-started/authentication/","title":"Authentication Guide","text":"<p>This comprehensive guide covers the authentication system of the Crew Appraisals Backend API, including JWT token flows, session management, and role-based access control.</p>"},{"location":"getting-started/authentication/#authentication-overview","title":"Authentication Overview","text":"<p>The API uses a dual-token authentication system:</p> <ul> <li>Access Tokens: Short-lived JWT tokens for API requests (default: 30 minutes)</li> <li>Refresh Tokens: Long-lived tokens to obtain new access tokens (default: 7 days)</li> <li>Sessions: Server-side session tracking for additional security</li> </ul>"},{"location":"getting-started/authentication/#authentication-flow","title":"Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant C as Client\n    participant API as API Server\n    participant DB as Database\n    participant R as Redis\n\n    C-&gt;&gt;API: POST /auth/login (credentials)\n    API-&gt;&gt;DB: Validate user credentials\n    DB--&gt;&gt;API: User data\n    API-&gt;&gt;DB: Create session record\n    API-&gt;&gt;R: Store session data\n    API--&gt;&gt;C: Access token + Refresh token\n\n    Note over C,API: Make authenticated requests\n    C-&gt;&gt;API: GET /api/v1/resource (Bearer token)\n    API-&gt;&gt;API: Validate access token\n    API-&gt;&gt;DB: Check session status\n    API--&gt;&gt;C: Protected resource data\n\n    Note over C,API: Token refresh\n    C-&gt;&gt;API: POST /auth/refresh (refresh token)\n    API-&gt;&gt;DB: Validate refresh token\n    API--&gt;&gt;C: New access token</code></pre>"},{"location":"getting-started/authentication/#token-structure","title":"Token Structure","text":""},{"location":"getting-started/authentication/#jwt-access-token","title":"JWT Access Token","text":"<p>The access token contains these claims:</p> <pre><code>{\n  \"sub\": \"550e8400-e29b-41d4-a716-446655440000\",  // User ID\n  \"username\": \"john.doe\",\n  \"email\": \"john.doe@example.com\",\n  \"role\": \"crew_member\",\n  \"session_id\": \"sess_550e8400-e29b-41d4-a716-446655440001\",\n  \"exp\": 1703887200,  // Expiration timestamp\n  \"iat\": 1703885400,  // Issued at timestamp\n  \"type\": \"access\"\n}\n</code></pre>"},{"location":"getting-started/authentication/#refresh-token","title":"Refresh Token","text":"<p>The refresh token is a secure random string linked to the session:</p> <pre><code>{\n  \"session_id\": \"sess_550e8400-e29b-41d4-a716-446655440001\",\n  \"user_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"exp\": 1704492000,  // Expiration timestamp\n  \"type\": \"refresh\"\n}\n</code></pre>"},{"location":"getting-started/authentication/#authentication-endpoints","title":"Authentication Endpoints","text":""},{"location":"getting-started/authentication/#user-registration","title":"User Registration","text":"<p>Create a new user account.</p>"},{"location":"getting-started/authentication/#request","title":"Request","text":"<pre><code>POST /api/v1/auth/register\nContent-Type: application/json\n\n{\n  \"username\": \"john.doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"securePassword123!\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"role\": \"crew_member\"\n}\n</code></pre>"},{"location":"getting-started/authentication/#response","title":"Response","text":"<pre><code>{\n  \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"username\": \"john.doe\",\n  \"email\": \"john.doe@example.com\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"role\": \"crew_member\",\n  \"is_active\": true\n}\n</code></pre>"},{"location":"getting-started/authentication/#code-examples","title":"Code Examples","text":"cURLPythonJavaScript <pre><code>curl -X POST \"http://localhost:8000/api/v1/auth/register\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"username\": \"john.doe\",\n       \"email\": \"john.doe@example.com\",\n       \"password\": \"securePassword123!\",\n       \"first_name\": \"John\",\n       \"last_name\": \"Doe\",\n       \"role\": \"crew_member\"\n     }'\n</code></pre> <pre><code>import requests\n\nresponse = requests.post(\n    \"http://localhost:8000/api/v1/auth/register\",\n    json={\n        \"username\": \"john.doe\",\n        \"email\": \"john.doe@example.com\",\n        \"password\": \"securePassword123!\",\n        \"first_name\": \"John\",\n        \"last_name\": \"Doe\",\n        \"role\": \"crew_member\"\n    }\n)\n\nif response.status_code == 201:\n    user_data = response.json()\n    print(f\"User created: {user_data['username']}\")\nelse:\n    print(f\"Registration failed: {response.text}\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/api/v1/auth/register', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    username: 'john.doe',\n    email: 'john.doe@example.com',\n    password: 'securePassword123!',\n    first_name: 'John',\n    last_name: 'Doe',\n    role: 'crew_member'\n  })\n});\n\nif (response.ok) {\n  const userData = await response.json();\n  console.log('User created:', userData.username);\n} else {\n  const error = await response.text();\n  console.error('Registration failed:', error);\n}\n</code></pre>"},{"location":"getting-started/authentication/#user-login","title":"User Login","text":"<p>Authenticate and receive access and refresh tokens.</p>"},{"location":"getting-started/authentication/#request_1","title":"Request","text":"<pre><code>POST /api/v1/auth/login\nContent-Type: application/json\n\n{\n  \"username\": \"john.doe\",\n  \"password\": \"securePassword123!\"\n}\n</code></pre>"},{"location":"getting-started/authentication/#response_1","title":"Response","text":"<pre><code>{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"refresh_token\": \"550e8400-e29b-41d4-a716-446655440002\",\n  \"token_type\": \"bearer\",\n  \"expires_in\": 1800,\n  \"user\": {\n    \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"username\": \"john.doe\",\n    \"email\": \"john.doe@example.com\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"role\": \"crew_member\",\n    \"is_active\": true\n  },\n  \"session\": {\n    \"id\": \"sess_550e8400-e29b-41d4-a716-446655440001\",\n    \"created_at\": \"2023-12-29T14:30:00Z\",\n    \"expires_at\": \"2023-12-30T14:30:00Z\",\n    \"ip_address\": \"192.168.1.100\",\n    \"user_agent\": \"Mozilla/5.0...\"\n  }\n}\n</code></pre>"},{"location":"getting-started/authentication/#code-examples_1","title":"Code Examples","text":"cURLPythonJavaScript <pre><code>curl -X POST \"http://localhost:8000/api/v1/auth/login\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"username\": \"john.doe\",\n       \"password\": \"securePassword123!\"\n     }'\n</code></pre> <pre><code>import requests\n\nresponse = requests.post(\n    \"http://localhost:8000/api/v1/auth/login\",\n    json={\n        \"username\": \"john.doe\",\n        \"password\": \"securePassword123!\"\n    }\n)\n\nif response.status_code == 200:\n    auth_data = response.json()\n    access_token = auth_data[\"access_token\"]\n    refresh_token = auth_data[\"refresh_token\"]\n\n    print(f\"Login successful!\")\n    print(f\"Access token: {access_token[:50]}...\")\n\n    # Store tokens securely\n    # (In production, use secure storage)\n    return access_token, refresh_token\nelse:\n    print(f\"Login failed: {response.text}\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/api/v1/auth/login', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    username: 'john.doe',\n    password: 'securePassword123!'\n  })\n});\n\nif (response.ok) {\n  const authData = await response.json();\n  const { access_token, refresh_token } = authData;\n\n  // Store tokens securely (consider using httpOnly cookies)\n  localStorage.setItem('access_token', access_token);\n  localStorage.setItem('refresh_token', refresh_token);\n\n  console.log('Login successful!');\n  return authData;\n} else {\n  const error = await response.text();\n  console.error('Login failed:', error);\n}\n</code></pre>"},{"location":"getting-started/authentication/#making-authenticated-requests","title":"Making Authenticated Requests","text":"<p>Include the access token in the <code>Authorization</code> header for protected endpoints.</p>"},{"location":"getting-started/authentication/#header-format","title":"Header Format","text":"<pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre>"},{"location":"getting-started/authentication/#example-request","title":"Example Request","text":"<pre><code>GET /api/v1/auth/me\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre>"},{"location":"getting-started/authentication/#code-examples_2","title":"Code Examples","text":"cURLPythonJavaScript <pre><code># Replace YOUR_ACCESS_TOKEN with the actual token from login\ncurl -X GET \"http://localhost:8000/api/v1/auth/me\" \\\n     -H \"Authorization: Bearer YOUR_ACCESS_TOKEN\"\n</code></pre> <pre><code>import requests\n\n# Assuming you have the access_token from login\nheaders = {\n    \"Authorization\": f\"Bearer {access_token}\"\n}\n\nresponse = requests.get(\n    \"http://localhost:8000/api/v1/auth/me\",\n    headers=headers\n)\n\nif response.status_code == 200:\n    user_info = response.json()\n    print(f\"Current user: {user_info['username']}\")\nelif response.status_code == 401:\n    print(\"Token expired or invalid\")\n    # Implement token refresh logic\nelse:\n    print(f\"Request failed: {response.text}\")\n</code></pre> <pre><code>// Get token from storage\nconst accessToken = localStorage.getItem('access_token');\n\nconst response = await fetch('http://localhost:8000/api/v1/auth/me', {\n  headers: {\n    'Authorization': `Bearer ${accessToken}`\n  }\n});\n\nif (response.ok) {\n  const userInfo = await response.json();\n  console.log('Current user:', userInfo.username);\n} else if (response.status === 401) {\n  console.log('Token expired, refreshing...');\n  // Implement token refresh logic\n} else {\n  console.error('Request failed:', await response.text());\n}\n</code></pre>"},{"location":"getting-started/authentication/#token-refresh","title":"Token Refresh","text":"<p>When the access token expires, use the refresh token to obtain a new access token.</p>"},{"location":"getting-started/authentication/#request_2","title":"Request","text":"<pre><code>POST /api/v1/auth/refresh\nContent-Type: application/json\n\n{\n  \"refresh_token\": \"550e8400-e29b-41d4-a716-446655440002\"\n}\n</code></pre>"},{"location":"getting-started/authentication/#response_2","title":"Response","text":"<pre><code>{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"refresh_token\": \"550e8400-e29b-41d4-a716-446655440003\",\n  \"token_type\": \"bearer\",\n  \"expires_in\": 1800\n}\n</code></pre>"},{"location":"getting-started/authentication/#automatic-token-refresh","title":"Automatic Token Refresh","text":"PythonJavaScript <pre><code>import requests\nfrom datetime import datetime, timedelta\nimport jwt\n\nclass APIClient:\n    def __init__(self, base_url, username, password):\n        self.base_url = base_url\n        self.access_token = None\n        self.refresh_token = None\n        self.login(username, password)\n\n    def login(self, username, password):\n        \"\"\"Initial login\"\"\"\n        response = requests.post(\n            f\"{self.base_url}/api/v1/auth/login\",\n            json={\"username\": username, \"password\": password}\n        )\n\n        if response.status_code == 200:\n            data = response.json()\n            self.access_token = data[\"access_token\"]\n            self.refresh_token = data[\"refresh_token\"]\n        else:\n            raise Exception(f\"Login failed: {response.text}\")\n\n    def refresh_access_token(self):\n        \"\"\"Refresh the access token\"\"\"\n        response = requests.post(\n            f\"{self.base_url}/api/v1/auth/refresh\",\n            json={\"refresh_token\": self.refresh_token}\n        )\n\n        if response.status_code == 200:\n            data = response.json()\n            self.access_token = data[\"access_token\"]\n            self.refresh_token = data[\"refresh_token\"]\n            return True\n        return False\n\n    def is_token_expired(self):\n        \"\"\"Check if access token is expired\"\"\"\n        if not self.access_token:\n            return True\n\n        try:\n            # Decode without verification to check expiry\n            payload = jwt.decode(\n                self.access_token,\n                options={\"verify_signature\": False}\n            )\n            exp = payload.get('exp', 0)\n            return datetime.utcnow().timestamp() &gt;= exp\n        except:\n            return True\n\n    def make_request(self, method, endpoint, **kwargs):\n        \"\"\"Make authenticated request with automatic token refresh\"\"\"\n        if self.is_token_expired():\n            if not self.refresh_access_token():\n                raise Exception(\"Unable to refresh token\")\n\n        headers = kwargs.get('headers', {})\n        headers['Authorization'] = f'Bearer {self.access_token}'\n        kwargs['headers'] = headers\n\n        response = requests.request(method, f\"{self.base_url}{endpoint}\", **kwargs)\n\n        # Retry once with token refresh if 401\n        if response.status_code == 401:\n            if self.refresh_access_token():\n                headers['Authorization'] = f'Bearer {self.access_token}'\n                response = requests.request(method, f\"{self.base_url}{endpoint}\", **kwargs)\n\n        return response\n\n# Usage example\nclient = APIClient(\"http://localhost:8000\", \"john.doe\", \"password123\")\nresponse = client.make_request(\"GET\", \"/api/v1/auth/me\")\n</code></pre> <pre><code>class APIClient {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl;\n    this.accessToken = localStorage.getItem('access_token');\n    this.refreshToken = localStorage.getItem('refresh_token');\n  }\n\n  async login(username, password) {\n    const response = await fetch(`${this.baseUrl}/api/v1/auth/login`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, password })\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      this.accessToken = data.access_token;\n      this.refreshToken = data.refresh_token;\n\n      localStorage.setItem('access_token', this.accessToken);\n      localStorage.setItem('refresh_token', this.refreshToken);\n    } else {\n      throw new Error(`Login failed: ${await response.text()}`);\n    }\n  }\n\n  async refreshAccessToken() {\n    const response = await fetch(`${this.baseUrl}/api/v1/auth/refresh`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ refresh_token: this.refreshToken })\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      this.accessToken = data.access_token;\n      this.refreshToken = data.refresh_token;\n\n      localStorage.setItem('access_token', this.accessToken);\n      localStorage.setItem('refresh_token', this.refreshToken);\n      return true;\n    }\n    return false;\n  }\n\n  isTokenExpired() {\n    if (!this.accessToken) return true;\n\n    try {\n      const payload = JSON.parse(atob(this.accessToken.split('.')[1]));\n      return Date.now() / 1000 &gt;= payload.exp;\n    } catch {\n      return true;\n    }\n  }\n\n  async makeRequest(endpoint, options = {}) {\n    if (this.isTokenExpired()) {\n      if (!(await this.refreshAccessToken())) {\n        throw new Error('Unable to refresh token');\n      }\n    }\n\n    const headers = {\n      'Authorization': `Bearer ${this.accessToken}`,\n      ...options.headers\n    };\n\n    let response = await fetch(`${this.baseUrl}${endpoint}`, {\n      ...options,\n      headers\n    });\n\n    // Retry once with token refresh if 401\n    if (response.status === 401) {\n      if (await this.refreshAccessToken()) {\n        headers['Authorization'] = `Bearer ${this.accessToken}`;\n        response = await fetch(`${this.baseUrl}${endpoint}`, {\n          ...options,\n          headers\n        });\n      }\n    }\n\n    return response;\n  }\n}\n\n// Usage example\nconst client = new APIClient('http://localhost:8000');\nconst response = await client.makeRequest('/api/v1/auth/me');\n</code></pre>"},{"location":"getting-started/authentication/#session-management","title":"Session Management","text":"<p>Sessions provide additional security by allowing server-side session invalidation.</p>"},{"location":"getting-started/authentication/#get-current-session-info","title":"Get Current Session Info","text":"<pre><code>GET /api/v1/auth/session\nAuthorization: Bearer &lt;access_token&gt;\n</code></pre> <p>Response: <pre><code>{\n  \"id\": \"sess_550e8400-e29b-41d4-a716-446655440001\",\n  \"user_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"created_at\": \"2023-12-29T14:30:00Z\",\n  \"expires_at\": \"2023-12-30T14:30:00Z\",\n  \"last_activity\": \"2023-12-29T16:45:00Z\",\n  \"ip_address\": \"192.168.1.100\",\n  \"user_agent\": \"Mozilla/5.0...\",\n  \"is_active\": true\n}\n</code></pre></p>"},{"location":"getting-started/authentication/#logout-invalidate-session","title":"Logout (Invalidate Session)","text":"<pre><code>POST /api/v1/auth/logout\nAuthorization: Bearer &lt;access_token&gt;\n</code></pre> <p>Response: <pre><code>{\n  \"success\": true,\n  \"message\": \"Logged out successfully\"\n}\n</code></pre></p>"},{"location":"getting-started/authentication/#code-examples_3","title":"Code Examples","text":"PythonJavaScript <pre><code># Get session info\nresponse = requests.get(\n    \"http://localhost:8000/api/v1/auth/session\",\n    headers={\"Authorization\": f\"Bearer {access_token}\"}\n)\n\nif response.status_code == 200:\n    session_info = response.json()\n    print(f\"Session expires at: {session_info['expires_at']}\")\n\n# Logout\nresponse = requests.post(\n    \"http://localhost:8000/api/v1/auth/logout\",\n    headers={\"Authorization\": f\"Bearer {access_token}\"}\n)\n\nif response.status_code == 200:\n    print(\"Logged out successfully\")\n    # Clear stored tokens\n    access_token = None\n    refresh_token = None\n</code></pre> <pre><code>// Get session info\nlet response = await fetch('http://localhost:8000/api/v1/auth/session', {\n  headers: {\n    'Authorization': `Bearer ${accessToken}`\n  }\n});\n\nif (response.ok) {\n  const sessionInfo = await response.json();\n  console.log('Session expires at:', sessionInfo.expires_at);\n}\n\n// Logout\nresponse = await fetch('http://localhost:8000/api/v1/auth/logout', {\n  method: 'POST',\n  headers: {\n    'Authorization': `Bearer ${accessToken}`\n  }\n});\n\nif (response.ok) {\n  console.log('Logged out successfully');\n  // Clear stored tokens\n  localStorage.removeItem('access_token');\n  localStorage.removeItem('refresh_token');\n}\n</code></pre>"},{"location":"getting-started/authentication/#role-based-access-control","title":"Role-Based Access Control","text":"<p>The API supports role-based access control with the following roles:</p>"},{"location":"getting-started/authentication/#available-roles","title":"Available Roles","text":"Role Description Permissions <code>admin</code> System administrator Full access to all resources <code>hr_manager</code> HR department manager Manage crew members, appraisals <code>vessel_manager</code> Vessel operations manager Manage vessel assignments <code>crew_member</code> Regular crew member View own data, submit forms"},{"location":"getting-started/authentication/#role-hierarchy","title":"Role Hierarchy","text":"<pre><code>admin\n\u251c\u2500\u2500 hr_manager\n\u2502   \u251c\u2500\u2500 vessel_manager\n\u2502   \u2514\u2500\u2500 crew_member\n\u2514\u2500\u2500 crew_member\n</code></pre>"},{"location":"getting-started/authentication/#checking-user-permissions","title":"Checking User Permissions","text":"<p>The user's role is included in the JWT token and user response:</p> <pre><code>{\n  \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"username\": \"john.doe\",\n  \"role\": \"crew_member\",\n  // ... other fields\n}\n</code></pre>"},{"location":"getting-started/authentication/#protected-endpoints","title":"Protected Endpoints","text":"<p>Some endpoints require specific roles:</p> <pre><code># Admin only\nGET /api/v1/admin/users\nPOST /api/v1/admin/users/{id}/deactivate\n\n# HR Manager or Admin\nGET /api/v1/crew-members\nPOST /api/v1/appraisals\n\n# Vessel Manager, HR Manager, or Admin\nGET /api/v1/vessels\nPOST /api/v1/vessel-assignments\n\n# Any authenticated user\nGET /api/v1/auth/me\nPOST /api/v1/forms/{id}/submit\n</code></pre>"},{"location":"getting-started/authentication/#error-handling","title":"Error Handling","text":""},{"location":"getting-started/authentication/#common-authentication-errors","title":"Common Authentication Errors","text":""},{"location":"getting-started/authentication/#401-unauthorized","title":"401 Unauthorized","text":"<pre><code>{\n  \"detail\": \"Invalid credentials\"\n}\n</code></pre> <p>Causes: - Wrong username/password - Expired access token - Invalid token format - Missing Authorization header</p>"},{"location":"getting-started/authentication/#403-forbidden","title":"403 Forbidden","text":"<pre><code>{\n  \"detail\": \"Insufficient permissions\"\n}\n</code></pre> <p>Causes: - User role doesn't have required permissions - Account is deactivated - Session is invalidated</p>"},{"location":"getting-started/authentication/#409-conflict-registration","title":"409 Conflict (Registration)","text":"<pre><code>{\n  \"detail\": \"Username already exists\"\n}\n</code></pre> <p>Causes: - Username already taken - Email already registered</p>"},{"location":"getting-started/authentication/#error-handling-examples","title":"Error Handling Examples","text":"PythonJavaScript <pre><code>import requests\nfrom requests.exceptions import RequestException\n\ndef handle_auth_request(url, **kwargs):\n    try:\n        response = requests.request(**kwargs)\n\n        if response.status_code == 200:\n            return response.json()\n        elif response.status_code == 401:\n            error = response.json()\n            if \"expired\" in error.get(\"detail\", \"\").lower():\n                print(\"Token expired, please refresh\")\n                # Trigger token refresh\n            else:\n                print(\"Authentication failed\")\n                # Redirect to login\n        elif response.status_code == 403:\n            print(\"Access denied - insufficient permissions\")\n        elif response.status_code == 409:\n            print(\"Registration failed - user already exists\")\n        else:\n            print(f\"Request failed: {response.status_code} - {response.text}\")\n\n    except RequestException as e:\n        print(f\"Network error: {e}\")\n\n    return None\n</code></pre> <pre><code>async function handleAuthRequest(url, options = {}) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.ok) {\n      return await response.json();\n    } else if (response.status === 401) {\n      const error = await response.json();\n      if (error.detail?.toLowerCase().includes('expired')) {\n        console.log('Token expired, refreshing...');\n        // Trigger token refresh\n      } else {\n        console.log('Authentication failed');\n        // Redirect to login\n      }\n    } else if (response.status === 403) {\n      console.log('Access denied - insufficient permissions');\n    } else if (response.status === 409) {\n      console.log('Registration failed - user already exists');\n    } else {\n      console.log(`Request failed: ${response.status} - ${await response.text()}`);\n    }\n  } catch (error) {\n    console.error('Network error:', error);\n  }\n\n  return null;\n}\n</code></pre>"},{"location":"getting-started/authentication/#security-best-practices","title":"Security Best Practices","text":""},{"location":"getting-started/authentication/#token-storage","title":"Token Storage","text":"<p>Security Considerations</p> <ul> <li>Never store tokens in localStorage in production - use httpOnly cookies</li> <li>Use secure, encrypted storage for mobile apps</li> <li>Implement proper CSRF protection when using cookies</li> </ul> Browser (Secure)Browser (Development)Mobile/Native <pre><code>// Use httpOnly cookies (requires backend cookie handling)\n// This is the most secure approach for web applications\n</code></pre> <pre><code>// Only for development - not secure for production\nlocalStorage.setItem('access_token', token);\nsessionStorage.setItem('access_token', token);  // Better - cleared on tab close\n</code></pre> <pre><code># Use secure storage libraries\n# iOS: Keychain\n# Android: Android Keystore\n# React Native: react-native-keychain\n</code></pre>"},{"location":"getting-started/authentication/#token-validation","title":"Token Validation","text":"<p>Always validate tokens on the server side:</p> <pre><code>from jose import JWTError, jwt\nfrom datetime import datetime\n\ndef validate_access_token(token: str) -&gt; dict:\n    try:\n        payload = jwt.decode(\n            token,\n            settings.SECRET_KEY,\n            algorithms=[settings.ALGORITHM]\n        )\n\n        # Check expiration\n        if datetime.utcnow().timestamp() &gt; payload.get('exp', 0):\n            raise JWTError(\"Token expired\")\n\n        # Verify token type\n        if payload.get('type') != 'access':\n            raise JWTError(\"Invalid token type\")\n\n        return payload\n\n    except JWTError:\n        raise HTTPException(status_code=401, detail=\"Invalid token\")\n</code></pre>"},{"location":"getting-started/authentication/#rate-limiting","title":"Rate Limiting","text":"<p>The API implements rate limiting on authentication endpoints:</p> <ul> <li>Login attempts: 5 per minute per IP</li> <li>Registration: 3 per minute per IP</li> <li>Token refresh: 10 per minute per user</li> </ul>"},{"location":"getting-started/authentication/#password-requirements","title":"Password Requirements","text":"<p>When registering users, passwords must meet these requirements:</p> <ul> <li>Minimum 8 characters</li> <li>At least one uppercase letter</li> <li>At least one lowercase letter</li> <li>At least one number</li> <li>At least one special character</li> </ul>"},{"location":"getting-started/authentication/#integration-examples","title":"Integration Examples","text":""},{"location":"getting-started/authentication/#reactjs-integration","title":"React.js Integration","text":"<pre><code>import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () =&gt; useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) =&gt; {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const login = async (username, password) =&gt; {\n    try {\n      const response = await fetch('/api/v1/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setUser(data.user);\n        // Store tokens securely (consider httpOnly cookies)\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    }\n  };\n\n  const logout = async () =&gt; {\n    try {\n      await fetch('/api/v1/auth/logout', {\n        method: 'POST',\n        headers: { 'Authorization': `Bearer ${accessToken}` }\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setUser(null);\n      // Clear stored tokens\n    }\n  };\n\n  const value = {\n    user,\n    login,\n    logout,\n    loading\n  };\n\n  return (\n    &lt;AuthContext.Provider value={value}&gt;\n      {children}\n    &lt;/AuthContext.Provider&gt;\n  );\n};\n</code></pre>"},{"location":"getting-started/authentication/#vuejs-integration","title":"Vue.js Integration","text":"<pre><code>// auth.js\nimport { ref, computed } from 'vue';\n\nconst user = ref(null);\nconst accessToken = ref(localStorage.getItem('access_token'));\n\nexport const useAuth = () =&gt; {\n  const isAuthenticated = computed(() =&gt; !!user.value);\n\n  const login = async (credentials) =&gt; {\n    try {\n      const response = await fetch('/api/v1/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(credentials)\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        user.value = data.user;\n        accessToken.value = data.access_token;\n        localStorage.setItem('access_token', data.access_token);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Login failed:', error);\n      return false;\n    }\n  };\n\n  const logout = async () =&gt; {\n    try {\n      if (accessToken.value) {\n        await fetch('/api/v1/auth/logout', {\n          method: 'POST',\n          headers: { 'Authorization': `Bearer ${accessToken.value}` }\n        });\n      }\n    } finally {\n      user.value = null;\n      accessToken.value = null;\n      localStorage.removeItem('access_token');\n    }\n  };\n\n  return {\n    user: readonly(user),\n    isAuthenticated,\n    login,\n    logout\n  };\n};\n</code></pre>"},{"location":"getting-started/authentication/#next-steps","title":"Next Steps","text":"<p>Now that you understand the authentication system:</p> <ol> <li>\ud83d\ude80 Try the First API Call Tutorial with authentication</li> <li>\ud83d\udcd6 Review the Configuration Guide for security settings</li> <li>\ud83d\udcda Explore the interactive API docs at <code>http://localhost:8000/docs</code></li> </ol> <p>Authentication Mastery</p> <p>You're now ready to securely integrate with the Crew Appraisals Backend API! \ud83d\udd10</p>"},{"location":"getting-started/configuration/","title":"Configuration Guide","text":"<p>This guide covers all configuration options for the Crew Appraisals Backend API. The application uses environment variables and Pydantic Settings for configuration management.</p>"},{"location":"getting-started/configuration/#configuration-overview","title":"Configuration Overview","text":"<p>The application configuration is managed through:</p> <ul> <li>Environment variables: Primary configuration method</li> <li><code>.env</code> file: Local development configuration</li> <li>Default values: Built-in fallbacks for development</li> </ul> <p>All configuration is defined in <code>src/core/config.py</code> using Pydantic Settings.</p>"},{"location":"getting-started/configuration/#environment-file-setup","title":"Environment File Setup","text":""},{"location":"getting-started/configuration/#creating-the-environment-file","title":"Creating the Environment File","text":"<pre><code># Copy the example file\ncp .env.example .env\n\n# Edit with your preferred editor\nnano .env  # or vim .env, code .env\n</code></pre>"},{"location":"getting-started/configuration/#environment-file-structure","title":"Environment File Structure","text":"<pre><code># Database Configuration\nDATABASE_URL=postgresql+asyncpg://crew_user:crew_pass@localhost:5432/crew_appraisals\nDATABASE_POOL_SIZE=20\nDATABASE_MAX_OVERFLOW=40\nDATABASE_POOL_TIMEOUT=30\n\n# Redis Configuration\nREDIS_URL=redis://localhost:6379/0\nREDIS_POOL_SIZE=10\n\n# Security\nSECRET_KEY=dev-secret-key-change-in-production-to-something-really-secret\nALGORITHM=HS256\nACCESS_TOKEN_EXPIRE_MINUTES=30\nSESSION_EXPIRE_HOURS=24\n\n# FastAPI Configuration\nAPP_NAME=Crew Appraisals Backend\nAPP_VERSION=1.0.0\nAPI_V1_PREFIX=/api/v1\nDEBUG=True\nENVIRONMENT=development\nLOG_LEVEL=DEBUG\n\n# CORS Configuration\nCORS_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:8080\nCORS_ALLOW_CREDENTIALS=True\nCORS_ALLOW_METHODS=*\nCORS_ALLOW_HEADERS=*\n\n# Additional configuration sections...\n</code></pre>"},{"location":"getting-started/configuration/#configuration-categories","title":"Configuration Categories","text":""},{"location":"getting-started/configuration/#database-configuration","title":"Database Configuration","text":"<p>Configure PostgreSQL connection and pool settings.</p> Variable Default Description <code>DATABASE_URL</code> <code>postgresql+asyncpg://crew_user:crew_pass@localhost:5432/crew_appraisals</code> PostgreSQL connection string <code>DATABASE_POOL_SIZE</code> <code>20</code> Connection pool size <code>DATABASE_MAX_OVERFLOW</code> <code>40</code> Maximum overflow connections <code>DATABASE_POOL_TIMEOUT</code> <code>30</code> Pool timeout in seconds"},{"location":"getting-started/configuration/#database-url-format","title":"Database URL Format","text":"<pre><code># Standard format\nDATABASE_URL=postgresql+asyncpg://username:password@host:port/database\n\n# Examples for different environments\nDATABASE_URL=postgresql+asyncpg://crew_user:crew_pass@localhost:5432/crew_appraisals  # Local\nDATABASE_URL=postgresql+asyncpg://user:pass@db.example.com:5432/prod_db  # Production\nDATABASE_URL=postgresql+asyncpg://user:pass@postgres:5432/crew_appraisals  # Docker\n</code></pre> <p>Database Security</p> <p>Never commit database credentials to version control. Use environment-specific configurations.</p>"},{"location":"getting-started/configuration/#connection-pool-tuning","title":"Connection Pool Tuning","text":"<p>For production environments, adjust pool settings based on your workload:</p> <pre><code># High traffic applications\nDATABASE_POOL_SIZE=50\nDATABASE_MAX_OVERFLOW=100\nDATABASE_POOL_TIMEOUT=60\n\n# Low traffic applications\nDATABASE_POOL_SIZE=5\nDATABASE_MAX_OVERFLOW=10\nDATABASE_POOL_TIMEOUT=10\n</code></pre>"},{"location":"getting-started/configuration/#redis-configuration","title":"Redis Configuration","text":"<p>Configure Redis for session management and caching.</p> Variable Default Description <code>REDIS_URL</code> <code>redis://localhost:6379/0</code> Redis connection URL <code>REDIS_POOL_SIZE</code> <code>10</code> Redis connection pool size"},{"location":"getting-started/configuration/#redis-url-examples","title":"Redis URL Examples","text":"<pre><code># Local Redis\nREDIS_URL=redis://localhost:6379/0\n\n# Redis with password\nREDIS_URL=redis://:password@localhost:6379/0\n\n# Redis cluster\nREDIS_URL=redis://user:pass@redis.example.com:6379/1\n\n# Redis over SSL\nREDIS_URL=rediss://user:pass@redis.example.com:6380/0\n\n# Docker Redis\nREDIS_URL=redis://redis:6379/0\n</code></pre> <p>Redis Optional</p> <p>Redis is optional but recommended. The application will work without Redis, but sessions will be stored in the database only.</p>"},{"location":"getting-started/configuration/#security-configuration","title":"Security Configuration","text":"<p>Critical security settings for authentication and authorization.</p> Variable Default Description <code>SECRET_KEY</code> <code>dev-secret-key-change-in-production</code> JWT signing key <code>ALGORITHM</code> <code>HS256</code> JWT algorithm <code>ACCESS_TOKEN_EXPIRE_MINUTES</code> <code>30</code> Access token lifetime <code>REFRESH_TOKEN_EXPIRE_DAYS</code> <code>7</code> Refresh token lifetime <code>SESSION_EXPIRE_HOURS</code> <code>24</code> Session lifetime"},{"location":"getting-started/configuration/#generating-secure-keys","title":"Generating Secure Keys","text":"<p>Production Security</p> <p>ALWAYS change the <code>SECRET_KEY</code> in production environments!</p> <p>Generate a secure secret key:</p> <pre><code># Method 1: Using Python\npython -c \"import secrets; print(secrets.token_urlsafe(32))\"\n\n# Method 2: Using OpenSSL\nopenssl rand -hex 32\n\n# Method 3: Using /dev/urandom\nhead -c 32 /dev/urandom | base64\n</code></pre>"},{"location":"getting-started/configuration/#token-lifetime-configuration","title":"Token Lifetime Configuration","text":"<pre><code># Short-lived tokens (high security)\nACCESS_TOKEN_EXPIRE_MINUTES=15\nREFRESH_TOKEN_EXPIRE_DAYS=1\nSESSION_EXPIRE_HOURS=8\n\n# Long-lived tokens (convenience)\nACCESS_TOKEN_EXPIRE_MINUTES=60\nREFRESH_TOKEN_EXPIRE_DAYS=30\nSESSION_EXPIRE_HOURS=72\n</code></pre>"},{"location":"getting-started/configuration/#fastapi-configuration","title":"FastAPI Configuration","text":"<p>Core application settings.</p> Variable Default Description <code>APP_NAME</code> <code>Crew Appraisals Backend</code> Application name <code>APP_VERSION</code> <code>1.0.0</code> Application version <code>API_V1_PREFIX</code> <code>/api/v1</code> API version prefix <code>DEBUG</code> <code>False</code> Debug mode <code>ENVIRONMENT</code> <code>development</code> Environment name <code>LOG_LEVEL</code> <code>INFO</code> Logging level"},{"location":"getting-started/configuration/#environment-specific-settings","title":"Environment-Specific Settings","text":"DevelopmentProductionTesting <pre><code>DEBUG=True\nENVIRONMENT=development\nLOG_LEVEL=DEBUG\nENABLE_DOCS=True\n</code></pre> <pre><code>DEBUG=False\nENVIRONMENT=production\nLOG_LEVEL=WARNING\nENABLE_DOCS=False\n</code></pre> <pre><code>DEBUG=True\nENVIRONMENT=testing\nLOG_LEVEL=DEBUG\nDATABASE_URL=postgresql+asyncpg://test_user:test_pass@localhost:5432/test_db\n</code></pre>"},{"location":"getting-started/configuration/#cors-configuration","title":"CORS Configuration","text":"<p>Cross-Origin Resource Sharing settings for frontend integration.</p> Variable Default Description <code>CORS_ORIGINS</code> <code>http://localhost:3000,http://localhost:5173</code> Allowed origins <code>CORS_ALLOW_CREDENTIALS</code> <code>True</code> Allow credentials <code>CORS_ALLOW_METHODS</code> <code>*</code> Allowed HTTP methods <code>CORS_ALLOW_HEADERS</code> <code>*</code> Allowed headers"},{"location":"getting-started/configuration/#cors-examples","title":"CORS Examples","text":"<pre><code># Development (multiple frontends)\nCORS_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:8080\n\n# Production (specific domains)\nCORS_ORIGINS=https://app.example.com,https://admin.example.com\n\n# Staging environment\nCORS_ORIGINS=https://staging.example.com,https://preview.example.com\n</code></pre> <p>CORS Security</p> <p>In production, specify exact domains instead of using wildcards (<code>*</code>).</p>"},{"location":"getting-started/configuration/#mcp-model-context-protocol-configuration","title":"MCP (Model Context Protocol) Configuration","text":"<p>Configure FASTMCP integration for AI/LLM features.</p> Variable Default Description <code>MCP_ENABLED</code> <code>True</code> Enable MCP integration <code>MCP_PATH</code> <code>/mcp</code> MCP endpoint path <code>MCP_NAME</code> <code>crew-appraisals-mcp</code> MCP server name <code>MCP_DESCRIPTION</code> <code>LLM interface for crew management system</code> MCP description <code>MCP_VERSION</code> <code>1.0.0</code> MCP version"},{"location":"getting-started/configuration/#disabling-mcp","title":"Disabling MCP","text":"<p>To disable MCP features:</p> <pre><code>MCP_ENABLED=False\n</code></pre>"},{"location":"getting-started/configuration/#external-services-configuration","title":"External Services Configuration","text":"<p>Configure external API integrations.</p>"},{"location":"getting-started/configuration/#openai-configuration","title":"OpenAI Configuration","text":"Variable Default Description <code>OPENAI_API_KEY</code> <code>None</code> OpenAI API key <code>OPENAI_MODEL</code> <code>gpt-4</code> OpenAI model <code>OPENAI_MAX_TOKENS</code> <code>500</code> Maximum tokens <code>OPENAI_TEMPERATURE</code> <code>0.3</code> Model temperature <pre><code># OpenAI configuration example\nOPENAI_API_KEY=sk-proj-xxxxxxxxxxxxxxxxx\nOPENAI_MODEL=gpt-4-turbo-preview\nOPENAI_MAX_TOKENS=1000\nOPENAI_TEMPERATURE=0.7\n</code></pre>"},{"location":"getting-started/configuration/#performance-configuration","title":"Performance Configuration","text":"<p>Tune application performance settings.</p> Variable Default Description <code>MAX_WORKERS</code> <code>4</code> Maximum worker processes <code>KEEPALIVE</code> <code>5</code> Keep-alive timeout <code>REQUEST_TIMEOUT</code> <code>60</code> Request timeout seconds"},{"location":"getting-started/configuration/#worker-configuration","title":"Worker Configuration","text":"<pre><code># High-performance server (8+ cores)\nMAX_WORKERS=16\nKEEPALIVE=30\nREQUEST_TIMEOUT=120\n\n# Low-resource server (2 cores)\nMAX_WORKERS=2\nKEEPALIVE=5\nREQUEST_TIMEOUT=30\n\n# Development (single worker for debugging)\nMAX_WORKERS=1\nKEEPALIVE=5\nREQUEST_TIMEOUT=60\n</code></pre>"},{"location":"getting-started/configuration/#monitoring-configuration","title":"Monitoring Configuration","text":"<p>Configure metrics and tracing.</p> Variable Default Description <code>ENABLE_METRICS</code> <code>True</code> Enable Prometheus metrics <code>METRICS_PATH</code> <code>/metrics</code> Metrics endpoint <code>ENABLE_TRACING</code> <code>False</code> Enable distributed tracing <code>JAEGER_AGENT_HOST</code> <code>localhost</code> Jaeger agent host <code>JAEGER_AGENT_PORT</code> <code>6831</code> Jaeger agent port"},{"location":"getting-started/configuration/#monitoring-setup","title":"Monitoring Setup","text":"<pre><code># Enable full monitoring\nENABLE_METRICS=True\nMETRICS_PATH=/metrics\nENABLE_TRACING=True\nJAEGER_AGENT_HOST=jaeger\nJAEGER_AGENT_PORT=6831\n</code></pre>"},{"location":"getting-started/configuration/#rate-limiting-configuration","title":"Rate Limiting Configuration","text":"<p>Configure API rate limiting.</p> Variable Default Description <code>RATE_LIMIT_ENABLED</code> <code>True</code> Enable rate limiting <code>RATE_LIMIT_PER_MINUTE</code> <code>60</code> Requests per minute <code>RATE_LIMIT_BURST</code> <code>10</code> Burst limit"},{"location":"getting-started/configuration/#rate-limiting-examples","title":"Rate Limiting Examples","text":"<pre><code># Strict rate limiting\nRATE_LIMIT_ENABLED=True\nRATE_LIMIT_PER_MINUTE=30\nRATE_LIMIT_BURST=5\n\n# Relaxed rate limiting\nRATE_LIMIT_ENABLED=True\nRATE_LIMIT_PER_MINUTE=120\nRATE_LIMIT_BURST=20\n\n# Disable rate limiting (not recommended)\nRATE_LIMIT_ENABLED=False\n</code></pre>"},{"location":"getting-started/configuration/#file-upload-configuration","title":"File Upload Configuration","text":"<p>Configure file upload settings.</p> Variable Default Description <code>MAX_UPLOAD_SIZE</code> <code>10485760</code> Max size in bytes (10MB) <code>ALLOWED_UPLOAD_EXTENSIONS</code> <code>.pdf,.jpg,.jpeg,.png,.doc,.docx</code> Allowed extensions <code>UPLOAD_PATH</code> <code>/app/uploads</code> Upload directory"},{"location":"getting-started/configuration/#upload-configuration","title":"Upload Configuration","text":"<pre><code># Large file uploads (100MB)\nMAX_UPLOAD_SIZE=104857600\nALLOWED_UPLOAD_EXTENSIONS=.pdf,.jpg,.jpeg,.png,.doc,.docx,.zip\nUPLOAD_PATH=/data/uploads\n\n# Strict file uploads (5MB)\nMAX_UPLOAD_SIZE=5242880\nALLOWED_UPLOAD_EXTENSIONS=.pdf,.jpg,.png\nUPLOAD_PATH=/tmp/uploads\n</code></pre>"},{"location":"getting-started/configuration/#logging-configuration","title":"Logging Configuration","text":"<p>The application supports structured logging with different levels:</p> <pre><code># Logging levels (from most to least verbose)\nLOG_LEVEL=DEBUG    # Development debugging\nLOG_LEVEL=INFO     # General information\nLOG_LEVEL=WARNING  # Warning messages only\nLOG_LEVEL=ERROR    # Error messages only\nLOG_LEVEL=CRITICAL # Critical errors only\n</code></pre>"},{"location":"getting-started/configuration/#custom-logging-configuration","title":"Custom Logging Configuration","text":"<p>You can also configure structured logging in the application:</p> <pre><code># In your startup script or custom configuration\nimport logging\nimport sys\n\nlogging.basicConfig(\n    level=getattr(logging, os.getenv('LOG_LEVEL', 'INFO')),\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.StreamHandler(sys.stdout),\n        logging.FileHandler('/var/log/crew-api.log')  # Optional file logging\n    ]\n)\n</code></pre>"},{"location":"getting-started/configuration/#environment-specific-examples","title":"Environment-Specific Examples","text":""},{"location":"getting-started/configuration/#development-environment","title":"Development Environment","text":"<pre><code># .env.development\nDATABASE_URL=postgresql+asyncpg://dev_user:dev_pass@localhost:5432/crew_dev\nREDIS_URL=redis://localhost:6379/1\nSECRET_KEY=dev-secret-key-not-for-production\nDEBUG=True\nENVIRONMENT=development\nLOG_LEVEL=DEBUG\nCORS_ORIGINS=http://localhost:3000,http://localhost:5173\nMCP_ENABLED=True\nENABLE_METRICS=True\nRATE_LIMIT_ENABLED=False\n</code></pre>"},{"location":"getting-started/configuration/#production-environment","title":"Production Environment","text":"<pre><code># .env.production\nDATABASE_URL=postgresql+asyncpg://prod_user:secure_password@db.example.com:5432/crew_prod\nREDIS_URL=redis://redis.example.com:6379/0\nSECRET_KEY=super-secure-production-key-generated-randomly\nDEBUG=False\nENVIRONMENT=production\nLOG_LEVEL=WARNING\nCORS_ORIGINS=https://app.example.com\nMCP_ENABLED=True\nENABLE_METRICS=True\nMETRICS_PATH=/internal/metrics\nRATE_LIMIT_ENABLED=True\nRATE_LIMIT_PER_MINUTE=100\nMAX_WORKERS=8\n</code></pre>"},{"location":"getting-started/configuration/#testing-environment","title":"Testing Environment","text":"<pre><code># .env.testing\nDATABASE_URL=postgresql+asyncpg://test_user:test_pass@localhost:5432/crew_test\nREDIS_URL=redis://localhost:6379/2\nSECRET_KEY=test-secret-key\nDEBUG=True\nENVIRONMENT=testing\nLOG_LEVEL=DEBUG\nCORS_ORIGINS=*\nMCP_ENABLED=False\nENABLE_METRICS=False\nRATE_LIMIT_ENABLED=False\n</code></pre>"},{"location":"getting-started/configuration/#configuration-validation","title":"Configuration Validation","text":"<p>The application validates configuration on startup. Common validation errors:</p>"},{"location":"getting-started/configuration/#invalid-database-url","title":"Invalid Database URL","text":"<p><pre><code>ValueError: Invalid database URL format\n</code></pre> Solution: Ensure the DATABASE_URL follows the correct format: <pre><code>DATABASE_URL=postgresql+asyncpg://username:password@host:port/database\n</code></pre></p>"},{"location":"getting-started/configuration/#missing-secret-key","title":"Missing Secret Key","text":"<p><pre><code>ValueError: SECRET_KEY must be provided in production\n</code></pre> Solution: Set a secure secret key: <pre><code>SECRET_KEY=$(python -c \"import secrets; print(secrets.token_urlsafe(32))\")\n</code></pre></p>"},{"location":"getting-started/configuration/#invalid-cors-origins","title":"Invalid CORS Origins","text":"<p><pre><code>ValueError: Invalid CORS origin format\n</code></pre> Solution: Ensure CORS origins are valid URLs: <pre><code>CORS_ORIGINS=https://app.example.com,https://admin.example.com\n</code></pre></p>"},{"location":"getting-started/configuration/#configuration-best-practices","title":"Configuration Best Practices","text":"<ol> <li> <p>Use Environment-Specific Files:    <pre><code>.env.development\n.env.staging\n.env.production\n</code></pre></p> </li> <li> <p>Never Commit Secrets:    <pre><code># Add to .gitignore\n.env*\n!.env.example\n</code></pre></p> </li> <li> <p>Use Configuration Management:</p> </li> <li>Docker secrets for containers</li> <li>Kubernetes ConfigMaps and Secrets</li> <li> <p>Cloud provider parameter stores (AWS Parameter Store, Azure Key Vault)</p> </li> <li> <p>Validate Configuration:    <pre><code># Test configuration before deployment\npoetry run python -c \"from src.core.config import settings; print('Config valid')\"\n</code></pre></p> </li> <li> <p>Document Custom Settings:    Always document any custom environment variables you add.</p> </li> </ol>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<p>Now that you have configured the application:</p> <ol> <li>\ud83d\udd10 Learn about Authentication workflows</li> <li>\ud83d\ude80 Try making your First API Call</li> <li>\ud83d\udcda Explore the interactive API docs at <code>http://localhost:8000/docs</code></li> </ol> <p>Configuration Complete</p> <p>Your Crew Appraisals Backend API is now properly configured! \ud83c\udf89</p>"},{"location":"getting-started/first-api-call/","title":"First API Call Tutorial","text":"<p>This step-by-step tutorial will guide you through making your first API calls to the Crew Appraisals Backend, from getting an access token to handling responses and errors.</p>"},{"location":"getting-started/first-api-call/#prerequisites","title":"Prerequisites","text":"<p>Before you start, ensure you have:</p> <ul> <li>\u2705 The API server running (see Quickstart Guide)</li> <li>\u2705 A user account (create one following the Authentication Guide)</li> <li>\u2705 Your preferred HTTP client (cURL, Python, JavaScript, or Postman)</li> </ul>"},{"location":"getting-started/first-api-call/#tutorial-overview","title":"Tutorial Overview","text":"<p>We'll walk through these steps:</p> <ol> <li>Register a new user (if you don't have one)</li> <li>Login to get an access token</li> <li>Make authenticated API calls</li> <li>Handle responses and errors</li> <li>Explore different endpoints</li> </ol>"},{"location":"getting-started/first-api-call/#step-1-verify-api-is-running","title":"Step 1: Verify API is Running","text":"<p>First, let's check that the API is accessible:</p> cURLPythonJavaScript <pre><code>curl http://localhost:8000/health\n</code></pre> <pre><code>import requests\n\nresponse = requests.get(\"http://localhost:8000/health\")\nprint(f\"Status: {response.status_code}\")\nprint(f\"Response: {response.json()}\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/health');\nconst data = await response.json();\nconsole.log('Health check:', data);\n</code></pre> <p>Expected Response: <pre><code>{\n  \"status\": \"healthy\",\n  \"database\": \"connected\",\n  \"version\": \"1.0.0\",\n  \"environment\": \"development\"\n}\n</code></pre></p> <p>API Status</p> <p>If you see <code>\"status\": \"healthy\"</code>, the API is ready for requests!</p>"},{"location":"getting-started/first-api-call/#step-2-create-a-user-account","title":"Step 2: Create a User Account","text":"<p>If you don't have a user account yet, let's create one:</p> cURLPythonJavaScript <pre><code>curl -X POST \"http://localhost:8000/api/v1/auth/register\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"username\": \"demo_user\",\n       \"email\": \"demo@example.com\",\n       \"password\": \"SecurePassword123!\",\n       \"first_name\": \"Demo\",\n       \"last_name\": \"User\",\n       \"role\": \"crew_member\"\n     }'\n</code></pre> <pre><code>import requests\n\n# User registration data\nuser_data = {\n    \"username\": \"demo_user\",\n    \"email\": \"demo@example.com\",\n    \"password\": \"SecurePassword123!\",\n    \"first_name\": \"Demo\",\n    \"last_name\": \"User\",\n    \"role\": \"crew_member\"\n}\n\nresponse = requests.post(\n    \"http://localhost:8000/api/v1/auth/register\",\n    json=user_data\n)\n\nprint(f\"Registration Status: {response.status_code}\")\nif response.status_code == 201:\n    user = response.json()\n    print(f\"User created: {user['username']} ({user['email']})\")\n    print(f\"User ID: {user['id']}\")\nelse:\n    print(f\"Registration failed: {response.text}\")\n</code></pre> <pre><code>const userData = {\n  username: 'demo_user',\n  email: 'demo@example.com',\n  password: 'SecurePassword123!',\n  first_name: 'Demo',\n  last_name: 'User',\n  role: 'crew_member'\n};\n\nconst response = await fetch('http://localhost:8000/api/v1/auth/register', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(userData)\n});\n\nconsole.log('Registration Status:', response.status);\nif (response.ok) {\n  const user = await response.json();\n  console.log('User created:', user.username, `(${user.email})`);\n  console.log('User ID:', user.id);\n} else {\n  const error = await response.text();\n  console.error('Registration failed:', error);\n}\n</code></pre> <p>Expected Response (201 Created): <pre><code>{\n  \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"username\": \"demo_user\",\n  \"email\": \"demo@example.com\",\n  \"first_name\": \"Demo\",\n  \"last_name\": \"User\",\n  \"role\": \"crew_member\",\n  \"is_active\": true\n}\n</code></pre></p> <p>Account Already Exists?</p> <p>If you get a 409 error saying the username exists, either use a different username or skip to the login step with existing credentials.</p>"},{"location":"getting-started/first-api-call/#step-3-login-to-get-access-token","title":"Step 3: Login to Get Access Token","text":"<p>Now let's authenticate to get an access token:</p> cURLPythonJavaScript <pre><code>curl -X POST \"http://localhost:8000/api/v1/auth/login\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"username\": \"demo_user\",\n       \"password\": \"SecurePassword123!\"\n     }' \\\n     -w \"\\nStatus: %{http_code}\\n\"\n</code></pre> <pre><code>import requests\nimport json\n\n# Login credentials\nlogin_data = {\n    \"username\": \"demo_user\",\n    \"password\": \"SecurePassword123!\"\n}\n\nresponse = requests.post(\n    \"http://localhost:8000/api/v1/auth/login\",\n    json=login_data\n)\n\nprint(f\"Login Status: {response.status_code}\")\n\nif response.status_code == 200:\n    auth_response = response.json()\n\n    # Extract tokens\n    access_token = auth_response[\"access_token\"]\n    refresh_token = auth_response[\"refresh_token\"]\n\n    print(\"\u2705 Login successful!\")\n    print(f\"Access token (first 50 chars): {access_token[:50]}...\")\n    print(f\"Token expires in: {auth_response['expires_in']} seconds\")\n\n    # Store tokens for later use\n    tokens = {\n        'access_token': access_token,\n        'refresh_token': refresh_token\n    }\n\n    # Print user info\n    user = auth_response[\"user\"]\n    print(f\"\\nUser Info:\")\n    print(f\"- Username: {user['username']}\")\n    print(f\"- Email: {user['email']}\")\n    print(f\"- Role: {user['role']}\")\n    print(f\"- Active: {user['is_active']}\")\n\nelse:\n    print(f\"\u274c Login failed: {response.text}\")\n</code></pre> <pre><code>const loginData = {\n  username: 'demo_user',\n  password: 'SecurePassword123!'\n};\n\nconst response = await fetch('http://localhost:8000/api/v1/auth/login', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(loginData)\n});\n\nconsole.log('Login Status:', response.status);\n\nif (response.ok) {\n  const authResponse = await response.json();\n\n  // Extract tokens\n  const accessToken = authResponse.access_token;\n  const refreshToken = authResponse.refresh_token;\n\n  console.log('\u2705 Login successful!');\n  console.log('Access token (first 50 chars):', accessToken.slice(0, 50) + '...');\n  console.log('Token expires in:', authResponse.expires_in, 'seconds');\n\n  // Store tokens (in production, use secure storage)\n  localStorage.setItem('access_token', accessToken);\n  localStorage.setItem('refresh_token', refreshToken);\n\n  // Print user info\n  const user = authResponse.user;\n  console.log('\\nUser Info:');\n  console.log('- Username:', user.username);\n  console.log('- Email:', user.email);\n  console.log('- Role:', user.role);\n  console.log('- Active:', user.is_active);\n\n  return { accessToken, refreshToken, user };\n} else {\n  const error = await response.text();\n  console.error('\u274c Login failed:', error);\n}\n</code></pre> <p>Expected Response (200 OK): <pre><code>{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"refresh_token\": \"550e8400-e29b-41d4-a716-446655440002\",\n  \"token_type\": \"bearer\",\n  \"expires_in\": 1800,\n  \"user\": {\n    \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"username\": \"demo_user\",\n    \"email\": \"demo@example.com\",\n    \"first_name\": \"Demo\",\n    \"last_name\": \"User\",\n    \"role\": \"crew_member\",\n    \"is_active\": true\n  },\n  \"session\": {\n    \"id\": \"sess_550e8400-e29b-41d4-a716-446655440001\",\n    \"created_at\": \"2023-12-29T14:30:00Z\",\n    \"expires_at\": \"2023-12-30T14:30:00Z\"\n  }\n}\n</code></pre></p> <p>Save Your Token</p> <p>Copy the <code>access_token</code> value - you'll need it for the next steps!</p>"},{"location":"getting-started/first-api-call/#step-4-make-your-first-authenticated-request","title":"Step 4: Make Your First Authenticated Request","text":"<p>Let's use the access token to make an authenticated request:</p> cURLPythonJavaScript <pre><code># Replace YOUR_ACCESS_TOKEN with the actual token from step 3\ncurl -X GET \"http://localhost:8000/api/v1/auth/me\" \\\n     -H \"Authorization: Bearer YOUR_ACCESS_TOKEN\" \\\n     -w \"\\nStatus: %{http_code}\\n\"\n</code></pre> <pre><code># Using the access_token from the login step\nheaders = {\n    \"Authorization\": f\"Bearer {access_token}\"\n}\n\nresponse = requests.get(\n    \"http://localhost:8000/api/v1/auth/me\",\n    headers=headers\n)\n\nprint(f\"Request Status: {response.status_code}\")\n\nif response.status_code == 200:\n    user_info = response.json()\n    print(\"\u2705 Authenticated request successful!\")\n    print(f\"Current user: {user_info['username']}\")\n    print(f\"Full response:\")\n    print(json.dumps(user_info, indent=2))\nelif response.status_code == 401:\n    print(\"\u274c Authentication failed - token may be invalid or expired\")\n    print(f\"Error: {response.text}\")\nelse:\n    print(f\"\u274c Request failed with status {response.status_code}\")\n    print(f\"Error: {response.text}\")\n</code></pre> <pre><code>// Using the accessToken from the login step\nconst response = await fetch('http://localhost:8000/api/v1/auth/me', {\n  headers: {\n    'Authorization': `Bearer ${accessToken}`\n  }\n});\n\nconsole.log('Request Status:', response.status);\n\nif (response.ok) {\n  const userInfo = await response.json();\n  console.log('\u2705 Authenticated request successful!');\n  console.log('Current user:', userInfo.username);\n  console.log('Full response:', userInfo);\n} else if (response.status === 401) {\n  console.error('\u274c Authentication failed - token may be invalid or expired');\n  const error = await response.text();\n  console.error('Error:', error);\n} else {\n  console.error(`\u274c Request failed with status ${response.status}`);\n  const error = await response.text();\n  console.error('Error:', error);\n}\n</code></pre> <p>Expected Response (200 OK): <pre><code>{\n  \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"username\": \"demo_user\",\n  \"email\": \"demo@example.com\",\n  \"first_name\": \"Demo\",\n  \"last_name\": \"User\",\n  \"role\": \"crew_member\",\n  \"is_active\": true\n}\n</code></pre></p> <p>First Authenticated Call</p> <p>Congratulations! You've successfully made your first authenticated API call! \ud83c\udf89</p>"},{"location":"getting-started/first-api-call/#step-5-explore-more-endpoints","title":"Step 5: Explore More Endpoints","text":"<p>Now let's explore other available endpoints:</p>"},{"location":"getting-started/first-api-call/#get-api-information","title":"Get API Information","text":"cURLPythonJavaScript <pre><code>curl http://localhost:8000/\n</code></pre> <pre><code>response = requests.get(\"http://localhost:8000/\")\napi_info = response.json()\nprint(\"API Information:\")\nprint(json.dumps(api_info, indent=2))\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/');\nconst apiInfo = await response.json();\nconsole.log('API Information:', apiInfo);\n</code></pre> <p>Response: <pre><code>{\n  \"name\": \"Crew Appraisals Backend\",\n  \"version\": \"1.0.0\",\n  \"environment\": \"development\",\n  \"docs\": \"/docs\",\n  \"health\": \"/health\",\n  \"metrics\": \"/metrics\",\n  \"mcp\": \"/mcp\"\n}\n</code></pre></p>"},{"location":"getting-started/first-api-call/#get-session-information","title":"Get Session Information","text":"cURLPythonJavaScript <pre><code>curl -X GET \"http://localhost:8000/api/v1/auth/session\" \\\n     -H \"Authorization: Bearer YOUR_ACCESS_TOKEN\"\n</code></pre> <pre><code>response = requests.get(\n    \"http://localhost:8000/api/v1/auth/session\",\n    headers={\"Authorization\": f\"Bearer {access_token}\"}\n)\n\nif response.status_code == 200:\n    session_info = response.json()\n    print(\"Current Session:\")\n    print(f\"- Session ID: {session_info['id']}\")\n    print(f\"- Created: {session_info['created_at']}\")\n    print(f\"- Expires: {session_info['expires_at']}\")\n    print(f\"- Last Activity: {session_info['last_activity']}\")\n    print(f\"- IP Address: {session_info['ip_address']}\")\n    print(f\"- Active: {session_info['is_active']}\")\n</code></pre> <pre><code>const response = await fetch('http://localhost:8000/api/v1/auth/session', {\n  headers: {\n    'Authorization': `Bearer ${accessToken}`\n  }\n});\n\nif (response.ok) {\n  const sessionInfo = await response.json();\n  console.log('Current Session:');\n  console.log('- Session ID:', sessionInfo.id);\n  console.log('- Created:', sessionInfo.created_at);\n  console.log('- Expires:', sessionInfo.expires_at);\n  console.log('- Last Activity:', sessionInfo.last_activity);\n  console.log('- IP Address:', sessionInfo.ip_address);\n  console.log('- Active:', sessionInfo.is_active);\n}\n</code></pre>"},{"location":"getting-started/first-api-call/#step-6-understanding-responses","title":"Step 6: Understanding Responses","text":""},{"location":"getting-started/first-api-call/#success-responses","title":"Success Responses","text":"<p>The API uses standard HTTP status codes:</p> Code Meaning Description <code>200</code> OK Request successful <code>201</code> Created Resource created successfully <code>204</code> No Content Request successful, no content returned"},{"location":"getting-started/first-api-call/#error-responses","title":"Error Responses","text":"<p>Common error responses and their meanings:</p> 401 Unauthorized403 Forbidden404 Not Found422 Validation Error <pre><code>{\n  \"detail\": \"Could not validate credentials\"\n}\n</code></pre> <p>Causes: - Missing Authorization header - Invalid or expired access token - Malformed token</p> <pre><code>{\n  \"detail\": \"Not enough permissions\"\n}\n</code></pre> <p>Causes: - User role doesn't have required permissions - Account is deactivated - Resource access denied</p> <pre><code>{\n  \"detail\": \"User not found\"\n}\n</code></pre> <p>Causes: - Endpoint doesn't exist - Resource not found - Invalid resource ID</p> <pre><code>{\n  \"detail\": [\n    {\n      \"loc\": [\"body\", \"email\"],\n      \"msg\": \"field required\",\n      \"type\": \"value_error.missing\"\n    }\n  ]\n}\n</code></pre> <p>Causes: - Missing required fields - Invalid data format - Validation rules not met</p>"},{"location":"getting-started/first-api-call/#step-7-error-handling-examples","title":"Step 7: Error Handling Examples","text":"<p>Here's how to handle different error scenarios:</p> PythonJavaScript <pre><code>import requests\nfrom requests.exceptions import RequestException, Timeout, ConnectionError\n\ndef make_authenticated_request(url, access_token, method='GET', **kwargs):\n    \"\"\"\n    Make an authenticated request with proper error handling\n    \"\"\"\n    headers = kwargs.get('headers', {})\n    headers['Authorization'] = f'Bearer {access_token}'\n    kwargs['headers'] = headers\n\n    try:\n        response = requests.request(method, url, timeout=30, **kwargs)\n\n        # Handle different status codes\n        if response.status_code == 200:\n            return response.json(), None\n\n        elif response.status_code == 401:\n            return None, \"Authentication failed - please login again\"\n\n        elif response.status_code == 403:\n            return None, \"Access denied - insufficient permissions\"\n\n        elif response.status_code == 404:\n            return None, \"Resource not found\"\n\n        elif response.status_code == 422:\n            error_detail = response.json().get('detail', 'Validation error')\n            return None, f\"Validation error: {error_detail}\"\n\n        elif response.status_code &gt;= 500:\n            return None, \"Server error - please try again later\"\n\n        else:\n            return None, f\"Request failed with status {response.status_code}\"\n\n    except Timeout:\n        return None, \"Request timed out - please try again\"\n\n    except ConnectionError:\n        return None, \"Connection error - check if the server is running\"\n\n    except RequestException as e:\n        return None, f\"Request error: {str(e)}\"\n\n# Example usage\ndata, error = make_authenticated_request(\n    \"http://localhost:8000/api/v1/auth/me\",\n    access_token\n)\n\nif data:\n    print(\"Success:\", data)\nelse:\n    print(\"Error:\", error)\n</code></pre> <pre><code>async function makeAuthenticatedRequest(url, accessToken, options = {}) {\n  /**\n   * Make an authenticated request with proper error handling\n   */\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    ...options.headers\n  };\n\n  try {\n    const response = await fetch(url, {\n      timeout: 30000,\n      ...options,\n      headers\n    });\n\n    // Handle different status codes\n    if (response.ok) {\n      return { data: await response.json(), error: null };\n    }\n\n    switch (response.status) {\n      case 401:\n        return { data: null, error: 'Authentication failed - please login again' };\n\n      case 403:\n        return { data: null, error: 'Access denied - insufficient permissions' };\n\n      case 404:\n        return { data: null, error: 'Resource not found' };\n\n      case 422:\n        const errorDetail = await response.json();\n        return {\n          data: null,\n          error: `Validation error: ${JSON.stringify(errorDetail.detail)}`\n        };\n\n      case 500:\n      case 502:\n      case 503:\n        return { data: null, error: 'Server error - please try again later' };\n\n      default:\n        return { data: null, error: `Request failed with status ${response.status}` };\n    }\n\n  } catch (error) {\n    if (error.name === 'TypeError' &amp;&amp; error.message.includes('fetch')) {\n      return { data: null, error: 'Connection error - check if the server is running' };\n    }\n    return { data: null, error: `Request error: ${error.message}` };\n  }\n}\n\n// Example usage\nconst { data, error } = await makeAuthenticatedRequest(\n  'http://localhost:8000/api/v1/auth/me',\n  accessToken\n);\n\nif (data) {\n  console.log('Success:', data);\n} else {\n  console.error('Error:', error);\n}\n</code></pre>"},{"location":"getting-started/first-api-call/#step-8-interactive-api-documentation","title":"Step 8: Interactive API Documentation","text":"<p>The API provides interactive documentation using Swagger UI:</p> <ol> <li> <p>Open your browser and visit: <code>http://localhost:8000/docs</code></p> </li> <li> <p>Explore available endpoints - you'll see all available API endpoints organized by categories</p> </li> <li> <p>Try out endpoints - click \"Try it out\" on any endpoint to test it directly in the browser</p> </li> <li> <p>Authenticate in Swagger - click the \"Authorize\" button and enter your access token as:    <pre><code>Bearer YOUR_ACCESS_TOKEN\n</code></pre></p> </li> </ol> <p>Interactive Testing</p> <p>The Swagger UI is perfect for exploring the API and understanding request/response formats without writing code!</p>"},{"location":"getting-started/first-api-call/#complete-working-example","title":"Complete Working Example","text":"<p>Here's a complete example that puts everything together:</p> Python Complete ExampleJavaScript Complete Example <pre><code>#!/usr/bin/env python3\n\"\"\"\nComplete example of interacting with the Crew Appraisals API\n\"\"\"\n\nimport requests\nimport json\nimport time\nfrom datetime import datetime\n\nclass CrewAppraisalsClient:\n    def __init__(self, base_url=\"http://localhost:8000\"):\n        self.base_url = base_url\n        self.access_token = None\n        self.refresh_token = None\n        self.user_info = None\n\n    def register(self, username, email, password, first_name, last_name, role=\"crew_member\"):\n        \"\"\"Register a new user\"\"\"\n        print(f\"\ud83d\udd10 Registering user: {username}\")\n\n        response = requests.post(f\"{self.base_url}/api/v1/auth/register\", json={\n            \"username\": username,\n            \"email\": email,\n            \"password\": password,\n            \"first_name\": first_name,\n            \"last_name\": last_name,\n            \"role\": role\n        })\n\n        if response.status_code == 201:\n            user = response.json()\n            print(f\"\u2705 User registered successfully: {user['id']}\")\n            return True\n        elif response.status_code == 409:\n            print(\"\u26a0\ufe0f  User already exists\")\n            return False\n        else:\n            print(f\"\u274c Registration failed: {response.text}\")\n            return False\n\n    def login(self, username, password):\n        \"\"\"Login and store tokens\"\"\"\n        print(f\"\ud83d\udd11 Logging in as: {username}\")\n\n        response = requests.post(f\"{self.base_url}/api/v1/auth/login\", json={\n            \"username\": username,\n            \"password\": password\n        })\n\n        if response.status_code == 200:\n            auth_data = response.json()\n            self.access_token = auth_data[\"access_token\"]\n            self.refresh_token = auth_data[\"refresh_token\"]\n            self.user_info = auth_data[\"user\"]\n\n            print(f\"\u2705 Login successful!\")\n            print(f\"   User: {self.user_info['username']} ({self.user_info['role']})\")\n            print(f\"   Token expires in: {auth_data['expires_in']} seconds\")\n            return True\n        else:\n            print(f\"\u274c Login failed: {response.text}\")\n            return False\n\n    def get_headers(self):\n        \"\"\"Get authorization headers\"\"\"\n        if not self.access_token:\n            raise Exception(\"Not authenticated - please login first\")\n        return {\"Authorization\": f\"Bearer {self.access_token}\"}\n\n    def get_current_user(self):\n        \"\"\"Get current user info\"\"\"\n        print(\"\ud83d\udc64 Getting current user info...\")\n\n        response = requests.get(\n            f\"{self.base_url}/api/v1/auth/me\",\n            headers=self.get_headers()\n        )\n\n        if response.status_code == 200:\n            user = response.json()\n            print(f\"\u2705 Current user: {user['username']}\")\n            return user\n        else:\n            print(f\"\u274c Failed to get user info: {response.text}\")\n            return None\n\n    def get_session_info(self):\n        \"\"\"Get current session info\"\"\"\n        print(\"\ud83d\udd0d Getting session info...\")\n\n        response = requests.get(\n            f\"{self.base_url}/api/v1/auth/session\",\n            headers=self.get_headers()\n        )\n\n        if response.status_code == 200:\n            session = response.json()\n            print(f\"\u2705 Session ID: {session['id']}\")\n            print(f\"   Created: {session['created_at']}\")\n            print(f\"   Expires: {session['expires_at']}\")\n            print(f\"   Last Activity: {session['last_activity']}\")\n            return session\n        else:\n            print(f\"\u274c Failed to get session info: {response.text}\")\n            return None\n\n    def logout(self):\n        \"\"\"Logout and clear tokens\"\"\"\n        print(\"\ud83d\udeaa Logging out...\")\n\n        if self.access_token:\n            response = requests.post(\n                f\"{self.base_url}/api/v1/auth/logout\",\n                headers=self.get_headers()\n            )\n\n            if response.status_code == 200:\n                print(\"\u2705 Logged out successfully\")\n            else:\n                print(f\"\u26a0\ufe0f  Logout request failed: {response.text}\")\n\n        # Clear local tokens\n        self.access_token = None\n        self.refresh_token = None\n        self.user_info = None\n\n    def check_api_health(self):\n        \"\"\"Check API health\"\"\"\n        print(\"\ud83c\udfe5 Checking API health...\")\n\n        response = requests.get(f\"{self.base_url}/health\")\n\n        if response.status_code == 200:\n            health = response.json()\n            print(f\"\u2705 API is {health['status']}\")\n            print(f\"   Database: {health['database']}\")\n            print(f\"   Version: {health['version']}\")\n            return True\n        else:\n            print(f\"\u274c API health check failed: {response.status_code}\")\n            return False\n\ndef main():\n    \"\"\"Main example function\"\"\"\n    print(\"\ud83d\ude80 Crew Appraisals API - First API Call Tutorial\\n\")\n\n    # Initialize client\n    client = CrewAppraisalsClient()\n\n    # Check API health\n    if not client.check_api_health():\n        return\n\n    print()\n\n    # Register a user (or skip if exists)\n    username = f\"demo_user_{int(time.time())}\"  # Unique username\n    client.register(\n        username=username,\n        email=f\"{username}@example.com\",\n        password=\"SecurePassword123!\",\n        first_name=\"Demo\",\n        last_name=\"User\"\n    )\n\n    print()\n\n    # Login\n    if client.login(username, \"SecurePassword123!\"):\n        print()\n\n        # Make authenticated requests\n        client.get_current_user()\n        print()\n\n        client.get_session_info()\n        print()\n\n        # Logout\n        client.logout()\n\n    print(\"\\n\ud83c\udf89 Tutorial completed successfully!\")\n    print(\"\\nNext steps:\")\n    print(\"- Explore the API documentation at: http://localhost:8000/docs\")\n    print(\"- Try different endpoints and methods\")\n    print(\"- Implement error handling and token refresh\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>/**\n * Complete example of interacting with the Crew Appraisals API\n */\n\nclass CrewAppraisalsClient {\n  constructor(baseUrl = 'http://localhost:8000') {\n    this.baseUrl = baseUrl;\n    this.accessToken = null;\n    this.refreshToken = null;\n    this.userInfo = null;\n  }\n\n  async register(username, email, password, firstName, lastName, role = 'crew_member') {\n    console.log(`\ud83d\udd10 Registering user: ${username}`);\n\n    try {\n      const response = await fetch(`${this.baseUrl}/api/v1/auth/register`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          username,\n          email,\n          password,\n          first_name: firstName,\n          last_name: lastName,\n          role\n        })\n      });\n\n      if (response.status === 201) {\n        const user = await response.json();\n        console.log(`\u2705 User registered successfully: ${user.id}`);\n        return true;\n      } else if (response.status === 409) {\n        console.log('\u26a0\ufe0f  User already exists');\n        return false;\n      } else {\n        const error = await response.text();\n        console.log(`\u274c Registration failed: ${error}`);\n        return false;\n      }\n    } catch (error) {\n      console.error('\u274c Registration error:', error);\n      return false;\n    }\n  }\n\n  async login(username, password) {\n    console.log(`\ud83d\udd11 Logging in as: ${username}`);\n\n    try {\n      const response = await fetch(`${this.baseUrl}/api/v1/auth/login`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password })\n      });\n\n      if (response.ok) {\n        const authData = await response.json();\n        this.accessToken = authData.access_token;\n        this.refreshToken = authData.refresh_token;\n        this.userInfo = authData.user;\n\n        console.log('\u2705 Login successful!');\n        console.log(`   User: ${this.userInfo.username} (${this.userInfo.role})`);\n        console.log(`   Token expires in: ${authData.expires_in} seconds`);\n        return true;\n      } else {\n        const error = await response.text();\n        console.log(`\u274c Login failed: ${error}`);\n        return false;\n      }\n    } catch (error) {\n      console.error('\u274c Login error:', error);\n      return false;\n    }\n  }\n\n  getHeaders() {\n    if (!this.accessToken) {\n      throw new Error('Not authenticated - please login first');\n    }\n    return { 'Authorization': `Bearer ${this.accessToken}` };\n  }\n\n  async getCurrentUser() {\n    console.log('\ud83d\udc64 Getting current user info...');\n\n    try {\n      const response = await fetch(`${this.baseUrl}/api/v1/auth/me`, {\n        headers: this.getHeaders()\n      });\n\n      if (response.ok) {\n        const user = await response.json();\n        console.log(`\u2705 Current user: ${user.username}`);\n        return user;\n      } else {\n        const error = await response.text();\n        console.log(`\u274c Failed to get user info: ${error}`);\n        return null;\n      }\n    } catch (error) {\n      console.error('\u274c Get user error:', error);\n      return null;\n    }\n  }\n\n  async getSessionInfo() {\n    console.log('\ud83d\udd0d Getting session info...');\n\n    try {\n      const response = await fetch(`${this.baseUrl}/api/v1/auth/session`, {\n        headers: this.getHeaders()\n      });\n\n      if (response.ok) {\n        const session = await response.json();\n        console.log(`\u2705 Session ID: ${session.id}`);\n        console.log(`   Created: ${session.created_at}`);\n        console.log(`   Expires: ${session.expires_at}`);\n        console.log(`   Last Activity: ${session.last_activity}`);\n        return session;\n      } else {\n        const error = await response.text();\n        console.log(`\u274c Failed to get session info: ${error}`);\n        return null;\n      }\n    } catch (error) {\n      console.error('\u274c Get session error:', error);\n      return null;\n    }\n  }\n\n  async logout() {\n    console.log('\ud83d\udeaa Logging out...');\n\n    try {\n      if (this.accessToken) {\n        const response = await fetch(`${this.baseUrl}/api/v1/auth/logout`, {\n          method: 'POST',\n          headers: this.getHeaders()\n        });\n\n        if (response.ok) {\n          console.log('\u2705 Logged out successfully');\n        } else {\n          const error = await response.text();\n          console.log(`\u26a0\ufe0f  Logout request failed: ${error}`);\n        }\n      }\n    } catch (error) {\n      console.error('\u274c Logout error:', error);\n    }\n\n    // Clear local tokens\n    this.accessToken = null;\n    this.refreshToken = null;\n    this.userInfo = null;\n  }\n\n  async checkApiHealth() {\n    console.log('\ud83c\udfe5 Checking API health...');\n\n    try {\n      const response = await fetch(`${this.baseUrl}/health`);\n\n      if (response.ok) {\n        const health = await response.json();\n        console.log(`\u2705 API is ${health.status}`);\n        console.log(`   Database: ${health.database}`);\n        console.log(`   Version: ${health.version}`);\n        return true;\n      } else {\n        console.log(`\u274c API health check failed: ${response.status}`);\n        return false;\n      }\n    } catch (error) {\n      console.error('\u274c Health check error:', error);\n      return false;\n    }\n  }\n}\n\nasync function main() {\n  console.log('\ud83d\ude80 Crew Appraisals API - First API Call Tutorial\\n');\n\n  // Initialize client\n  const client = new CrewAppraisalsClient();\n\n  // Check API health\n  if (!(await client.checkApiHealth())) {\n    return;\n  }\n\n  console.log();\n\n  // Register a user (or skip if exists)\n  const username = `demo_user_${Date.now()}`;  // Unique username\n  await client.register(\n    username,\n    `${username}@example.com`,\n    'SecurePassword123!',\n    'Demo',\n    'User'\n  );\n\n  console.log();\n\n  // Login\n  if (await client.login(username, 'SecurePassword123!')) {\n    console.log();\n\n    // Make authenticated requests\n    await client.getCurrentUser();\n    console.log();\n\n    await client.getSessionInfo();\n    console.log();\n\n    // Logout\n    await client.logout();\n  }\n\n  console.log('\\n\ud83c\udf89 Tutorial completed successfully!');\n  console.log('\\nNext steps:');\n  console.log('- Explore the API documentation at: http://localhost:8000/docs');\n  console.log('- Try different endpoints and methods');\n  console.log('- Implement error handling and token refresh');\n}\n\n// Run the example (in Node.js or browser console)\nmain().catch(console.error);\n</code></pre>"},{"location":"getting-started/first-api-call/#next-steps","title":"Next Steps","text":"<p>Congratulations! You've successfully completed your first API call tutorial. Here's what to explore next:</p>"},{"location":"getting-started/first-api-call/#explore-more-endpoints","title":"\ud83d\udd0d Explore More Endpoints","text":"<ul> <li>Crew Members: <code>/api/v1/crew-members</code></li> <li>Vessels: <code>/api/v1/vessels</code></li> <li>Appraisals: <code>/api/v1/appraisals</code></li> <li>Forms: <code>/api/v1/forms</code></li> </ul>"},{"location":"getting-started/first-api-call/#learn-more","title":"\ud83d\udcda Learn More","text":"<ol> <li>Interactive Documentation: Visit <code>http://localhost:8000/docs</code> to explore all endpoints</li> <li>Authentication Deep Dive: Read the Authentication Guide for advanced auth topics</li> <li>Configuration: Check the Configuration Guide for customizing the API</li> </ol>"},{"location":"getting-started/first-api-call/#advanced-topics","title":"\ud83d\udee0\ufe0f Advanced Topics","text":"<ul> <li>Token Refresh: Implement automatic token refresh logic</li> <li>Error Handling: Build robust error handling for production apps</li> <li>Rate Limiting: Understand and handle rate limits</li> <li>File Uploads: Learn how to upload files via the API</li> <li>WebSocket Support: Explore real-time features</li> </ul>"},{"location":"getting-started/first-api-call/#common-integration-patterns","title":"\ud83c\udfaf Common Integration Patterns","text":"<ul> <li>Frontend Integration: Connect with React, Vue, or Angular apps</li> <li>Mobile Apps: Integrate with React Native or native mobile apps</li> <li>Backend Services: Use the API from other backend services</li> <li>CLI Tools: Build command-line tools using the API</li> </ul> <p>Tutorial Complete</p> <p>You're now ready to build amazing applications with the Crew Appraisals Backend API! \ud83d\ude80</p> <p>Need Help?</p> <ul> <li>Check the interactive docs: <code>http://localhost:8000/docs</code></li> <li>Review error responses for troubleshooting</li> <li>Use the health check endpoint to verify connectivity</li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This comprehensive guide covers installing and setting up the Crew Management Backend API for development and production environments.</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/installation/#minimum-requirements-docker-compose","title":"Minimum Requirements (Docker Compose)","text":"<ul> <li>Docker: 20.10 or higher</li> <li>Docker Compose: v2.0 or higher</li> <li>Memory: 4GB RAM minimum</li> <li>Storage: 10GB available space</li> <li>OS: Linux, macOS, or Windows 10/11 (with Docker Desktop)</li> </ul>"},{"location":"getting-started/installation/#requirements-for-python-development-optional","title":"Requirements for Python Development (Optional)","text":"<ul> <li>Python: 3.11 or higher</li> <li>Database: PostgreSQL 12 or higher</li> <li>Cache: Redis 6 or higher (optional)</li> <li>Memory: 8GB RAM for development</li> <li>CPU: 2+ cores</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":"<p>Choose the installation method that best fits your needs:</p> Docker Compose (Recommended)PoetryManual <p>Best for quick setup, consistent environments, and production deployment.</p> <p>For Python development and customization.</p> <p>For custom setups or learning purposes.</p>"},{"location":"getting-started/installation/#method-1-docker-compose-installation-recommended","title":"Method 1: Docker Compose Installation (Recommended)","text":""},{"location":"getting-started/installation/#step-1-install-docker-and-docker-compose","title":"Step 1: Install Docker and Docker Compose","text":"Linux (Ubuntu/Debian)Windows 10/11macOS <pre><code># Install Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n\n# Add user to docker group (logout/login after)\nsudo usermod -aG docker $USER\n\n# Verify Docker installation\ndocker --version\ndocker compose version\n</code></pre> <ol> <li>Download Docker Desktop for Windows</li> <li>Run the installer (Docker Desktop Installer.exe)</li> <li>Follow the installation wizard</li> <li>Enable WSL2 if prompted</li> <li>Restart your computer</li> <li>Launch Docker Desktop from Start menu</li> <li>Verify installation: <pre><code>docker --version\ndocker compose version\n</code></pre></li> </ol> <ol> <li>Download Docker Desktop for Mac</li> <li>Open the .dmg file and drag Docker to Applications</li> <li>Launch Docker from Applications</li> <li>Follow the setup wizard</li> <li>Verify installation: <pre><code>docker --version\ndocker compose version\n</code></pre></li> </ol>"},{"location":"getting-started/installation/#step-2-clone-repository-and-setup","title":"Step 2: Clone Repository and Setup","text":"Linux/MacWindows (PowerShell) <pre><code># Clone repository\ngit clone https://github.com/example/crewing-backend.git\ncd crewing-backend\n\n# Copy environment configuration\ncp backend/.env.example backend/.env\n\n# Navigate to docker directory\ncd backend/docker\n</code></pre> <pre><code># Clone repository\ngit clone https://github.com/example/crewing-backend.git\ncd crewing-backend\n\n# Copy environment configuration\nCopy-Item backend\\.env.example backend\\.env\n\n# Navigate to docker directory\ncd backend\\docker\n</code></pre>"},{"location":"getting-started/installation/#step-3-start-services-with-docker-compose","title":"Step 3: Start Services with Docker Compose","text":"Linux/MacWindows (PowerShell) <pre><code># Start all services in detached mode\ndocker-compose up -d\n\n# Wait for services to be healthy (about 30 seconds)\ndocker-compose ps\n\n# Check logs if needed\ndocker-compose logs -f backend\n</code></pre> <pre><code># Start all services in detached mode\ndocker-compose up -d\n\n# Wait for services to be healthy (about 30 seconds)\ndocker-compose ps\n\n# Check logs if needed\ndocker-compose logs -f backend\n</code></pre>"},{"location":"getting-started/installation/#step-4-initialize-database","title":"Step 4: Initialize Database","text":"Linux/MacWindows (PowerShell) <pre><code># Run database migrations\ndocker-compose exec backend alembic upgrade head\n\n# Create admin user (optional)\ndocker-compose exec backend python scripts/create_admin.py\n\n# Verify API is running\ncurl http://localhost:8000/health\n</code></pre> <pre><code># Run database migrations\ndocker-compose exec backend alembic upgrade head\n\n# Create admin user (optional)\ndocker-compose exec backend python scripts/create_admin.py\n\n# Verify API is running\nInvoke-WebRequest http://localhost:8000/health\n</code></pre>"},{"location":"getting-started/installation/#docker-compose-services","title":"Docker Compose Services","text":"<p>The Docker Compose setup includes:</p> Service Port Purpose backend 8000 FastAPI application server postgres 5432 PostgreSQL database redis 6379 Cache and session storage nginx 80 Reverse proxy and load balancer"},{"location":"getting-started/installation/#managing-docker-services","title":"Managing Docker Services","text":"<pre><code># Stop all services\ndocker-compose down\n\n# Stop and remove all data\ndocker-compose down -v\n\n# Restart a specific service\ndocker-compose restart backend\n\n# View service logs\ndocker-compose logs -f [service_name]\n\n# Execute commands in container\ndocker-compose exec backend /bin/bash\n</code></pre>"},{"location":"getting-started/installation/#method-2-poetry-installation","title":"Method 2: Poetry Installation","text":""},{"location":"getting-started/installation/#step-1-install-python-311","title":"Step 1: Install Python 3.11","text":"Ubuntu/DebianCentOS/RHEL/FedoramacOSWindows (WSL2) <pre><code># Update package list\nsudo apt update\n\n# Install Python 3.11\nsudo apt install python3.11 python3.11-venv python3.11-dev\n\n# Install pip\nsudo apt install python3-pip\n\n# Verify installation\npython3.11 --version\n</code></pre> <pre><code># For RHEL/CentOS 8+\nsudo dnf install python3.11 python3.11-devel python3-pip\n\n# For older versions, use EPEL\nsudo yum install epel-release\nsudo yum install python39 python39-devel python3-pip\n\n# Verify installation\npython3.11 --version\n</code></pre> <pre><code># Install Homebrew if not already installed\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install Python 3.11\nbrew install python@3.11\n\n# Add to PATH\necho 'export PATH=\"/opt/homebrew/bin:$PATH\"' &gt;&gt; ~/.zshrc\nsource ~/.zshrc\n\n# Verify installation\npython3.11 --version\n</code></pre> <pre><code># Update WSL2\nsudo apt update &amp;&amp; sudo apt upgrade\n\n# Install Python 3.11\nsudo apt install python3.11 python3.11-venv python3.11-dev python3-pip\n\n# Verify installation\npython3.11 --version\n</code></pre>"},{"location":"getting-started/installation/#step-2-install-poetry","title":"Step 2: Install Poetry","text":"<pre><code># Install Poetry using the official installer\ncurl -sSL https://install.python-poetry.org | python3 -\n\n# Add Poetry to PATH\necho 'export PATH=\"$HOME/.local/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Verify installation\npoetry --version\n</code></pre> <p>Alternative Poetry Installation</p> <p>You can also install Poetry via pip: <code>pip install poetry</code></p>"},{"location":"getting-started/installation/#step-3-clone-repository-and-install-dependencies","title":"Step 3: Clone Repository and Install Dependencies","text":"<pre><code># Clone the repository\ngit clone &lt;repository-url&gt;\ncd backend\n\n# Configure Poetry to create virtual environment in project directory (optional)\npoetry config virtualenvs.in-project true\n\n# Install dependencies\npoetry install\n\n# Install development dependencies\npoetry install --with dev\n</code></pre>"},{"location":"getting-started/installation/#step-4-verify-installation","title":"Step 4: Verify Installation","text":"<pre><code># Activate virtual environment\npoetry shell\n\n# Check installed packages\npoetry show\n\n# Verify Python version\npython --version\n</code></pre>"},{"location":"getting-started/installation/#method-2-docker-installation","title":"Method 2: Docker Installation","text":""},{"location":"getting-started/installation/#step-1-install-docker-and-docker-compose_1","title":"Step 1: Install Docker and Docker Compose","text":"Ubuntu/DebianCentOS/RHEL/FedoramacOSWindows <pre><code># Install Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n\n# Add user to docker group\nsudo usermod -aG docker $USER\n\n# Install Docker Compose\nsudo apt install docker-compose-plugin\n\n# Verify installation\ndocker --version\ndocker compose version\n</code></pre> <pre><code># Install Docker\nsudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo dnf install docker-ce docker-ce-cli containerd.io\n\n# Start Docker service\nsudo systemctl start docker\nsudo systemctl enable docker\n\n# Add user to docker group\nsudo usermod -aG docker $USER\n\n# Install Docker Compose\nsudo dnf install docker-compose-plugin\n</code></pre> <pre><code># Download Docker Desktop from https://www.docker.com/products/docker-desktop\n# Or install via Homebrew\nbrew install --cask docker\n\n# Start Docker Desktop application\nopen -a Docker\n\n# Verify installation\ndocker --version\ndocker compose version\n</code></pre> <p>Download Docker Desktop from https://www.docker.com/products/docker-desktop and follow the installation wizard.</p>"},{"location":"getting-started/installation/#step-2-build-and-run-with-docker","title":"Step 2: Build and Run with Docker","text":"<pre><code># Clone repository\ngit clone &lt;repository-url&gt;\ncd backend\n\n# Build the development environment\ndocker compose -f docker/docker-compose.dev.yaml up --build -d\n\n# View running containers\ndocker compose -f docker/docker-compose.dev.yaml ps\n\n# View logs\ndocker compose -f docker/docker-compose.dev.yaml logs -f api\n</code></pre>"},{"location":"getting-started/installation/#database-setup","title":"Database Setup","text":""},{"location":"getting-started/installation/#postgresql-installation","title":"PostgreSQL Installation","text":"Ubuntu/DebianmacOSDocker (Recommended for Development) <pre><code># Install PostgreSQL\nsudo apt install postgresql postgresql-contrib\n\n# Start PostgreSQL service\nsudo systemctl start postgresql\nsudo systemctl enable postgresql\n\n# Create database and user\nsudo -u postgres psql\n</code></pre> <pre><code>CREATE USER crew_user WITH PASSWORD 'crew_pass';\nCREATE DATABASE crew_appraisals OWNER crew_user;\nGRANT ALL PRIVILEGES ON DATABASE crew_appraisals TO crew_user;\n\\q\n</code></pre> <pre><code># Install PostgreSQL via Homebrew\nbrew install postgresql\n\n# Start PostgreSQL service\nbrew services start postgresql\n\n# Create database and user\ncreateuser -s crew_user\ncreatedb -O crew_user crew_appraisals\n\n# Set password\npsql -d crew_appraisals -c \"ALTER USER crew_user PASSWORD 'crew_pass';\"\n</code></pre> <pre><code># Start PostgreSQL container\ndocker run -d \\\n  --name postgres-crew \\\n  -e POSTGRES_DB=crew_appraisals \\\n  -e POSTGRES_USER=crew_user \\\n  -e POSTGRES_PASSWORD=crew_pass \\\n  -p 5432:5432 \\\n  postgres:15\n\n# Or use the provided docker-compose file\ncd docker\ndocker-compose -f docker-compose.dev.yaml up -d postgres\n</code></pre>"},{"location":"getting-started/installation/#database-configuration","title":"Database Configuration","text":"<ol> <li> <p>Verify Connection:    <pre><code># Test PostgreSQL connection\npsql -h localhost -U crew_user -d crew_appraisals -c \"SELECT version();\"\n</code></pre></p> </li> <li> <p>Run Migrations:    <pre><code># Initialize database schema\npoetry run alembic upgrade head\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#redis-setup-optional-but-recommended","title":"Redis Setup (Optional but Recommended)","text":"<p>Redis is used for session management and caching.</p> Ubuntu/DebianmacOSDocker <pre><code># Install Redis\nsudo apt install redis-server\n\n# Configure Redis\nsudo systemctl start redis-server\nsudo systemctl enable redis-server\n\n# Test connection\nredis-cli ping\n</code></pre> <pre><code># Install Redis\nbrew install redis\n\n# Start Redis service\nbrew services start redis\n\n# Test connection\nredis-cli ping\n</code></pre> <pre><code># Start Redis container\ndocker run -d \\\n  --name redis-crew \\\n  -p 6379:6379 \\\n  redis:7-alpine\n\n# Or use docker-compose\ncd docker\ndocker-compose -f docker-compose.dev.yaml up -d redis\n</code></pre>"},{"location":"getting-started/installation/#environment-configuration","title":"Environment Configuration","text":""},{"location":"getting-started/installation/#step-1-copy-environment-file","title":"Step 1: Copy Environment File","text":"<pre><code># Copy the example environment file\ncp .env.example .env\n</code></pre>"},{"location":"getting-started/installation/#step-2-configure-environment-variables","title":"Step 2: Configure Environment Variables","text":"<p>Edit the <code>.env</code> file with your specific settings:</p> <pre><code># Database Configuration\nDATABASE_URL=postgresql+asyncpg://crew_user:crew_pass@localhost:5432/crew_appraisals\n\n# Redis Configuration (if using)\nREDIS_URL=redis://localhost:6379/0\n\n# Security - IMPORTANT: Change in production\nSECRET_KEY=your-super-secret-key-here-change-in-production\n\n# Environment\nENVIRONMENT=development  # or production\nDEBUG=True  # Set to False in production\nLOG_LEVEL=DEBUG  # Use INFO or WARNING in production\n</code></pre> <p>Security Warning</p> <p>Always change the <code>SECRET_KEY</code> in production environments. Generate a secure key using: <pre><code>python -c \"import secrets; print(secrets.token_urlsafe(32))\"\n</code></pre></p>"},{"location":"getting-started/installation/#verification-and-testing","title":"Verification and Testing","text":""},{"location":"getting-started/installation/#step-1-run-health-checks","title":"Step 1: Run Health Checks","text":"<pre><code># Start the development server\npoetry run python src/main.py\n\n# In another terminal, test endpoints\ncurl http://localhost:8000/health\ncurl http://localhost:8000/health/ready\n</code></pre>"},{"location":"getting-started/installation/#step-2-run-tests","title":"Step 2: Run Tests","text":"<pre><code># Run all tests\npoetry run pytest\n\n# Run with coverage\npoetry run pytest --cov=src\n\n# Run specific test categories\npoetry run pytest -m unit\npoetry run pytest -m integration\n</code></pre>"},{"location":"getting-started/installation/#step-3-verify-database-connection","title":"Step 3: Verify Database Connection","text":"<pre><code># Check database tables\npsql -h localhost -U crew_user -d crew_appraisals -c \"\\dt\"\n\n# Check alembic version\npoetry run alembic current\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"Poetry command not found <p>Solution: Add Poetry to your PATH or restart your terminal: <pre><code>echo 'export PATH=\"$HOME/.local/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre></p> PostgreSQL connection refused <p>Solutions: <pre><code># Check if PostgreSQL is running\nsudo systemctl status postgresql\n\n# Start PostgreSQL if stopped\nsudo systemctl start postgresql\n\n# Check connection settings in .env file\ncat .env | grep DATABASE_URL\n</code></pre></p> Permission denied for database <p>Solution: Ensure the database user has proper permissions: <pre><code>sudo -u postgres psql\nGRANT ALL PRIVILEGES ON DATABASE crew_appraisals TO crew_user;\nGRANT ALL ON SCHEMA public TO crew_user;\n</code></pre></p> Redis connection error <p>Solutions: <pre><code># Check Redis status\nredis-cli ping\n\n# Start Redis if stopped\nsudo systemctl start redis-server\n\n# Check Redis URL in .env\ncat .env | grep REDIS_URL\n</code></pre></p> Python version issues <p>Solution: Ensure you're using Python 3.11: <pre><code># Check active Python version\npython --version\n\n# Use specific Python version with Poetry\npoetry env use python3.11\n</code></pre></p>"},{"location":"getting-started/installation/#performance-tuning","title":"Performance Tuning","text":"<p>For production environments, consider these optimizations:</p> <ol> <li> <p>Database Connection Pooling:    <pre><code># Adjust in .env\nDATABASE_POOL_SIZE=50\nDATABASE_MAX_OVERFLOW=100\n</code></pre></p> </li> <li> <p>Worker Processes:    <pre><code># Adjust based on CPU cores\nMAX_WORKERS=8\n</code></pre></p> </li> <li> <p>Memory Settings:    <pre><code># PostgreSQL memory settings\nsudo nano /etc/postgresql/15/main/postgresql.conf\n# Adjust shared_buffers, effective_cache_size\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#log-files","title":"Log Files","text":"<p>Monitor these log files for issues:</p> <ul> <li>Application logs: Check console output or configure file logging</li> <li>PostgreSQL logs: <code>/var/log/postgresql/postgresql-15-main.log</code></li> <li>Redis logs: <code>/var/log/redis/redis-server.log</code></li> <li>Docker logs: <code>docker compose logs -f</code></li> </ul>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Once installation is complete:</p> <ol> <li>\ud83d\udcd6 Read the Configuration Guide for detailed settings</li> <li>\ud83d\udd10 Follow the Authentication Guide to understand security</li> <li>\ud83d\ude80 Try the First API Call tutorial</li> <li>\ud83d\udcda Explore the full API documentation at <code>http://localhost:8000/docs</code></li> </ol> <p>Installation Complete</p> <p>You now have a fully functional Crew Appraisals Backend API installation! \ud83c\udf89</p>"},{"location":"getting-started/quickstart/","title":"5-Minute Quickstart Guide","text":"<p>Get up and running with the Crew Management Backend API in just 5 minutes using Docker Compose!</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose (v2.0+)</li> <li>Git</li> </ul> <p>Docker Installation</p> <ul> <li>Linux: Install via your package manager or get.docker.com</li> <li>Windows: Install Docker Desktop for Windows</li> <li>Mac: Install Docker Desktop for Mac</li> </ul>"},{"location":"getting-started/quickstart/#quick-setup-with-docker-compose","title":"Quick Setup with Docker Compose","text":""},{"location":"getting-started/quickstart/#1-clone-the-repository","title":"1. Clone the Repository","text":"Linux/MacWindows (PowerShell)Windows (Command Prompt) <pre><code>git clone https://github.com/example/crewing-backend.git\ncd crewing-backend\n</code></pre> <pre><code>git clone https://github.com/example/crewing-backend.git\ncd crewing-backend\n</code></pre> <pre><code>git clone https://github.com/example/crewing-backend.git\ncd crewing-backend\n</code></pre>"},{"location":"getting-started/quickstart/#2-configure-environment","title":"2. Configure Environment","text":"<pre><code># Copy the example environment file\ncp backend/.env.example backend/.env\n\n# The default values are pre-configured for Docker Compose\n# No changes needed for quickstart!\n</code></pre>"},{"location":"getting-started/quickstart/#3-start-all-services","title":"3. Start All Services","text":"Linux/MacWindows (PowerShell)Windows (Command Prompt) <pre><code># Navigate to the docker directory\ncd backend/docker\n\n# Start all services (PostgreSQL, Redis, Backend API, Nginx)\ndocker-compose up -d\n\n# View logs to ensure everything is running\ndocker-compose logs -f\n# Press Ctrl+C to stop following logs\n</code></pre> <pre><code># Navigate to the docker directory\ncd backend\\docker\n\n# Start all services (PostgreSQL, Redis, Backend API, Nginx)\ndocker-compose up -d\n\n# View logs to ensure everything is running\ndocker-compose logs -f\n# Press Ctrl+C to stop following logs\n</code></pre> <pre><code>REM Navigate to the docker directory\ncd backend\\docker\n\nREM Start all services (PostgreSQL, Redis, Backend API, Nginx)\ndocker-compose up -d\n\nREM View logs to ensure everything is running\ndocker-compose logs -f\nREM Press Ctrl+C to stop following logs\n</code></pre>"},{"location":"getting-started/quickstart/#4-verify-services-are-running","title":"4. Verify Services Are Running","text":"Linux/MacWindows (PowerShell/CMD) <pre><code># Check all containers are healthy\ndocker-compose ps\n\n# You should see:\n# NAME                STATUS              PORTS\n# crewing_nginx       Up                  0.0.0.0:80-&gt;80/tcp\n# crewing_backend     Up (healthy)        0.0.0.0:8000-&gt;8000/tcp\n# crewing_postgres    Up (healthy)        0.0.0.0:5432-&gt;5432/tcp\n# crewing_redis       Up                  0.0.0.0:6379-&gt;6379/tcp\n</code></pre> <pre><code># Check all containers are healthy\ndocker-compose ps\n\n# You should see:\n# NAME                STATUS              PORTS\n# crewing_nginx       Up                  0.0.0.0:80-&gt;80/tcp\n# crewing_backend     Up (healthy)        0.0.0.0:8000-&gt;8000/tcp\n# crewing_postgres    Up (healthy)        0.0.0.0:5432-&gt;5432/tcp\n# crewing_redis       Up                  0.0.0.0:6379-&gt;6379/tcp\n</code></pre>"},{"location":"getting-started/quickstart/#5-initialize-database","title":"5. Initialize Database","text":"Linux/MacWindows (PowerShell) <pre><code># Run database migrations\ndocker-compose exec backend alembic upgrade head\n\n# Create initial admin user (optional but recommended)\ndocker-compose exec backend python scripts/create_admin.py\n</code></pre> <pre><code># Run database migrations\ndocker-compose exec backend alembic upgrade head\n\n# Create initial admin user (optional but recommended)\ndocker-compose exec backend python scripts/create_admin.py\n</code></pre>"},{"location":"getting-started/quickstart/#6-verify-installation","title":"6. Verify Installation","text":"<p>Open your browser and visit: - API Server: <code>http://localhost:8000</code> - Interactive Docs: <code>http://localhost:8000/docs</code> - Health Check: <code>http://localhost:8000/health</code></p> <p>Health Check</p> <p>Visit <code>http://localhost:8000/health</code> to verify everything is working correctly.</p>"},{"location":"getting-started/quickstart/#make-your-first-api-call","title":"Make Your First API Call","text":""},{"location":"getting-started/quickstart/#register-a-new-user","title":"Register a New User","text":"cURLPython <pre><code>curl -X POST \"http://localhost:8000/api/v1/auth/register\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"username\": \"testuser\",\n       \"email\": \"test@example.com\",\n       \"password\": \"securepassword123\",\n       \"first_name\": \"Test\",\n       \"last_name\": \"User\",\n       \"role\": \"crew_member\"\n     }'\n</code></pre> <pre><code>import requests\n\n# Register a new user\nresponse = requests.post(\n    \"http://localhost:8000/api/v1/auth/register\",\n    json={\n        \"username\": \"testuser\",\n        \"email\": \"test@example.com\",\n        \"password\": \"securepassword123\",\n        \"first_name\": \"Test\",\n        \"last_name\": \"User\",\n        \"role\": \"crew_member\"\n    }\n)\n\nprint(f\"Status: {response.status_code}\")\nprint(f\"Response: {response.json()}\")\n</code></pre>"},{"location":"getting-started/quickstart/#login-and-get-access-token","title":"Login and Get Access Token","text":"cURLPython <pre><code>curl -X POST \"http://localhost:8000/api/v1/auth/login\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"username\": \"testuser\",\n       \"password\": \"securepassword123\"\n     }'\n</code></pre> <pre><code># Login to get access token\nresponse = requests.post(\n    \"http://localhost:8000/api/v1/auth/login\",\n    json={\n        \"username\": \"testuser\",\n        \"password\": \"securepassword123\"\n    }\n)\n\nif response.status_code == 200:\n    tokens = response.json()\n    access_token = tokens[\"access_token\"]\n    print(f\"Access token: {access_token}\")\nelse:\n    print(f\"Login failed: {response.text}\")\n</code></pre>"},{"location":"getting-started/quickstart/#make-an-authenticated-request","title":"Make an Authenticated Request","text":"cURLPython <pre><code># Replace YOUR_TOKEN with the access_token from login\ncurl -X GET \"http://localhost:8000/api/v1/auth/me\" \\\n     -H \"Authorization: Bearer YOUR_TOKEN\"\n</code></pre> <pre><code># Get current user info (requires access token from login)\nheaders = {\"Authorization\": f\"Bearer {access_token}\"}\n\nresponse = requests.get(\n    \"http://localhost:8000/api/v1/auth/me\",\n    headers=headers\n)\n\nprint(f\"User info: {response.json()}\")\n</code></pre>"},{"location":"getting-started/quickstart/#expected-response","title":"Expected Response","text":"<p>A successful authenticated request will return user information:</p> <pre><code>{\n  \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"username\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\",\n  \"role\": \"crew_member\",\n  \"is_active\": true\n}\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<p>Explore the API</p> <ul> <li>Visit <code>http://localhost:8000/docs</code> for interactive API documentation</li> <li>Check out the Authentication Guide for detailed auth workflows</li> <li>See Configuration Guide for advanced settings</li> </ul> <p>Production Ready</p> <p>For production deployment, see the Installation Guide for detailed setup instructions.</p>"},{"location":"getting-started/quickstart/#quick-troubleshooting","title":"Quick Troubleshooting","text":""},{"location":"getting-started/quickstart/#database-connection-error","title":"Database Connection Error","text":"<pre><code># Make sure PostgreSQL is running\ndocker-compose -f docker/docker-compose.dev.yaml ps\n\n# Check database logs\ndocker-compose -f docker/docker-compose.dev.yaml logs postgres\n</code></pre>"},{"location":"getting-started/quickstart/#port-already-in-use","title":"Port Already in Use","text":"<pre><code># Kill process using port 8000\nlsof -ti:8000 | xargs kill -9\n\n# Or run on a different port\npoetry run uvicorn src.main:app --host 0.0.0.0 --port 8001\n</code></pre>"},{"location":"getting-started/quickstart/#poetry-not-found","title":"Poetry Not Found","text":"<pre><code># Add Poetry to PATH (if using the installer script)\nsource $HOME/.poetry/env\n\n# Or install via pip\npip install poetry\n</code></pre> <p>That's it! You now have a fully functional Crew Appraisals Backend API running locally. \ud83d\ude80</p>"},{"location":"mcp/","title":"Model Context Protocol (MCP) Integration","text":""},{"location":"mcp/#overview","title":"Overview","text":"<p>The Crew Appraisals system implements the Model Context Protocol (MCP) to enable seamless integration with Large Language Models (LLMs) like Claude, GPT-4, and others. This allows AI assistants to directly interact with crew management functionality through a standardized interface.</p>"},{"location":"mcp/#what-is-mcp","title":"What is MCP?","text":"<p>The Model Context Protocol is a protocol designed to connect AI assistants with external systems and tools. It provides a standardized way for LLMs to:</p> <ul> <li>Execute functions with proper validation</li> <li>Access structured data sources</li> <li>Maintain context across tool calls</li> <li>Handle authentication and permissions</li> </ul>"},{"location":"mcp/#fastmcp-framework","title":"FastMCP Framework","text":"<p>Our implementation uses the FastMCP 2.0 framework, which integrates directly with FastAPI to provide:</p> <ul> <li>Seamless Integration: Built on top of existing FastAPI endpoints</li> <li>Type Safety: Full Pydantic schema validation</li> <li>Async Support: Native async/await support for database operations</li> <li>Error Handling: Robust error handling with detailed responses</li> <li>Documentation: Auto-generated tool schemas and documentation</li> </ul>"},{"location":"mcp/#architecture","title":"Architecture","text":"<pre><code>graph TB\n    A[LLM Client] --&gt; B[MCP Client]\n    B --&gt; C[FastMCP Server]\n    C --&gt; D[FastAPI Application]\n    D --&gt; E[Business Logic Services]\n    E --&gt; F[Database Layer]\n\n    subgraph \"Available Tools\"\n        G[search_crew]\n        H[create_appraisal]\n        I[check_certificates]\n        J[vessel_assignment]\n        K[compliance_report]\n    end\n\n    C --&gt; G\n    C --&gt; H\n    C --&gt; I\n    C --&gt; J\n    C --&gt; K</code></pre>"},{"location":"mcp/#available-tools","title":"Available Tools","text":""},{"location":"mcp/#core-crew-management-tools","title":"Core Crew Management Tools","text":"Tool Description Primary Use Case <code>search_crew</code> Search crew members with AI-powered matching Finding crew members using natural language queries <code>create_appraisal</code> Create performance appraisals with structured evaluation AI-assisted performance evaluations <code>check_certificates</code> Monitor certificate expiry status Compliance monitoring and renewal planning <code>vessel_assignment</code> Manage crew vessel assignments Crew deployment and scheduling <code>compliance_report</code> Generate compliance reports Regulatory compliance monitoring"},{"location":"mcp/#tool-categories","title":"Tool Categories","text":""},{"location":"mcp/#search-discovery","title":"\ud83d\udd0d Search &amp; Discovery","text":"<ul> <li>search_crew: Natural language crew search with advanced filtering</li> </ul>"},{"location":"mcp/#performance-management","title":"\ud83d\udcca Performance Management","text":"<ul> <li>create_appraisal: Structured performance evaluations</li> <li>compliance_report: Performance and compliance reporting</li> </ul>"},{"location":"mcp/#compliance-certification","title":"\ud83d\udccb Compliance &amp; Certification","text":"<ul> <li>check_certificates: Certificate monitoring and alerts</li> <li>compliance_report: Regulatory compliance status</li> </ul>"},{"location":"mcp/#operations-management","title":"\ud83d\udea2 Operations Management","text":"<ul> <li>vessel_assignment: Crew deployment and assignment</li> <li>compliance_report: Operational compliance oversight</li> </ul>"},{"location":"mcp/#integration-guide","title":"Integration Guide","text":""},{"location":"mcp/#1-server-configuration","title":"1. Server Configuration","text":"<p>The MCP server is automatically configured when the FastAPI application starts:</p> <pre><code>from fastmcp import FastMCP\nfrom src.mcp.server import setup_mcp\n\napp = FastAPI()\nmcp = setup_mcp(app)  # Adds MCP endpoints to FastAPI\n</code></pre>"},{"location":"mcp/#2-client-integration","title":"2. Client Integration","text":""},{"location":"mcp/#openai-integration","title":"OpenAI Integration","text":"<p>See OpenAI Integration Examples for complete setup and usage examples.</p>"},{"location":"mcp/#claude-integration","title":"Claude Integration","text":"<p>See Claude Integration Examples for complete setup and usage examples.</p>"},{"location":"mcp/#3-tool-discovery","title":"3. Tool Discovery","text":"<p>Tools can be discovered via the <code>/mcp/tools</code> endpoint:</p> <pre><code>curl https://api.crew-appraisals.com/mcp/tools\n</code></pre>"},{"location":"mcp/#4-tool-execution","title":"4. Tool Execution","text":"<p>Tools are executed via the <code>/mcp/execute</code> endpoint:</p> <pre><code>curl -X POST https://api.crew-appraisals.com/mcp/execute \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"tool\": \"search_crew\",\n    \"parameters\": {\n      \"query\": \"experienced deck officers\",\n      \"limit\": 5\n    }\n  }'\n</code></pre>"},{"location":"mcp/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>MCP tools inherit the same authentication and authorization mechanisms as the underlying FastAPI application:</p> <ul> <li>API Keys: Standard API key authentication</li> <li>Role-based Access: Tools respect user permissions</li> <li>Rate Limiting: Standard rate limiting applies</li> <li>Audit Logging: All tool executions are logged</li> </ul>"},{"location":"mcp/#error-handling","title":"Error Handling","text":"<p>All MCP tools implement consistent error handling:</p> <pre><code>{\n  \"success\": false,\n  \"error\": \"Detailed error message\",\n  \"error_type\": \"ValidationError\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\"\n}\n</code></pre>"},{"location":"mcp/#best-practices","title":"Best Practices","text":""},{"location":"mcp/#for-llm-integration","title":"For LLM Integration","text":"<ol> <li>Parameter Validation: Always validate parameters before tool calls</li> <li>Error Recovery: Handle tool errors gracefully in conversation flow</li> <li>Context Management: Maintain relevant context across tool calls</li> <li>Result Processing: Parse and present tool results meaningfully</li> </ol>"},{"location":"mcp/#for-system-integration","title":"For System Integration","text":"<ol> <li>Rate Limiting: Implement appropriate rate limiting for AI clients</li> <li>Monitoring: Monitor tool usage and performance metrics</li> <li>Security: Ensure proper authentication for MCP endpoints</li> <li>Caching: Cache frequently accessed data to improve performance</li> </ol>"},{"location":"mcp/#development","title":"Development","text":""},{"location":"mcp/#adding-new-tools","title":"Adding New Tools","text":"<p>To add a new MCP tool:</p> <ol> <li>Implement Tool Function: Create async function in <code>src/mcp/tools.py</code></li> <li>Register with MCP: Add tool registration in <code>src/mcp/server.py</code></li> <li>Add Documentation: Create tool documentation in <code>docs/mcp/tools/</code></li> <li>Test Integration: Add tests in <code>tests/mcp/</code></li> </ol>"},{"location":"mcp/#testing-tools","title":"Testing Tools","text":"<pre><code># Run MCP tool tests\npytest tests/mcp/\n\n# Test specific tool\npytest tests/mcp/test_search_crew.py\n\n# Integration test with LLM client\npytest tests/integration/test_mcp_integration.py\n</code></pre>"},{"location":"mcp/#configuration","title":"Configuration","text":"<p>MCP server settings are configured via environment variables:</p> <pre><code>MCP_ENABLED=true\nMCP_PATH=/mcp\nMCP_NAME=crew-appraisals-mcp\nMCP_DESCRIPTION=\"Crew management tools for LLM integration\"\nMCP_VERSION=1.0.0\n</code></pre>"},{"location":"mcp/#monitoring-analytics","title":"Monitoring &amp; Analytics","text":""},{"location":"mcp/#key-metrics","title":"Key Metrics","text":"<ul> <li>Tool Usage: Track which tools are used most frequently</li> <li>Response Times: Monitor tool execution performance</li> <li>Error Rates: Track tool failures and error patterns</li> <li>User Patterns: Analyze LLM usage patterns and optimization opportunities</li> </ul>"},{"location":"mcp/#logging","title":"Logging","text":"<p>All MCP interactions are logged with structured data:</p> <pre><code>{\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"tool\": \"search_crew\",\n  \"parameters\": {\"query\": \"deck officers\"},\n  \"execution_time\": 0.145,\n  \"success\": true,\n  \"user_id\": \"llm-client-123\"\n}\n</code></pre>"},{"location":"mcp/#troubleshooting","title":"Troubleshooting","text":""},{"location":"mcp/#common-issues","title":"Common Issues","text":"<ol> <li>Tool Not Found: Verify tool is registered in MCP server</li> <li>Parameter Validation: Check parameter types and required fields</li> <li>Database Connection: Ensure database session is properly injected</li> <li>Authentication: Verify API credentials are valid</li> <li>Rate Limiting: Check if rate limits are being exceeded</li> </ol>"},{"location":"mcp/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging for detailed MCP interaction logs:</p> <pre><code>LOG_LEVEL=DEBUG\nMCP_DEBUG=true\n</code></pre>"},{"location":"mcp/#roadmap","title":"Roadmap","text":""},{"location":"mcp/#upcoming-features","title":"Upcoming Features","text":"<ul> <li>Streaming Support: Real-time tool execution with streaming responses</li> <li>Batch Operations: Execute multiple tools in a single request</li> <li>Tool Composition: Chain tools together for complex workflows</li> <li>Enhanced Analytics: Advanced usage analytics and optimization insights</li> <li>Custom Prompts: Pre-defined prompt templates for common tasks</li> </ul>"},{"location":"mcp/#community-integration","title":"Community Integration","text":"<ul> <li>Plugin System: Third-party tool development framework</li> <li>Tool Marketplace: Shared tool repository</li> <li>Documentation Templates: Standardized tool documentation</li> <li>Testing Framework: Comprehensive testing utilities for tool development</li> </ul>"},{"location":"mcp/examples/claude/","title":"Claude Integration Examples","text":""},{"location":"mcp/examples/claude/#overview","title":"Overview","text":"<p>This guide demonstrates how to integrate the Crew Appraisals MCP tools with Anthropic's Claude using tool use (function calling). The examples show both basic usage and advanced conversational patterns optimized for Claude's capabilities.</p>"},{"location":"mcp/examples/claude/#prerequisites","title":"Prerequisites","text":""},{"location":"mcp/examples/claude/#required-dependencies","title":"Required Dependencies","text":"<pre><code>pip install anthropic requests python-dotenv\n</code></pre>"},{"location":"mcp/examples/claude/#environment-setup","title":"Environment Setup","text":"<p>Create a <code>.env</code> file with your configuration:</p> <pre><code>ANTHROPIC_API_KEY=your_claude_api_key_here\nMCP_BASE_URL=https://api.crew-appraisals.com/mcp\nMCP_API_KEY=your_mcp_api_key_here\n</code></pre>"},{"location":"mcp/examples/claude/#basic-setup","title":"Basic Setup","text":""},{"location":"mcp/examples/claude/#client-configuration","title":"Client Configuration","text":"<pre><code>import os\nimport json\nimport requests\nfrom anthropic import Anthropic\nfrom typing import Dict, List, Any, Optional\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nclass CrewMCPClaudeClient:\n    \"\"\"Client for integrating Crew Appraisals MCP tools with Claude\"\"\"\n\n    def __init__(self):\n        self.claude_client = Anthropic(api_key=os.getenv(\"ANTHROPIC_API_KEY\"))\n        self.mcp_base_url = os.getenv(\"MCP_BASE_URL\")\n        self.mcp_api_key = os.getenv(\"MCP_API_KEY\")\n        self.tools = self._load_claude_tools()\n\n    def _load_claude_tools(self) -&gt; List[Dict]:\n        \"\"\"Load MCP tools and convert to Claude tool use format\"\"\"\n        response = requests.get(\n            f\"{self.mcp_base_url}/tools\",\n            headers={\"Authorization\": f\"Bearer {self.mcp_api_key}\"}\n        )\n        mcp_tools = response.json()[\"tools\"]\n\n        # Convert MCP tool schema to Claude tool use format\n        claude_tools = []\n        for tool in mcp_tools:\n            claude_tools.append({\n                \"name\": tool[\"name\"],\n                \"description\": tool[\"description\"],\n                \"input_schema\": tool[\"parameters\"]\n            })\n\n        return claude_tools\n\n    def execute_tool(self, tool_name: str, parameters: Dict) -&gt; Dict:\n        \"\"\"Execute an MCP tool\"\"\"\n        try:\n            response = requests.post(\n                f\"{self.mcp_base_url}/execute\",\n                headers={\n                    \"Authorization\": f\"Bearer {self.mcp_api_key}\",\n                    \"Content-Type\": \"application/json\"\n                },\n                json={\n                    \"tool\": tool_name,\n                    \"parameters\": parameters\n                }\n            )\n            response.raise_for_status()\n            return response.json()\n        except requests.exceptions.RequestException as e:\n            return {\n                \"error\": f\"Failed to execute tool {tool_name}: {str(e)}\",\n                \"success\": False\n            }\n\n    async def process_tool_calls(self, tool_calls: List[Dict]) -&gt; List[Dict]:\n        \"\"\"Process multiple tool calls and return results\"\"\"\n        results = []\n        for tool_call in tool_calls:\n            tool_name = tool_call[\"name\"]\n            parameters = tool_call[\"input\"]\n            result = self.execute_tool(tool_name, parameters)\n\n            results.append({\n                \"tool_use_id\": tool_call[\"id\"],\n                \"content\": json.dumps(result, indent=2),\n                \"type\": \"tool_result\"\n            })\n\n        return results\n</code></pre>"},{"location":"mcp/examples/claude/#claude-tool-definitions","title":"Claude Tool Definitions","text":""},{"location":"mcp/examples/claude/#complete-claude-tool-schemas","title":"Complete Claude Tool Schemas","text":"<pre><code>CREW_MCP_CLAUDE_TOOLS = [\n    {\n        \"name\": \"search_crew\",\n        \"description\": \"\"\"Search for crew members using natural language queries with advanced filtering.\n        This tool enables intelligent crew discovery using conversational queries combined with structured filters.\n        Perfect for finding crew members based on experience, qualifications, availability, or specific requirements.\"\"\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"query\": {\n                    \"type\": \"string\",\n                    \"description\": \"Natural language search query. Examples: 'experienced deck officers with valid STCW', 'available engineers for North Sea operations', 'certified radio operators ready for assignment'\"\n                },\n                \"filters\": {\n                    \"type\": \"object\",\n                    \"description\": \"Additional structured filters to refine search results\",\n                    \"properties\": {\n                        \"rank\": {\n                            \"type\": \"string\",\n                            \"description\": \"Filter by crew rank or position (e.g., 'Chief Officer', 'Second Engineer', 'Bosun')\"\n                        },\n                        \"department\": {\n                            \"type\": \"string\",\n                            \"enum\": [\"deck\", \"engine\", \"catering\", \"radio\", \"medical\"],\n                            \"description\": \"Filter by department: deck (navigation/cargo), engine (machinery), catering (food service), radio (communications), medical (health services)\"\n                        },\n                        \"status\": {\n                            \"type\": \"string\",\n                            \"enum\": [\"active\", \"available\", \"assigned\", \"leave\"],\n                            \"description\": \"Filter by current crew status: active (working), available (ready for assignment), assigned (currently deployed), leave (on shore leave)\"\n                        },\n                        \"vessel_id\": {\n                            \"type\": \"string\",\n                            \"description\": \"UUID to filter crew currently assigned to a specific vessel\"\n                        }\n                    }\n                },\n                \"limit\": {\n                    \"type\": \"integer\",\n                    \"description\": \"Maximum number of results to return (1-100)\",\n                    \"minimum\": 1,\n                    \"maximum\": 100,\n                    \"default\": 10\n                }\n            },\n            \"required\": [\"query\"]\n        }\n    },\n    {\n        \"name\": \"create_appraisal\",\n        \"description\": \"\"\"Create a comprehensive performance appraisal for a crew member with structured evaluation categories.\n        This tool facilitates systematic performance reviews with customizable evaluation criteria, scoring, and detailed feedback.\n        Supports multi-category evaluations with strengths, weaknesses, and development recommendations.\"\"\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"crew_member_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"UUID of the crew member being evaluated\"\n                },\n                \"vessel_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"UUID of the vessel where the evaluation period occurred (helps provide context for performance assessment)\"\n                },\n                \"period_start\": {\n                    \"type\": \"string\",\n                    \"description\": \"Start date of the evaluation period in YYYY-MM-DD format\"\n                },\n                \"period_end\": {\n                    \"type\": \"string\",\n                    \"description\": \"End date of the evaluation period in YYYY-MM-DD format\"\n                },\n                \"categories\": {\n                    \"type\": \"array\",\n                    \"description\": \"List of evaluation categories with detailed assessments\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\n                                \"type\": \"string\",\n                                \"description\": \"Category name (e.g., 'Technical Skills', 'Leadership', 'Safety Compliance', 'Communication', 'Teamwork')\"\n                            },\n                            \"score\": {\n                                \"type\": \"number\",\n                                \"minimum\": 1,\n                                \"maximum\": 5,\n                                \"description\": \"Numerical score from 1 (poor) to 5 (excellent)\"\n                            },\n                            \"comments\": {\n                                \"type\": \"string\",\n                                \"description\": \"Detailed comments explaining the score and providing specific examples\"\n                            },\n                            \"strengths\": {\n                                \"type\": \"string\",\n                                \"description\": \"Specific strengths demonstrated in this category\"\n                            },\n                            \"weaknesses\": {\n                                \"type\": \"string\",\n                                \"description\": \"Areas needing improvement or development\"\n                            }\n                        },\n                        \"required\": [\"name\", \"score\"]\n                    }\n                },\n                \"evaluator_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"UUID of the person conducting the evaluation (optional - defaults to AI assistant if not provided)\"\n                }\n            },\n            \"required\": [\"crew_member_id\", \"vessel_id\", \"period_start\", \"period_end\", \"categories\"]\n        }\n    },\n    {\n        \"name\": \"check_certificates\",\n        \"description\": \"\"\"Monitor and analyze certificate expiry status for crew members with comprehensive filtering options.\n        Essential for compliance management, this tool helps track certificate validity, identify expiring documents,\n        and maintain regulatory compliance across individuals, departments, or the entire organization.\"\"\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"crew_member_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"UUID of specific crew member to check (if omitted, checks all crew members or those in specified department)\"\n                },\n                \"check_expiring\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"Whether to include certificates expiring within the specified timeframe in addition to already expired ones\",\n                    \"default\": true\n                },\n                \"days_ahead\": {\n                    \"type\": \"integer\",\n                    \"description\": \"Number of days ahead to check for expiring certificates (1-365 days). Common values: 30 (urgent), 90 (quarterly planning), 180 (long-term planning)\",\n                    \"minimum\": 1,\n                    \"maximum\": 365,\n                    \"default\": 90\n                },\n                \"department\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"deck\", \"engine\", \"catering\", \"radio\", \"medical\"],\n                    \"description\": \"Filter by department to check certificates for all crew in that department\"\n                }\n            }\n        }\n    },\n    {\n        \"name\": \"vessel_assignment\",\n        \"description\": \"\"\"Create and manage crew vessel assignments with intelligent validation and conflict detection.\n        This tool handles crew deployment, ensuring proper qualifications, avoiding conflicts, and optimizing\n        crew utilization across the fleet. Includes automated validation for compliance and operational requirements.\"\"\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"crew_member_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"UUID of the crew member to assign to a vessel\"\n                },\n                \"vessel_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"UUID of the target vessel for the assignment\"\n                },\n                \"role\": {\n                    \"type\": \"string\",\n                    \"description\": \"Position/role on the vessel. Examples: 'Master' (Captain), 'Chief Officer', 'Second Officer', 'Third Officer', 'Chief Engineer', 'Second Engineer', 'Third Engineer', 'Bosun', 'Able Seaman', 'Ordinary Seaman', 'Chief Cook', 'Steward', 'Galley Hand'\"\n                },\n                \"start_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"Assignment start date in YYYY-MM-DD format\"\n                },\n                \"end_date\": {\n                    \"type\": \"string\",\n                    \"description\": \"Assignment end date in YYYY-MM-DD format (optional - omit for open-ended assignments)\"\n                }\n            },\n            \"required\": [\"crew_member_id\", \"vessel_id\", \"role\", \"start_date\"]\n        }\n    },\n    {\n        \"name\": \"compliance_report\",\n        \"description\": \"\"\"Generate comprehensive compliance reports with risk analysis and actionable recommendations.\n        This powerful tool provides detailed compliance status for vessels, departments, or the entire organization,\n        including certificate analysis, manning compliance, and regulatory risk assessment.\"\"\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"vessel_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"UUID of specific vessel to analyze (generates vessel-specific compliance report including manning, certificates, and operational readiness)\"\n                },\n                \"department_id\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"deck\", \"engine\", \"catering\", \"radio\", \"medical\"],\n                    \"description\": \"Department to analyze across all vessels and shore-based positions\"\n                },\n                \"include_expiring\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"Include certificates expiring within 90 days in the compliance analysis\",\n                    \"default\": true\n                },\n                \"format\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"summary\", \"detailed\", \"csv\"],\n                    \"description\": \"Report format: 'summary' for executive overview, 'detailed' for comprehensive analysis, 'csv' for data export\",\n                    \"default\": \"summary\"\n                }\n            }\n        }\n    }\n]\n</code></pre>"},{"location":"mcp/examples/claude/#basic-examples","title":"Basic Examples","text":""},{"location":"mcp/examples/claude/#1-simple-crew-search-with-claude","title":"1. Simple Crew Search with Claude","text":"<pre><code>async def claude_crew_search_example():\n    client = CrewMCPClaudeClient()\n\n    message = client.claude_client.messages.create(\n        model=\"claude-3-5-sonnet-20241022\",\n        max_tokens=1024,\n        system=\"\"\"You are an expert maritime crew management assistant. You help find, evaluate,\n        and manage crew members for maritime vessels. Always provide helpful context and\n        actionable information when using tools.\"\"\",\n        messages=[\n            {\n                \"role\": \"user\",\n                \"content\": \"I need to find experienced deck officers who are currently available for assignment to our North Sea operations.\"\n            }\n        ],\n        tools=CREW_MCP_CLAUDE_TOOLS\n    )\n\n    # Process tool calls if present\n    if message.content[0].type == \"tool_use\":\n        tool_call = message.content[0]\n        result = client.execute_tool(tool_call.name, tool_call.input)\n\n        # Create follow-up message with tool results\n        follow_up = client.claude_client.messages.create(\n            model=\"claude-3-5-sonnet-20241022\",\n            max_tokens=1024,\n            messages=[\n                {\n                    \"role\": \"user\",\n                    \"content\": \"I need to find experienced deck officers who are currently available for assignment to our North Sea operations.\"\n                },\n                {\n                    \"role\": \"assistant\",\n                    \"content\": message.content\n                },\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"type\": \"tool_result\",\n                            \"tool_use_id\": tool_call.id,\n                            \"content\": json.dumps(result)\n                        }\n                    ]\n                }\n            ],\n            tools=CREW_MCP_CLAUDE_TOOLS\n        )\n\n        print(\"Claude's Response:\", follow_up.content[0].text)\n    else:\n        print(\"Claude's Response:\", message.content[0].text)\n\n# Run the example\nimport asyncio\nasyncio.run(claude_crew_search_example())\n</code></pre>"},{"location":"mcp/examples/claude/#2-multi-tool-compliance-analysis","title":"2. Multi-Tool Compliance Analysis","text":"<pre><code>async def claude_compliance_workflow():\n    client = CrewMCPClaudeClient()\n\n    # Initial request for comprehensive analysis\n    message = client.claude_client.messages.create(\n        model=\"claude-3-5-sonnet-20241022\",\n        max_tokens=2048,\n        system=\"\"\"You are a maritime compliance expert. When asked to analyze compliance,\n        you should use multiple tools to provide a comprehensive assessment including:\n        1. Overall compliance status\n        2. Certificate expiry analysis\n        3. Specific recommendations for improvement\n\n        Always provide actionable insights and prioritize safety-critical issues.\"\"\",\n        messages=[\n            {\n                \"role\": \"user\",\n                \"content\": \"I need a comprehensive compliance analysis for MV Ocean Pioneer (vessel ID: 123e4567-e89b-12d3-a456-426614174000). The vessel is scheduled for departure in 5 days and we want to ensure full compliance.\"\n            }\n        ],\n        tools=CREW_MCP_CLAUDE_TOOLS\n    )\n\n    # Handle multiple tool calls in sequence\n    conversation = [\n        {\n            \"role\": \"user\",\n            \"content\": \"I need a comprehensive compliance analysis for MV Ocean Pioneer (vessel ID: 123e4567-e89b-12d3-a456-426614174000). The vessel is scheduled for departure in 5 days and we want to ensure full compliance.\"\n        }\n    ]\n\n    # Process initial response\n    current_message = message\n    conversation.append({\"role\": \"assistant\", \"content\": current_message.content})\n\n    # Continue conversation until no more tool calls\n    while any(content.type == \"tool_use\" for content in current_message.content):\n        tool_results = []\n\n        for content_block in current_message.content:\n            if content_block.type == \"tool_use\":\n                result = client.execute_tool(content_block.name, content_block.input)\n                tool_results.append({\n                    \"type\": \"tool_result\",\n                    \"tool_use_id\": content_block.id,\n                    \"content\": json.dumps(result, indent=2)\n                })\n\n        # Add tool results to conversation\n        conversation.append({\n            \"role\": \"user\",\n            \"content\": tool_results\n        })\n\n        # Get next response from Claude\n        current_message = client.claude_client.messages.create(\n            model=\"claude-3-5-sonnet-20241022\",\n            max_tokens=2048,\n            messages=conversation,\n            tools=CREW_MCP_CLAUDE_TOOLS\n        )\n\n        conversation.append({\"role\": \"assistant\", \"content\": current_message.content})\n\n    # Print final analysis\n    print(\"Final Compliance Analysis:\")\n    for content in current_message.content:\n        if content.type == \"text\":\n            print(content.text)\n</code></pre>"},{"location":"mcp/examples/claude/#advanced-conversational-patterns","title":"Advanced Conversational Patterns","text":""},{"location":"mcp/examples/claude/#multi-turn-crew-management-conversation","title":"Multi-Turn Crew Management Conversation","text":"<pre><code>class ClaudeCrewConversationManager:\n    \"\"\"Advanced conversation manager optimized for Claude's capabilities\"\"\"\n\n    def __init__(self):\n        self.client = CrewMCPClaudeClient()\n        self.conversation = []\n        self.system_prompt = \"\"\"You are Claude, an expert maritime crew management AI assistant.\n\n        You specialize in:\n        - Crew recruitment and assignment optimization\n        - Maritime compliance and safety regulations\n        - Performance evaluation and career development\n        - Vessel manning and operational readiness\n        - Certificate management and renewal planning\n\n        Your approach:\n        - Always consider safety as the top priority\n        - Provide practical, actionable recommendations\n        - Use multiple tools when needed for comprehensive analysis\n        - Explain your reasoning and recommendations clearly\n        - Anticipate follow-up needs and offer proactive suggestions\n\n        When using tools:\n        - Choose the most appropriate tool(s) for each query\n        - Use specific parameters that match the user's intent\n        - Interpret results in context and provide meaningful insights\n        - Suggest related actions or considerations when relevant\"\"\"\n\n    async def chat(self, user_input: str) -&gt; str:\n        \"\"\"Process user input and return Claude's response\"\"\"\n\n        # Add user message to conversation\n        self.conversation.append({\n            \"role\": \"user\",\n            \"content\": user_input\n        })\n\n        # Get response from Claude\n        message = self.client.claude_client.messages.create(\n            model=\"claude-3-5-sonnet-20241022\",\n            max_tokens=2048,\n            system=self.system_prompt,\n            messages=self.conversation,\n            tools=CREW_MCP_CLAUDE_TOOLS\n        )\n\n        # Add assistant message to conversation\n        self.conversation.append({\n            \"role\": \"assistant\",\n            \"content\": message.content\n        })\n\n        # Process tool calls if present\n        while any(content.type == \"tool_use\" for content in message.content):\n            tool_results = []\n\n            for content_block in message.content:\n                if content_block.type == \"tool_use\":\n                    result = self.client.execute_tool(\n                        content_block.name,\n                        content_block.input\n                    )\n                    tool_results.append({\n                        \"type\": \"tool_result\",\n                        \"tool_use_id\": content_block.id,\n                        \"content\": json.dumps(result, indent=2)\n                    })\n\n            # Add tool results to conversation\n            self.conversation.append({\n                \"role\": \"user\",\n                \"content\": tool_results\n            })\n\n            # Get next response\n            message = self.client.claude_client.messages.create(\n                model=\"claude-3-5-sonnet-20241022\",\n                max_tokens=2048,\n                messages=self.conversation,\n                tools=CREW_MCP_CLAUDE_TOOLS\n            )\n\n            self.conversation.append({\n                \"role\": \"assistant\",\n                \"content\": message.content\n            })\n\n        # Extract and return text response\n        text_responses = [\n            content.text for content in message.content\n            if content.type == \"text\"\n        ]\n\n        return \"\\n\".join(text_responses)\n\n# Example usage\nasync def advanced_conversation_example():\n    manager = ClaudeCrewConversationManager()\n\n    # Multi-turn conversation\n    print(\"\ud83e\udd16 Claude Crew Management Assistant Ready\\n\")\n\n    response1 = await manager.chat(\n        \"I'm planning crew assignments for Q1 2025. Can you help me understand our current crew availability and compliance status?\"\n    )\n    print(\"Claude:\", response1, \"\\n\")\n\n    response2 = await manager.chat(\n        \"Focus on the deck department first. I need to know who's available and if there are any compliance issues that could affect assignments.\"\n    )\n    print(\"Claude:\", response2, \"\\n\")\n\n    response3 = await manager.chat(\n        \"Based on what you found, what would be your top 3 recommendations for optimizing our deck department assignments?\"\n    )\n    print(\"Claude:\", response3, \"\\n\")\n\n    response4 = await manager.chat(\n        \"Let's create some specific assignments. I need to assign crew to MV Arctic Explorer for a 3-month North Sea operation starting February 1st.\"\n    )\n    print(\"Claude:\", response4, \"\\n\")\n</code></pre>"},{"location":"mcp/examples/claude/#intelligent-crew-planning-assistant","title":"Intelligent Crew Planning Assistant","text":"<pre><code>class IntelligentCrewPlanner:\n    \"\"\"AI-powered crew planning with Claude's reasoning capabilities\"\"\"\n\n    def __init__(self):\n        self.client = CrewMCPClaudeClient()\n\n    async def plan_vessel_crewing(self, vessel_id: str, voyage_details: Dict) -&gt; Dict:\n        \"\"\"Comprehensive vessel crewing plan with AI recommendations\"\"\"\n\n        planning_prompt = f\"\"\"\n        I need to develop a comprehensive crewing plan for vessel {vessel_id}.\n\n        Voyage Details:\n        - Destination: {voyage_details.get('destination', 'Not specified')}\n        - Duration: {voyage_details.get('duration', 'Not specified')}\n        - Special Requirements: {voyage_details.get('requirements', 'Standard operation')}\n        - Departure Date: {voyage_details.get('departure_date', 'Not specified')}\n\n        Please help me:\n        1. Assess the current compliance status of the vessel\n        2. Identify available crew members suitable for this voyage\n        3. Check certificate validity for the voyage duration\n        4. Recommend optimal crew assignments\n        5. Highlight any risks or concerns\n        6. Suggest specific actions to ensure successful deployment\n\n        Consider factors like:\n        - Certificate expiry dates vs voyage duration\n        - Crew experience and qualifications for the route/operation\n        - Regulatory requirements for the destination\n        - Crew availability and rotation schedules\n        \"\"\"\n\n        message = self.client.claude_client.messages.create(\n            model=\"claude-3-5-sonnet-20241022\",\n            max_tokens=3000,\n            system=\"\"\"You are an expert maritime crew planner with deep knowledge of:\n            - International maritime regulations (STCW, MLC, etc.)\n            - Crew rotation and fatigue management\n            - Route-specific requirements and challenges\n            - Risk assessment and mitigation strategies\n\n            Your planning approach:\n            1. Always start with compliance and safety assessment\n            2. Use multiple tools to gather comprehensive information\n            3. Provide specific, actionable recommendations\n            4. Identify and prioritize risks\n            5. Create contingency plans for identified issues\n            6. Consider operational efficiency and crew welfare\"\"\",\n            messages=[{\n                \"role\": \"user\",\n                \"content\": planning_prompt\n            }],\n            tools=CREW_MCP_CLAUDE_TOOLS\n        )\n\n        # Process the complete planning workflow\n        conversation = [{\"role\": \"user\", \"content\": planning_prompt}]\n        current_message = message\n        conversation.append({\"role\": \"assistant\", \"content\": current_message.content})\n\n        # Continue until planning is complete\n        while any(content.type == \"tool_use\" for content in current_message.content):\n            tool_results = []\n\n            for content_block in current_message.content:\n                if content_block.type == \"tool_use\":\n                    result = self.client.execute_tool(\n                        content_block.name,\n                        content_block.input\n                    )\n                    tool_results.append({\n                        \"type\": \"tool_result\",\n                        \"tool_use_id\": content_block.id,\n                        \"content\": json.dumps(result, indent=2)\n                    })\n\n            conversation.append({\"role\": \"user\", \"content\": tool_results})\n\n            current_message = self.client.claude_client.messages.create(\n                model=\"claude-3-5-sonnet-20241022\",\n                max_tokens=3000,\n                messages=conversation,\n                tools=CREW_MCP_CLAUDE_TOOLS\n            )\n\n            conversation.append({\"role\": \"assistant\", \"content\": current_message.content})\n\n        # Extract final recommendations\n        final_response = \"\\n\".join([\n            content.text for content in current_message.content\n            if content.type == \"text\"\n        ])\n\n        return {\n            \"vessel_id\": vessel_id,\n            \"voyage_details\": voyage_details,\n            \"planning_results\": final_response,\n            \"conversation_log\": conversation\n        }\n\n# Usage example\nasync def comprehensive_planning_example():\n    planner = IntelligentCrewPlanner()\n\n    voyage_details = {\n        \"destination\": \"North Sea (Norwegian sector)\",\n        \"duration\": \"90 days\",\n        \"departure_date\": \"2025-02-01\",\n        \"requirements\": \"Offshore support operations, helicopter deck operations, dynamic positioning\"\n    }\n\n    planning_result = await planner.plan_vessel_crewing(\n        vessel_id=\"vessel-123\",\n        voyage_details=voyage_details\n    )\n\n    print(\"=== COMPREHENSIVE CREWING PLAN ===\")\n    print(planning_result[\"planning_results\"])\n</code></pre>"},{"location":"mcp/examples/claude/#claude-specific-optimizations","title":"Claude-Specific Optimizations","text":""},{"location":"mcp/examples/claude/#leveraging-claudes-reasoning-capabilities","title":"Leveraging Claude's Reasoning Capabilities","text":"<pre><code>class ClaudeReasoningEnhancedClient(CrewMCPClaudeClient):\n    \"\"\"Enhanced client that leverages Claude's reasoning for better decision making\"\"\"\n\n    async def analyze_with_reasoning(self, query: str, context: Dict = None) -&gt; Dict:\n        \"\"\"Use Claude's reasoning capabilities for complex analysis\"\"\"\n\n        reasoning_prompt = f\"\"\"\n        Please analyze this crew management query step by step:\n\n        Query: {query}\n\n        {f\"Context: {json.dumps(context, indent=2)}\" if context else \"\"}\n\n        I want you to:\n        1. Break down the query into specific components\n        2. Determine what information you need to gather\n        3. Plan your approach using available tools\n        4. Execute your plan systematically\n        5. Analyze the results holistically\n        6. Provide clear recommendations with reasoning\n\n        Think through each step carefully and explain your reasoning process.\n        \"\"\"\n\n        message = self.claude_client.messages.create(\n            model=\"claude-3-5-sonnet-20241022\",\n            max_tokens=4000,\n            system=\"\"\"You are an expert maritime operations analyst with advanced reasoning capabilities.\n\n            Your analytical approach:\n            1. Think systematically and break down complex problems\n            2. Gather comprehensive information before making decisions\n            3. Consider multiple perspectives and potential outcomes\n            4. Provide clear reasoning for all recommendations\n            5. Anticipate edge cases and potential issues\n            6. Balance competing priorities (safety, compliance, efficiency, cost)\n\n            When using tools:\n            - Explain why you're choosing specific tools and parameters\n            - Interpret results in context of the broader question\n            - Look for patterns and relationships in the data\n            - Consider both immediate and long-term implications\"\"\",\n            messages=[{\n                \"role\": \"user\",\n                \"content\": reasoning_prompt\n            }],\n            tools=CREW_MCP_CLAUDE_TOOLS\n        )\n\n        # Process the complete reasoning workflow\n        analysis_result = await self._process_complete_workflow(message)\n\n        return {\n            \"query\": query,\n            \"context\": context,\n            \"analysis\": analysis_result,\n            \"reasoning_approach\": \"systematic_breakdown\"\n        }\n\n    async def _process_complete_workflow(self, initial_message) -&gt; str:\n        \"\"\"Process complete workflow until Claude reaches conclusions\"\"\"\n\n        conversation = []\n        current_message = initial_message\n\n        while True:\n            conversation.append({\"role\": \"assistant\", \"content\": current_message.content})\n\n            # Check if there are tool calls to process\n            tool_calls = [c for c in current_message.content if c.type == \"tool_use\"]\n\n            if not tool_calls:\n                # No more tool calls, extract final response\n                break\n\n            # Process tool calls\n            tool_results = []\n            for tool_call in tool_calls:\n                result = self.execute_tool(tool_call.name, tool_call.input)\n                tool_results.append({\n                    \"type\": \"tool_result\",\n                    \"tool_use_id\": tool_call.id,\n                    \"content\": json.dumps(result, indent=2)\n                })\n\n            conversation.append({\"role\": \"user\", \"content\": tool_results})\n\n            # Get next response\n            current_message = self.claude_client.messages.create(\n                model=\"claude-3-5-sonnet-20241022\",\n                max_tokens=4000,\n                messages=conversation,\n                tools=CREW_MCP_CLAUDE_TOOLS\n            )\n\n        # Extract final text response\n        return \"\\n\".join([\n            content.text for content in current_message.content\n            if content.type == \"text\"\n        ])\n\n# Example usage\nasync def reasoning_analysis_example():\n    client = ClaudeReasoningEnhancedClient()\n\n    complex_query = \"\"\"\n    Our company is expanding operations to the Arctic region. We need to:\n    1. Assess our current crew capabilities for Arctic operations\n    2. Identify training and certification gaps\n    3. Plan crew assignments for 3 new Arctic-class vessels\n    4. Ensure full compliance with polar code requirements\n    5. Develop a 12-month crew rotation strategy\n\n    The operations will involve ice-strengthened vessels, extended voyages,\n    and extreme weather conditions. Safety and compliance are paramount.\n    \"\"\"\n\n    result = await client.analyze_with_reasoning(\n        query=complex_query,\n        context={\n            \"operation_type\": \"Arctic commercial shipping\",\n            \"vessel_count\": 3,\n            \"crew_per_vessel\": 20,\n            \"operation_start\": \"2025-04-01\"\n        }\n    )\n\n    print(\"=== CLAUDE'S SYSTEMATIC ANALYSIS ===\")\n    print(result[\"analysis\"])\n</code></pre>"},{"location":"mcp/examples/claude/#error-handling-and-resilience","title":"Error Handling and Resilience","text":""},{"location":"mcp/examples/claude/#robust-error-handling-for-claude-integration","title":"Robust Error Handling for Claude Integration","text":"<pre><code>import logging\nfrom typing import Optional, Union\nfrom anthropic import APIError, APITimeoutError\n\nclass ResilientClaudeClient(CrewMCPClaudeClient):\n    \"\"\"Claude client with comprehensive error handling and resilience\"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.logger = logging.getLogger(__name__)\n        self.max_retries = 3\n        self.retry_delay = 2\n\n    async def safe_message_create(\n        self,\n        messages: List[Dict],\n        max_tokens: int = 1024,\n        tools: Optional[List[Dict]] = None,\n        system: Optional[str] = None\n    ) -&gt; Optional[Dict]:\n        \"\"\"Create message with error handling and retries\"\"\"\n\n        for attempt in range(self.max_retries):\n            try:\n                response = self.claude_client.messages.create(\n                    model=\"claude-3-5-sonnet-20241022\",\n                    max_tokens=max_tokens,\n                    system=system,\n                    messages=messages,\n                    tools=tools or self.tools\n                )\n                return response\n\n            except APITimeoutError as e:\n                self.logger.warning(f\"Claude API timeout (attempt {attempt + 1}): {e}\")\n                if attempt &lt; self.max_retries - 1:\n                    await asyncio.sleep(self.retry_delay * (2 ** attempt))\n                    continue\n                else:\n                    self.logger.error(\"Claude API timeout after all retries\")\n                    return None\n\n            except APIError as e:\n                self.logger.error(f\"Claude API error: {e}\")\n                if e.status_code in [429, 500, 502, 503, 504]:  # Retryable errors\n                    if attempt &lt; self.max_retries - 1:\n                        await asyncio.sleep(self.retry_delay * (2 ** attempt))\n                        continue\n                return None\n\n            except Exception as e:\n                self.logger.error(f\"Unexpected error in Claude API call: {e}\")\n                return None\n\n        return None\n\n    def safe_execute_tool(self, tool_name: str, parameters: Dict) -&gt; Dict:\n        \"\"\"Execute MCP tool with comprehensive error handling\"\"\"\n\n        try:\n            result = self.execute_tool(tool_name, parameters)\n\n            if not result.get(\"success\", True):\n                self.logger.warning(f\"Tool execution warning: {result.get('error', 'Unknown error')}\")\n                return {\n                    \"error\": result.get(\"error\", \"Tool execution failed\"),\n                    \"tool_name\": tool_name,\n                    \"parameters\": parameters,\n                    \"fallback_available\": True\n                }\n\n            return result\n\n        except requests.exceptions.Timeout:\n            return {\n                \"error\": f\"Tool {tool_name} timed out\",\n                \"suggestion\": \"Try with reduced parameters or check system status\"\n            }\n\n        except requests.exceptions.ConnectionError:\n            return {\n                \"error\": f\"Connection error for tool {tool_name}\",\n                \"suggestion\": \"Check network connectivity and MCP server status\"\n            }\n\n        except Exception as e:\n            self.logger.error(f\"Unexpected error in tool execution: {e}\")\n            return {\n                \"error\": f\"Unexpected error: {str(e)}\",\n                \"tool_name\": tool_name\n            }\n\n    async def resilient_conversation(\n        self,\n        user_input: str,\n        context: Optional[Dict] = None,\n        fallback_response: Optional[str] = None\n    ) -&gt; str:\n        \"\"\"Conduct conversation with fallback mechanisms\"\"\"\n\n        messages = [{\n            \"role\": \"user\",\n            \"content\": user_input\n        }]\n\n        if context:\n            messages.insert(0, {\n                \"role\": \"user\",\n                \"content\": f\"Context: {json.dumps(context, indent=2)}\"\n            })\n\n        response = await self.safe_message_create(messages)\n\n        if not response:\n            return fallback_response or \"I'm sorry, I'm having trouble connecting to my systems right now. Please try again in a moment.\"\n\n        # Process tool calls safely\n        conversation = messages.copy()\n        current_message = response\n        conversation.append({\"role\": \"assistant\", \"content\": current_message.content})\n\n        iteration_count = 0\n        max_iterations = 5  # Prevent infinite loops\n\n        while (any(content.type == \"tool_use\" for content in current_message.content) and\n               iteration_count &lt; max_iterations):\n\n            tool_results = []\n            for content_block in current_message.content:\n                if content_block.type == \"tool_use\":\n                    result = self.safe_execute_tool(\n                        content_block.name,\n                        content_block.input\n                    )\n                    tool_results.append({\n                        \"type\": \"tool_result\",\n                        \"tool_use_id\": content_block.id,\n                        \"content\": json.dumps(result, indent=2)\n                    })\n\n            conversation.append({\"role\": \"user\", \"content\": tool_results})\n\n            next_response = await self.safe_message_create(conversation)\n            if not next_response:\n                break\n\n            current_message = next_response\n            conversation.append({\"role\": \"assistant\", \"content\": current_message.content})\n            iteration_count += 1\n\n        # Extract final response\n        text_responses = [\n            content.text for content in current_message.content\n            if content.type == \"text\"\n        ]\n\n        return \"\\n\".join(text_responses) if text_responses else \"I encountered some issues processing your request, but I'm working on it.\"\n\n# Example usage with error handling\nasync def error_handling_example():\n    client = ResilientClaudeClient()\n\n    try:\n        response = await client.resilient_conversation(\n            user_input=\"Check compliance status for all vessels\",\n            context={\"priority\": \"high\", \"deadline\": \"24 hours\"},\n            fallback_response=\"I'll help you check compliance status as soon as my systems are fully operational.\"\n        )\n\n        print(\"Response:\", response)\n\n    except Exception as e:\n        print(f\"Conversation failed: {e}\")\n</code></pre>"},{"location":"mcp/examples/claude/#performance-optimization","title":"Performance Optimization","text":""},{"location":"mcp/examples/claude/#efficient-claude-integration-patterns","title":"Efficient Claude Integration Patterns","text":"<pre><code>class OptimizedClaudeClient(CrewMCPClaudeClient):\n    \"\"\"Optimized client for high-performance Claude integration\"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.response_cache = {}\n        self.cache_ttl = 300  # 5 minutes\n\n    def _get_cache_key(self, messages: List[Dict], tools: List[Dict]) -&gt; str:\n        \"\"\"Generate cache key for request\"\"\"\n        import hashlib\n        content = json.dumps({\n            \"messages\": messages,\n            \"tools\": [tool[\"name\"] for tool in tools]\n        }, sort_keys=True)\n        return hashlib.md5(content.encode()).hexdigest()\n\n    async def cached_message_create(self, **kwargs) -&gt; Dict:\n        \"\"\"Create message with intelligent caching\"\"\"\n\n        cache_key = self._get_cache_key(\n            kwargs.get(\"messages\", []),\n            kwargs.get(\"tools\", [])\n        )\n\n        # Check cache\n        if cache_key in self.response_cache:\n            cached_response, timestamp = self.response_cache[cache_key]\n            if time.time() - timestamp &lt; self.cache_ttl:\n                return cached_response\n\n        # Create new response\n        response = self.claude_client.messages.create(**kwargs)\n\n        # Cache response\n        self.response_cache[cache_key] = (response, time.time())\n\n        return response\n\n    async def batch_tool_execution(self, tool_calls: List[Dict]) -&gt; List[Dict]:\n        \"\"\"Execute multiple tools efficiently\"\"\"\n\n        import asyncio\n        from concurrent.futures import ThreadPoolExecutor\n\n        async def execute_single_tool(tool_call: Dict) -&gt; Dict:\n            \"\"\"Execute single tool asynchronously\"\"\"\n            loop = asyncio.get_event_loop()\n            with ThreadPoolExecutor() as executor:\n                result = await loop.run_in_executor(\n                    executor,\n                    self.execute_tool,\n                    tool_call[\"name\"],\n                    tool_call[\"input\"]\n                )\n                return {\n                    \"tool_use_id\": tool_call[\"id\"],\n                    \"result\": result,\n                    \"type\": \"tool_result\"\n                }\n\n        # Execute all tools concurrently\n        tasks = [execute_single_tool(tool_call) for tool_call in tool_calls]\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n\n        # Format results for Claude\n        formatted_results = []\n        for result in results:\n            if isinstance(result, Exception):\n                formatted_results.append({\n                    \"type\": \"tool_result\",\n                    \"tool_use_id\": \"error\",\n                    \"content\": json.dumps({\"error\": str(result)})\n                })\n            else:\n                formatted_results.append({\n                    \"type\": \"tool_result\",\n                    \"tool_use_id\": result[\"tool_use_id\"],\n                    \"content\": json.dumps(result[\"result\"])\n                })\n\n        return formatted_results\n\n    async def optimized_workflow(self, user_input: str) -&gt; str:\n        \"\"\"Optimized conversation workflow\"\"\"\n\n        start_time = time.time()\n\n        message = await self.cached_message_create(\n            model=\"claude-3-5-sonnet-20241022\",\n            max_tokens=2048,\n            messages=[{\"role\": \"user\", \"content\": user_input}],\n            tools=self.tools\n        )\n\n        conversation = [{\"role\": \"user\", \"content\": user_input}]\n        current_message = message\n        conversation.append({\"role\": \"assistant\", \"content\": current_message.content})\n\n        # Process tool calls efficiently\n        while any(content.type == \"tool_use\" for content in current_message.content):\n            tool_calls = [c for c in current_message.content if c.type == \"tool_use\"]\n\n            # Batch execute tools\n            tool_results = await self.batch_tool_execution(tool_calls)\n\n            conversation.append({\"role\": \"user\", \"content\": tool_results})\n\n            current_message = await self.cached_message_create(\n                model=\"claude-3-5-sonnet-20241022\",\n                max_tokens=2048,\n                messages=conversation,\n                tools=self.tools\n            )\n\n            conversation.append({\"role\": \"assistant\", \"content\": current_message.content})\n\n        execution_time = time.time() - start_time\n\n        # Extract response\n        text_response = \"\\n\".join([\n            content.text for content in current_message.content\n            if content.type == \"text\"\n        ])\n\n        return f\"{text_response}\\n\\n_[Processed in {execution_time:.2f}s]_\"\n</code></pre>"},{"location":"mcp/examples/claude/#testing-claude-integration","title":"Testing Claude Integration","text":""},{"location":"mcp/examples/claude/#comprehensive-test-suite","title":"Comprehensive Test Suite","text":"<pre><code>import pytest\nfrom unittest.mock import Mock, patch\nimport json\n\nclass TestClaudeCrewMCPIntegration:\n\n    @pytest.fixture\n    def mock_claude_client(self):\n        client = CrewMCPClaudeClient()\n        client.claude_client = Mock()\n        client.execute_tool = Mock()\n        return client\n\n    @pytest.mark.asyncio\n    async def test_basic_crew_search(self, mock_claude_client):\n        # Mock Claude response\n        mock_content = Mock()\n        mock_content.type = \"tool_use\"\n        mock_content.name = \"search_crew\"\n        mock_content.id = \"test-id\"\n        mock_content.input = {\"query\": \"deck officers\"}\n\n        mock_message = Mock()\n        mock_message.content = [mock_content]\n\n        mock_claude_client.claude_client.messages.create.return_value = mock_message\n\n        # Mock tool result\n        mock_claude_client.execute_tool.return_value = {\n            \"matches\": [{\"name\": \"John Doe\", \"rank\": \"Chief Officer\"}],\n            \"total_count\": 1\n        }\n\n        # Test the flow\n        message = mock_claude_client.claude_client.messages.create(\n            model=\"claude-3-5-sonnet-20241022\",\n            max_tokens=1024,\n            messages=[{\"role\": \"user\", \"content\": \"Find deck officers\"}],\n            tools=CREW_MCP_CLAUDE_TOOLS\n        )\n\n        assert message.content[0].type == \"tool_use\"\n        assert message.content[0].name == \"search_crew\"\n\n    @pytest.mark.asyncio\n    async def test_conversation_manager(self):\n        manager = ClaudeCrewConversationManager()\n\n        # Mock the client\n        with patch.object(manager.client, 'claude_client') as mock_claude, \\\n             patch.object(manager.client, 'execute_tool') as mock_execute:\n\n            # Setup mocks\n            mock_text_content = Mock()\n            mock_text_content.type = \"text\"\n            mock_text_content.text = \"I'll help you find deck officers.\"\n\n            mock_message = Mock()\n            mock_message.content = [mock_text_content]\n\n            mock_claude.messages.create.return_value = mock_message\n\n            response = await manager.chat(\"Find available deck officers\")\n\n            assert \"help you find deck officers\" in response\n            mock_claude.messages.create.assert_called()\n\n    def test_tool_schema_validation(self):\n        \"\"\"Test that all tool schemas are valid\"\"\"\n        for tool in CREW_MCP_CLAUDE_TOOLS:\n            assert \"name\" in tool\n            assert \"description\" in tool\n            assert \"input_schema\" in tool\n            assert \"type\" in tool[\"input_schema\"]\n            assert \"properties\" in tool[\"input_schema\"]\n\n    @pytest.mark.asyncio\n    async def test_error_handling(self):\n        client = ResilientClaudeClient()\n\n        with patch.object(client, 'claude_client') as mock_claude:\n            # Simulate API error\n            mock_claude.messages.create.side_effect = APIError(\"API Error\")\n\n            result = await client.safe_message_create([\n                {\"role\": \"user\", \"content\": \"test\"}\n            ])\n\n            assert result is None\n\n# Run tests\nif __name__ == \"__main__\":\n    pytest.main([__file__])\n</code></pre> <p>This comprehensive Claude integration guide provides everything needed to successfully integrate the Crew Appraisals MCP tools with Claude, leveraging its advanced reasoning capabilities and conversational strengths for sophisticated crew management workflows.</p>"},{"location":"mcp/examples/openai/","title":"OpenAI Integration Examples","text":""},{"location":"mcp/examples/openai/#overview","title":"Overview","text":"<p>This guide demonstrates how to integrate the Crew Appraisals MCP tools with OpenAI's GPT models using function calling. The examples show both basic usage and advanced conversational patterns.</p>"},{"location":"mcp/examples/openai/#prerequisites","title":"Prerequisites","text":""},{"location":"mcp/examples/openai/#required-dependencies","title":"Required Dependencies","text":"<pre><code>pip install openai requests python-dotenv\n</code></pre>"},{"location":"mcp/examples/openai/#environment-setup","title":"Environment Setup","text":"<p>Create a <code>.env</code> file with your configuration:</p> <pre><code>OPENAI_API_KEY=your_openai_api_key_here\nMCP_BASE_URL=https://api.crew-appraisals.com/mcp\nMCP_API_KEY=your_mcp_api_key_here\n</code></pre>"},{"location":"mcp/examples/openai/#basic-setup","title":"Basic Setup","text":""},{"location":"mcp/examples/openai/#client-configuration","title":"Client Configuration","text":"<pre><code>import os\nimport json\nimport requests\nfrom openai import OpenAI\nfrom typing import Dict, List, Any\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nclass CrewMCPClient:\n    \"\"\"Client for interacting with Crew Appraisals MCP tools\"\"\"\n\n    def __init__(self):\n        self.openai_client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n        self.mcp_base_url = os.getenv(\"MCP_BASE_URL\")\n        self.mcp_api_key = os.getenv(\"MCP_API_KEY\")\n        self.tools = self._load_tools()\n\n    def _load_tools(self) -&gt; List[Dict]:\n        \"\"\"Load available MCP tools and convert to OpenAI format\"\"\"\n        response = requests.get(\n            f\"{self.mcp_base_url}/tools\",\n            headers={\"Authorization\": f\"Bearer {self.mcp_api_key}\"}\n        )\n        mcp_tools = response.json()[\"tools\"]\n\n        # Convert MCP tool schema to OpenAI function calling format\n        openai_tools = []\n        for tool in mcp_tools:\n            openai_tools.append({\n                \"type\": \"function\",\n                \"function\": {\n                    \"name\": tool[\"name\"],\n                    \"description\": tool[\"description\"],\n                    \"parameters\": tool[\"parameters\"]\n                }\n            })\n\n        return openai_tools\n\n    def execute_tool(self, tool_name: str, parameters: Dict) -&gt; Dict:\n        \"\"\"Execute an MCP tool\"\"\"\n        response = requests.post(\n            f\"{self.mcp_base_url}/execute\",\n            headers={\n                \"Authorization\": f\"Bearer {self.mcp_api_key}\",\n                \"Content-Type\": \"application/json\"\n            },\n            json={\n                \"tool\": tool_name,\n                \"parameters\": parameters\n            }\n        )\n        return response.json()\n</code></pre>"},{"location":"mcp/examples/openai/#tool-definitions","title":"Tool Definitions","text":""},{"location":"mcp/examples/openai/#complete-openai-tool-schemas","title":"Complete OpenAI Tool Schemas","text":"<pre><code>CREW_MCP_TOOLS = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"search_crew\",\n            \"description\": \"Search for crew members using natural language queries with advanced filtering options\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"query\": {\n                        \"type\": \"string\",\n                        \"description\": \"Natural language search query (e.g., 'experienced deck officers with valid STCW')\"\n                    },\n                    \"filters\": {\n                        \"type\": \"object\",\n                        \"description\": \"Additional filters to refine search results\",\n                        \"properties\": {\n                            \"rank\": {\n                                \"type\": \"string\",\n                                \"description\": \"Filter by crew rank/position\"\n                            },\n                            \"department\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"deck\", \"engine\", \"catering\", \"radio\", \"medical\"],\n                                \"description\": \"Filter by department\"\n                            },\n                            \"status\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"active\", \"available\", \"assigned\", \"leave\"],\n                                \"description\": \"Filter by crew status\"\n                            },\n                            \"vessel_id\": {\n                                \"type\": \"string\",\n                                \"description\": \"Filter by current vessel assignment\"\n                            }\n                        }\n                    },\n                    \"limit\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Maximum number of results to return\",\n                        \"default\": 10,\n                        \"minimum\": 1,\n                        \"maximum\": 100\n                    }\n                },\n                \"required\": [\"query\"]\n            }\n        }\n    },\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"create_appraisal\",\n            \"description\": \"Create a performance appraisal for a crew member with structured evaluation categories\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"crew_member_id\": {\n                        \"type\": \"string\",\n                        \"description\": \"UUID of the crew member to evaluate\"\n                    },\n                    \"vessel_id\": {\n                        \"type\": \"string\",\n                        \"description\": \"UUID of the vessel where evaluation takes place\"\n                    },\n                    \"period_start\": {\n                        \"type\": \"string\",\n                        \"format\": \"date\",\n                        \"description\": \"Start date of evaluation period (YYYY-MM-DD)\"\n                    },\n                    \"period_end\": {\n                        \"type\": \"string\",\n                        \"format\": \"date\",\n                        \"description\": \"End date of evaluation period (YYYY-MM-DD)\"\n                    },\n                    \"categories\": {\n                        \"type\": \"array\",\n                        \"description\": \"List of evaluation categories with scores\",\n                        \"items\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"name\": {\n                                    \"type\": \"string\",\n                                    \"description\": \"Category name (e.g., 'Technical Skills', 'Leadership')\"\n                                },\n                                \"score\": {\n                                    \"type\": \"number\",\n                                    \"minimum\": 1,\n                                    \"maximum\": 5,\n                                    \"description\": \"Score from 1-5\"\n                                },\n                                \"comments\": {\n                                    \"type\": \"string\",\n                                    \"description\": \"Detailed comments for this category\"\n                                },\n                                \"strengths\": {\n                                    \"type\": \"string\",\n                                    \"description\": \"Identified strengths\"\n                                },\n                                \"weaknesses\": {\n                                    \"type\": \"string\",\n                                    \"description\": \"Areas for improvement\"\n                                }\n                            },\n                            \"required\": [\"name\", \"score\"]\n                        }\n                    },\n                    \"evaluator_id\": {\n                        \"type\": \"string\",\n                        \"description\": \"UUID of the evaluator (optional, defaults to AI assistant)\"\n                    }\n                },\n                \"required\": [\"crew_member_id\", \"vessel_id\", \"period_start\", \"period_end\", \"categories\"]\n            }\n        }\n    },\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"check_certificates\",\n            \"description\": \"Check certificate expiry status for crew members with comprehensive filtering\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"crew_member_id\": {\n                        \"type\": \"string\",\n                        \"description\": \"UUID of specific crew member to check (optional)\"\n                    },\n                    \"check_expiring\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Include certificates expiring within the specified timeframe\",\n                        \"default\": True\n                    },\n                    \"days_ahead\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Number of days ahead to check for expiring certificates\",\n                        \"default\": 90,\n                        \"minimum\": 1,\n                        \"maximum\": 365\n                    },\n                    \"department\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"deck\", \"engine\", \"catering\", \"radio\", \"medical\"],\n                        \"description\": \"Filter by department (optional)\"\n                    }\n                }\n            }\n        }\n    },\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"vessel_assignment\",\n            \"description\": \"Create and manage crew vessel assignments with intelligent validation\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"crew_member_id\": {\n                        \"type\": \"string\",\n                        \"description\": \"UUID of the crew member to assign\"\n                    },\n                    \"vessel_id\": {\n                        \"type\": \"string\",\n                        \"description\": \"UUID of the target vessel\"\n                    },\n                    \"role\": {\n                        \"type\": \"string\",\n                        \"description\": \"Position/role on the vessel\",\n                        \"enum\": [\n                            \"Master\", \"Chief Officer\", \"Second Officer\", \"Third Officer\",\n                            \"Chief Engineer\", \"Second Engineer\", \"Third Engineer\",\n                            \"Bosun\", \"Able Seaman\", \"Ordinary Seaman\",\n                            \"Chief Cook\", \"Steward\", \"Galley Hand\"\n                        ]\n                    },\n                    \"start_date\": {\n                        \"type\": \"string\",\n                        \"format\": \"date\",\n                        \"description\": \"Assignment start date (YYYY-MM-DD)\"\n                    },\n                    \"end_date\": {\n                        \"type\": \"string\",\n                        \"format\": \"date\",\n                        \"description\": \"Assignment end date (YYYY-MM-DD), optional for open-ended assignments\"\n                    }\n                },\n                \"required\": [\"crew_member_id\", \"vessel_id\", \"role\", \"start_date\"]\n            }\n        }\n    },\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"compliance_report\",\n            \"description\": \"Generate comprehensive compliance reports for vessels, departments, or organization\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"vessel_id\": {\n                        \"type\": \"string\",\n                        \"description\": \"UUID of specific vessel to analyze (optional)\"\n                    },\n                    \"department_id\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"deck\", \"engine\", \"catering\", \"radio\", \"medical\"],\n                        \"description\": \"Department to analyze (optional)\"\n                    },\n                    \"include_expiring\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Include certificates expiring within 90 days\",\n                        \"default\": True\n                    },\n                    \"format\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"summary\", \"detailed\", \"csv\"],\n                        \"description\": \"Report format\",\n                        \"default\": \"summary\"\n                    }\n                }\n            }\n        }\n    }\n]\n</code></pre>"},{"location":"mcp/examples/openai/#basic-examples","title":"Basic Examples","text":""},{"location":"mcp/examples/openai/#1-simple-crew-search","title":"1. Simple Crew Search","text":"<pre><code>async def search_crew_example():\n    client = CrewMCPClient()\n\n    # Create chat completion with function calling\n    response = await client.openai_client.chat.completions.create(\n        model=\"gpt-4\",\n        messages=[\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a crew management assistant. Help users find and manage crew members using the available tools.\"\n            },\n            {\n                \"role\": \"user\",\n                \"content\": \"Find me experienced deck officers who are currently available for assignment.\"\n            }\n        ],\n        tools=CREW_MCP_TOOLS,\n        tool_choice=\"auto\"\n    )\n\n    # Process tool calls\n    if response.choices[0].message.tool_calls:\n        for tool_call in response.choices[0].message.tool_calls:\n            if tool_call.function.name == \"search_crew\":\n                parameters = json.loads(tool_call.function.arguments)\n                result = client.execute_tool(\"search_crew\", parameters)\n\n                print(f\"Found {result['total_count']} crew members:\")\n                for crew in result['matches']:\n                    print(f\"- {crew['name']} ({crew['rank']}) - {crew['status']}\")\n\n# Run the example\nimport asyncio\nasyncio.run(search_crew_example())\n</code></pre>"},{"location":"mcp/examples/openai/#2-certificate-status-check","title":"2. Certificate Status Check","text":"<pre><code>async def check_certificates_example():\n    client = CrewMCPClient()\n\n    response = await client.openai_client.chat.completions.create(\n        model=\"gpt-4\",\n        messages=[\n            {\n                \"role\": \"user\",\n                \"content\": \"Check which deck department certificates are expiring in the next 30 days.\"\n            }\n        ],\n        tools=CREW_MCP_TOOLS\n    )\n\n    # Execute tool call\n    tool_call = response.choices[0].message.tool_calls[0]\n    parameters = json.loads(tool_call.function.arguments)\n    result = client.execute_tool(\"check_certificates\", parameters)\n\n    print(f\"Certificates expiring in {result['days_ahead']} days:\")\n    for cert in result['expiring']:\n        print(f\"- {cert['crew_member_name']}: {cert['certificate_type']} expires {cert['expiry_date']}\")\n</code></pre>"},{"location":"mcp/examples/openai/#advanced-conversational-examples","title":"Advanced Conversational Examples","text":""},{"location":"mcp/examples/openai/#multi-turn-crew-management-conversation","title":"Multi-Turn Crew Management Conversation","text":"<pre><code>class CrewConversationManager:\n    def __init__(self):\n        self.client = CrewMCPClient()\n        self.conversation_history = [\n            {\n                \"role\": \"system\",\n                \"content\": \"\"\"You are an expert crew management assistant for a maritime company.\n                You help with crew scheduling, compliance monitoring, performance evaluations,\n                and vessel assignments. Always provide helpful, accurate, and actionable information.\n\n                When using tools:\n                - Always explain what you're doing and why\n                - Provide context for the results\n                - Suggest follow-up actions when appropriate\n                - Be proactive in identifying potential issues\"\"\"\n            }\n        ]\n\n    async def chat(self, user_message: str) -&gt; str:\n        # Add user message to conversation\n        self.conversation_history.append({\n            \"role\": \"user\",\n            \"content\": user_message\n        })\n\n        # Get response from OpenAI\n        response = await self.client.openai_client.chat.completions.create(\n            model=\"gpt-4\",\n            messages=self.conversation_history,\n            tools=CREW_MCP_TOOLS,\n            tool_choice=\"auto\"\n        )\n\n        assistant_message = response.choices[0].message\n        tool_results = []\n\n        # Process any tool calls\n        if assistant_message.tool_calls:\n            for tool_call in assistant_message.tool_calls:\n                function_name = tool_call.function.name\n                parameters = json.loads(tool_call.function.arguments)\n\n                # Execute the tool\n                result = self.client.execute_tool(function_name, parameters)\n                tool_results.append({\n                    \"tool_call_id\": tool_call.id,\n                    \"result\": result\n                })\n\n                # Add tool call and result to conversation history\n                self.conversation_history.append({\n                    \"role\": \"assistant\",\n                    \"content\": None,\n                    \"tool_calls\": [tool_call]\n                })\n\n                self.conversation_history.append({\n                    \"role\": \"tool\",\n                    \"tool_call_id\": tool_call.id,\n                    \"content\": json.dumps(result)\n                })\n\n            # Get final response with tool results\n            final_response = await self.client.openai_client.chat.completions.create(\n                model=\"gpt-4\",\n                messages=self.conversation_history\n            )\n\n            final_message = final_response.choices[0].message.content\n        else:\n            final_message = assistant_message.content\n\n        # Add final response to conversation\n        self.conversation_history.append({\n            \"role\": \"assistant\",\n            \"content\": final_message\n        })\n\n        return final_message\n\n# Example usage\nasync def conversation_example():\n    manager = CrewConversationManager()\n\n    # Multi-turn conversation\n    response1 = await manager.chat(\n        \"I need to prepare MV Ocean Pioneer for departure next week. \"\n        \"Can you help me check if we're compliant and ready to sail?\"\n    )\n    print(\"Assistant:\", response1)\n\n    response2 = await manager.chat(\n        \"What about the crew assignments? Do we have all positions filled?\"\n    )\n    print(\"Assistant:\", response2)\n\n    response3 = await manager.chat(\n        \"If there are any issues, can you suggest specific actions to resolve them?\"\n    )\n    print(\"Assistant:\", response3)\n</code></pre>"},{"location":"mcp/examples/openai/#complex-crew-planning-workflow","title":"Complex Crew Planning Workflow","text":"<pre><code>async def crew_planning_workflow():\n    \"\"\"Advanced example showing multi-tool workflow for crew planning\"\"\"\n\n    client = CrewMCPClient()\n\n    # Step 1: Find available crew\n    print(\"\ud83d\udd0d Finding available crew members...\")\n    search_response = await client.openai_client.chat.completions.create(\n        model=\"gpt-4\",\n        messages=[{\n            \"role\": \"user\",\n            \"content\": \"Find all available deck officers for vessel assignments\"\n        }],\n        tools=[tool for tool in CREW_MCP_TOOLS if tool[\"function\"][\"name\"] == \"search_crew\"]\n    )\n\n    # Execute search\n    search_tool_call = search_response.choices[0].message.tool_calls[0]\n    search_params = json.loads(search_tool_call.function.arguments)\n    available_crew = client.execute_tool(\"search_crew\", search_params)\n\n    print(f\"Found {available_crew['total_count']} available deck officers\")\n\n    # Step 2: Check compliance for each crew member\n    print(\"\\n\ud83d\udccb Checking certificate compliance...\")\n    compliance_issues = []\n\n    for crew_member in available_crew['matches']:\n        cert_response = await client.openai_client.chat.completions.create(\n            model=\"gpt-4\",\n            messages=[{\n                \"role\": \"user\",\n                \"content\": f\"Check certificate status for crew member {crew_member['id']}\"\n            }],\n            tools=[tool for tool in CREW_MCP_TOOLS if tool[\"function\"][\"name\"] == \"check_certificates\"]\n        )\n\n        cert_tool_call = cert_response.choices[0].message.tool_calls[0]\n        cert_params = json.loads(cert_tool_call.function.arguments)\n        cert_status = client.execute_tool(\"check_certificates\", cert_params)\n\n        if cert_status.get('certificates', {}).get('expired') or cert_status.get('certificates', {}).get('expiring'):\n            compliance_issues.append({\n                'crew_member': crew_member,\n                'cert_issues': cert_status\n            })\n\n    print(f\"Found compliance issues for {len(compliance_issues)} crew members\")\n\n    # Step 3: Generate comprehensive analysis\n    analysis_prompt = f\"\"\"\n    Based on the crew search and certificate analysis:\n\n    Available Crew: {json.dumps(available_crew, indent=2)}\n    Compliance Issues: {json.dumps(compliance_issues, indent=2)}\n\n    Please provide:\n    1. Summary of crew availability\n    2. Compliance risk assessment\n    3. Recommendations for vessel assignments\n    4. Actions needed to resolve compliance issues\n    \"\"\"\n\n    final_response = await client.openai_client.chat.completions.create(\n        model=\"gpt-4\",\n        messages=[{\n            \"role\": \"user\",\n            \"content\": analysis_prompt\n        }]\n    )\n\n    print(\"\\n\ud83d\udcca Analysis and Recommendations:\")\n    print(final_response.choices[0].message.content)\n</code></pre>"},{"location":"mcp/examples/openai/#error-handling","title":"Error Handling","text":""},{"location":"mcp/examples/openai/#robust-error-handling-implementation","title":"Robust Error Handling Implementation","text":"<pre><code>import logging\nfrom typing import Optional\n\nclass CrewMCPError(Exception):\n    \"\"\"Custom exception for MCP tool errors\"\"\"\n    pass\n\nclass RobustCrewMCPClient(CrewMCPClient):\n    def __init__(self):\n        super().__init__()\n        self.logger = logging.getLogger(__name__)\n\n    async def execute_tool_with_retry(\n        self,\n        tool_name: str,\n        parameters: Dict,\n        max_retries: int = 3\n    ) -&gt; Dict:\n        \"\"\"Execute tool with retry logic and error handling\"\"\"\n\n        for attempt in range(max_retries):\n            try:\n                result = self.execute_tool(tool_name, parameters)\n\n                if result.get(\"success\", True):\n                    return result\n                else:\n                    self.logger.warning(f\"Tool execution failed (attempt {attempt + 1}): {result.get('error')}\")\n                    if attempt == max_retries - 1:\n                        raise CrewMCPError(f\"Tool {tool_name} failed after {max_retries} attempts: {result.get('error')}\")\n\n            except requests.exceptions.RequestException as e:\n                self.logger.error(f\"Network error (attempt {attempt + 1}): {e}\")\n                if attempt == max_retries - 1:\n                    raise CrewMCPError(f\"Network error after {max_retries} attempts: {e}\")\n\n                # Wait before retry with exponential backoff\n                await asyncio.sleep(2 ** attempt)\n\n            except Exception as e:\n                self.logger.error(f\"Unexpected error: {e}\")\n                raise CrewMCPError(f\"Unexpected error: {e}\")\n\n        return {}\n\n    async def safe_chat_completion(\n        self,\n        messages: List[Dict],\n        tools: Optional[List[Dict]] = None\n    ) -&gt; Optional[Dict]:\n        \"\"\"Safe chat completion with error handling\"\"\"\n\n        try:\n            response = await self.openai_client.chat.completions.create(\n                model=\"gpt-4\",\n                messages=messages,\n                tools=tools or self.tools,\n                tool_choice=\"auto\"\n            )\n\n            return response\n\n        except Exception as e:\n            self.logger.error(f\"OpenAI API error: {e}\")\n            return None\n\n# Example usage with error handling\nasync def safe_crew_search():\n    client = RobustCrewMCPClient()\n\n    try:\n        response = await client.safe_chat_completion([{\n            \"role\": \"user\",\n            \"content\": \"Find available engineers\"\n        }])\n\n        if response and response.choices[0].message.tool_calls:\n            tool_call = response.choices[0].message.tool_calls[0]\n            parameters = json.loads(tool_call.function.arguments)\n\n            result = await client.execute_tool_with_retry(\n                tool_call.function.name,\n                parameters\n            )\n\n            print(\"Search completed successfully:\", result)\n\n    except CrewMCPError as e:\n        print(f\"MCP Error: {e}\")\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"mcp/examples/openai/#best-practices","title":"Best Practices","text":""},{"location":"mcp/examples/openai/#1-efficient-tool-usage","title":"1. Efficient Tool Usage","text":"<pre><code>class EfficientCrewManager:\n    def __init__(self):\n        self.client = CrewMCPClient()\n        self.cache = {}  # Simple in-memory cache\n        self.cache_ttl = 300  # 5 minutes\n\n    async def cached_tool_execution(self, tool_name: str, parameters: Dict) -&gt; Dict:\n        \"\"\"Execute tool with caching to avoid redundant calls\"\"\"\n        cache_key = f\"{tool_name}:{hash(json.dumps(parameters, sort_keys=True))}\"\n\n        if cache_key in self.cache:\n            cached_result, timestamp = self.cache[cache_key]\n            if time.time() - timestamp &lt; self.cache_ttl:\n                return cached_result\n\n        result = self.client.execute_tool(tool_name, parameters)\n        self.cache[cache_key] = (result, time.time())\n\n        return result\n\n    async def batch_crew_analysis(self, crew_ids: List[str]) -&gt; Dict:\n        \"\"\"Efficiently analyze multiple crew members\"\"\"\n\n        # Batch certificate checks by department\n        departments = set()\n        crew_dept_mapping = {}\n\n        # First, get crew details to group by department\n        for crew_id in crew_ids:\n            crew_result = await self.cached_tool_execution(\"search_crew\", {\n                \"query\": \"\",\n                \"filters\": {\"crew_member_id\": crew_id}\n            })\n\n            if crew_result.get('matches'):\n                dept = crew_result['matches'][0].get('department')\n                departments.add(dept)\n                crew_dept_mapping[crew_id] = dept\n\n        # Run department-level certificate checks\n        dept_cert_results = {}\n        for dept in departments:\n            if dept:\n                dept_result = await self.cached_tool_execution(\"check_certificates\", {\n                    \"department\": dept,\n                    \"check_expiring\": True,\n                    \"days_ahead\": 90\n                })\n                dept_cert_results[dept] = dept_result\n\n        return {\n            \"crew_departments\": crew_dept_mapping,\n            \"certificate_status\": dept_cert_results\n        }\n</code></pre>"},{"location":"mcp/examples/openai/#2-context-aware-conversations","title":"2. Context-Aware Conversations","text":"<pre><code>class ContextAwareCrewAssistant:\n    def __init__(self):\n        self.client = CrewMCPClient()\n        self.context = {\n            \"current_vessels\": [],\n            \"recent_searches\": [],\n            \"active_assignments\": []\n        }\n\n    def update_context(self, tool_name: str, parameters: Dict, result: Dict):\n        \"\"\"Update conversation context based on tool usage\"\"\"\n\n        if tool_name == \"search_crew\":\n            self.context[\"recent_searches\"].append({\n                \"query\": parameters.get(\"query\"),\n                \"results_count\": result.get(\"total_count\", 0),\n                \"filters\": parameters.get(\"filters\", {})\n            })\n\n        elif tool_name == \"vessel_assignment\":\n            if result.get(\"assignment_id\"):\n                self.context[\"active_assignments\"].append({\n                    \"assignment_id\": result[\"assignment_id\"],\n                    \"crew_member\": result.get(\"crew_member\", {}),\n                    \"vessel\": result.get(\"vessel\", {}),\n                    \"role\": result.get(\"role\")\n                })\n\n        elif tool_name == \"compliance_report\":\n            if result.get(\"vessel_id\"):\n                vessel_info = {\n                    \"vessel_id\": result[\"vessel_id\"],\n                    \"vessel_name\": result.get(\"vessel_name\"),\n                    \"compliance_status\": result.get(\"compliance_status\"),\n                    \"last_checked\": result.get(\"report_date\")\n                }\n                # Update or add vessel info\n                existing = next((v for v in self.context[\"current_vessels\"]\n                               if v[\"vessel_id\"] == vessel_info[\"vessel_id\"]), None)\n                if existing:\n                    existing.update(vessel_info)\n                else:\n                    self.context[\"current_vessels\"].append(vessel_info)\n\n    def get_contextual_prompt_prefix(self) -&gt; str:\n        \"\"\"Generate context-aware prompt prefix\"\"\"\n\n        context_parts = []\n\n        if self.context[\"current_vessels\"]:\n            vessel_names = [v[\"vessel_name\"] for v in self.context[\"current_vessels\"]]\n            context_parts.append(f\"Currently working with vessels: {', '.join(vessel_names)}\")\n\n        if self.context[\"recent_searches\"]:\n            recent_search = self.context[\"recent_searches\"][-1]\n            context_parts.append(f\"Recent search: '{recent_search['query']}' found {recent_search['results_count']} results\")\n\n        if self.context[\"active_assignments\"]:\n            assignments_count = len(self.context[\"active_assignments\"])\n            context_parts.append(f\"Created {assignments_count} new assignments in this session\")\n\n        if context_parts:\n            return \"Context: \" + \". \".join(context_parts) + \"\\n\\n\"\n\n        return \"\"\n</code></pre>"},{"location":"mcp/examples/openai/#performance-optimization","title":"Performance Optimization","text":""},{"location":"mcp/examples/openai/#async-batch-processing","title":"Async Batch Processing","text":"<pre><code>import asyncio\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass PerformantCrewManager:\n    def __init__(self):\n        self.client = CrewMCPClient()\n        self.executor = ThreadPoolExecutor(max_workers=10)\n\n    async def parallel_compliance_check(self, vessel_ids: List[str]) -&gt; Dict:\n        \"\"\"Check compliance for multiple vessels in parallel\"\"\"\n\n        async def check_single_vessel(vessel_id: str) -&gt; Dict:\n            try:\n                result = await asyncio.get_event_loop().run_in_executor(\n                    self.executor,\n                    lambda: self.client.execute_tool(\"compliance_report\", {\n                        \"vessel_id\": vessel_id,\n                        \"format\": \"summary\"\n                    })\n                )\n                return {\"vessel_id\": vessel_id, \"result\": result, \"success\": True}\n            except Exception as e:\n                return {\"vessel_id\": vessel_id, \"error\": str(e), \"success\": False}\n\n        # Execute all checks in parallel\n        tasks = [check_single_vessel(vessel_id) for vessel_id in vessel_ids]\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n\n        # Process results\n        successful = [r for r in results if isinstance(r, dict) and r.get(\"success\")]\n        failed = [r for r in results if isinstance(r, dict) and not r.get(\"success\")]\n\n        return {\n            \"total_vessels\": len(vessel_ids),\n            \"successful_checks\": len(successful),\n            \"failed_checks\": len(failed),\n            \"results\": successful,\n            \"errors\": failed\n        }\n\n# Usage example\nasync def fleet_compliance_check():\n    manager = PerformantCrewManager()\n\n    vessel_ids = [\n        \"vessel-001\", \"vessel-002\", \"vessel-003\",\n        \"vessel-004\", \"vessel-005\"\n    ]\n\n    start_time = time.time()\n    results = await manager.parallel_compliance_check(vessel_ids)\n    execution_time = time.time() - start_time\n\n    print(f\"Checked {results['total_vessels']} vessels in {execution_time:.2f} seconds\")\n    print(f\"Successful: {results['successful_checks']}, Failed: {results['failed_checks']}\")\n</code></pre>"},{"location":"mcp/examples/openai/#testing","title":"Testing","text":""},{"location":"mcp/examples/openai/#unit-tests-for-integration","title":"Unit Tests for Integration","text":"<pre><code>import pytest\nfrom unittest.mock import Mock, patch\nimport json\n\nclass TestCrewMCPIntegration:\n\n    @pytest.fixture\n    def mock_client(self):\n        client = CrewMCPClient()\n        client.execute_tool = Mock()\n        client.openai_client.chat.completions.create = Mock()\n        return client\n\n    @pytest.mark.asyncio\n    async def test_crew_search_integration(self, mock_client):\n        # Mock OpenAI response\n        mock_tool_call = Mock()\n        mock_tool_call.function.name = \"search_crew\"\n        mock_tool_call.function.arguments = json.dumps({\n            \"query\": \"deck officers\",\n            \"filters\": {\"department\": \"deck\"}\n        })\n\n        mock_response = Mock()\n        mock_response.choices[0].message.tool_calls = [mock_tool_call]\n        mock_client.openai_client.chat.completions.create.return_value = mock_response\n\n        # Mock MCP tool response\n        mock_client.execute_tool.return_value = {\n            \"matches\": [{\"name\": \"John Doe\", \"rank\": \"Chief Officer\"}],\n            \"total_count\": 1\n        }\n\n        # Test the integration\n        response = await mock_client.openai_client.chat.completions.create(\n            model=\"gpt-4\",\n            messages=[{\"role\": \"user\", \"content\": \"Find deck officers\"}],\n            tools=CREW_MCP_TOOLS\n        )\n\n        assert response.choices[0].message.tool_calls[0].function.name == \"search_crew\"\n\n        # Test tool execution\n        parameters = json.loads(response.choices[0].message.tool_calls[0].function.arguments)\n        result = mock_client.execute_tool(\"search_crew\", parameters)\n\n        assert result[\"total_count\"] == 1\n        assert result[\"matches\"][0][\"name\"] == \"John Doe\"\n\n    @pytest.mark.asyncio\n    async def test_error_handling(self, mock_client):\n        # Mock error response\n        mock_client.execute_tool.side_effect = requests.exceptions.RequestException(\"Network error\")\n\n        with pytest.raises(requests.exceptions.RequestException):\n            mock_client.execute_tool(\"search_crew\", {\"query\": \"test\"})\n\n# Run tests\nif __name__ == \"__main__\":\n    pytest.main([__file__])\n</code></pre> <p>This comprehensive OpenAI integration guide provides everything needed to successfully integrate the Crew Appraisals MCP tools with OpenAI's GPT models, from basic setup to advanced conversational patterns and performance optimization.</p>"},{"location":"mcp/tools/check-certificates/","title":"check_certificates Tool","text":""},{"location":"mcp/tools/check-certificates/#overview","title":"Overview","text":"<p>The <code>check_certificates</code> tool enables LLMs to monitor certificate expiry status for crew members, departments, or the entire organization. This tool is essential for compliance management and helps ensure all crew certifications remain valid.</p>"},{"location":"mcp/tools/check-certificates/#tool-signature","title":"Tool Signature","text":"<pre><code>async def check_certificates(\n    crew_member_id: Optional[str] = None,\n    check_expiring: bool = True,\n    days_ahead: int = 90,\n    department: Optional[str] = None,\n    db: AsyncSession = None\n) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"mcp/tools/check-certificates/#parameters","title":"Parameters","text":"Parameter Type Required Default Description <code>crew_member_id</code> <code>string</code> No <code>null</code> UUID of specific crew member to check. If not provided, checks all crew <code>check_expiring</code> <code>boolean</code> No <code>true</code> Include certificates that are expiring within the specified timeframe <code>days_ahead</code> <code>integer</code> No <code>90</code> Number of days to look ahead for expiring certificates (1-365) <code>department</code> <code>string</code> No <code>null</code> Filter by specific department (deck, engine, catering, etc.)"},{"location":"mcp/tools/check-certificates/#parameter-details","title":"Parameter Details","text":""},{"location":"mcp/tools/check-certificates/#crew_member_id","title":"crew_member_id","text":"<ul> <li>Format: UUID string (e.g., \"123e4567-e89b-12d3-a456-426614174000\")</li> <li>Scope: When provided, checks only this crew member's certificates</li> <li>Use Case: Individual crew member certificate audit</li> </ul>"},{"location":"mcp/tools/check-certificates/#check_expiring","title":"check_expiring","text":"<ul> <li>Impact: When <code>false</code>, only returns expired certificates</li> <li>Performance: Setting to <code>false</code> can improve performance for large datasets</li> <li>Use Case: Focus on immediate compliance issues vs. proactive planning</li> </ul>"},{"location":"mcp/tools/check-certificates/#days_ahead","title":"days_ahead","text":"<ul> <li>Range: 1-365 days</li> <li>Common Values:</li> <li><code>30</code>: Critical alerts for imminent expirations</li> <li><code>90</code>: Standard quarterly planning horizon</li> <li><code>180</code>: Extended planning for complex renewals</li> <li>Validation: Values outside range will be clamped</li> </ul>"},{"location":"mcp/tools/check-certificates/#department","title":"department","text":"<ul> <li>Valid Values: <code>deck</code>, <code>engine</code>, <code>catering</code>, <code>radio</code>, <code>medical</code></li> <li>Case Sensitivity: Case-insensitive matching</li> <li>Filtering: Applies to both expired and expiring certificates</li> </ul>"},{"location":"mcp/tools/check-certificates/#response-format","title":"Response Format","text":""},{"location":"mcp/tools/check-certificates/#individual-crew-member-response","title":"Individual Crew Member Response","text":"<pre><code>{\n  \"crew_member_id\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"certificates\": {\n    \"total\": 8,\n    \"valid\": [\n      {\n        \"id\": \"cert-001\",\n        \"type\": \"STCW Basic Safety Training\",\n        \"number\": \"BST-2024-001\",\n        \"expiry_date\": \"2026-12-15\"\n      }\n    ],\n    \"expiring\": [\n      {\n        \"id\": \"cert-002\",\n        \"type\": \"Medical Certificate\",\n        \"number\": \"MED-2024-002\",\n        \"expiry_date\": \"2025-01-15\"\n      }\n    ],\n    \"expired\": [\n      {\n        \"id\": \"cert-003\",\n        \"type\": \"Radio Operator License\",\n        \"number\": \"ROL-2023-003\",\n        \"expiry_date\": \"2024-06-30\"\n      }\n    ]\n  },\n  \"check_date\": \"2024-10-15\",\n  \"days_ahead\": 90\n}\n</code></pre>"},{"location":"mcp/tools/check-certificates/#departmentorganization-response","title":"Department/Organization Response","text":"<pre><code>{\n  \"scope\": \"deck\",\n  \"expiring\": [\n    {\n      \"crew_member_id\": \"123e4567-e89b-12d3-a456-426614174000\",\n      \"crew_member_name\": \"John Smith\",\n      \"certificate_type\": \"Officer of Watch Certificate\",\n      \"certificate_number\": \"OOW-2024-001\",\n      \"expiry_date\": \"2025-01-15\",\n      \"days_until_expiry\": 45,\n      \"priority\": \"high\"\n    }\n  ],\n  \"expired\": [\n    {\n      \"crew_member_id\": \"456e7890-e89b-12d3-a456-426614174001\",\n      \"crew_member_name\": \"Jane Doe\",\n      \"certificate_type\": \"STCW Advanced Fire Fighting\",\n      \"certificate_number\": \"AFF-2023-002\",\n      \"expiry_date\": \"2024-08-15\",\n      \"days_overdue\": 61,\n      \"priority\": \"critical\"\n    }\n  ],\n  \"expiring_count\": 12,\n  \"expired_count\": 3,\n  \"check_date\": \"2024-10-15\",\n  \"days_ahead\": 90\n}\n</code></pre>"},{"location":"mcp/tools/check-certificates/#error-response","title":"Error Response","text":"<pre><code>{\n  \"error\": \"Crew member not found: 123e4567-e89b-12d3-a456-426614174000\",\n  \"certificates\": {},\n  \"status\": \"failed\"\n}\n</code></pre>"},{"location":"mcp/tools/check-certificates/#use-cases","title":"Use Cases","text":""},{"location":"mcp/tools/check-certificates/#1-individual-crew-member-certificate-audit","title":"1. Individual Crew Member Certificate Audit","text":"<p>Scenario: Check all certificates for a specific crew member before deployment.</p> <p>LLM Prompt: \"Check the certificate status for crew member John Smith (ID: 123e4567-e89b-12d3-a456-426614174000). I need to see all certificates including those expiring in the next 6 months.\"</p> <p>Tool Call: <pre><code>{\n  \"tool\": \"check_certificates\",\n  \"parameters\": {\n    \"crew_member_id\": \"123e4567-e89b-12d3-a456-426614174000\",\n    \"check_expiring\": true,\n    \"days_ahead\": 180\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools/check-certificates/#2-department-compliance-review","title":"2. Department Compliance Review","text":"<p>Scenario: Monthly compliance check for the deck department.</p> <p>LLM Prompt: \"Generate a certificate compliance report for the deck department. I want to see all expired certificates and those expiring in the next 3 months.\"</p> <p>Tool Call: <pre><code>{\n  \"tool\": \"check_certificates\",\n  \"parameters\": {\n    \"department\": \"deck\",\n    \"check_expiring\": true,\n    \"days_ahead\": 90\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools/check-certificates/#3-critical-expiry-alerts","title":"3. Critical Expiry Alerts","text":"<p>Scenario: Daily check for certificates expiring within 30 days across all departments.</p> <p>LLM Prompt: \"Show me all certificates that will expire in the next 30 days. This is for our urgent renewal planning.\"</p> <p>Tool Call: <pre><code>{\n  \"tool\": \"check_certificates\",\n  \"parameters\": {\n    \"check_expiring\": true,\n    \"days_ahead\": 30\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools/check-certificates/#4-expired-certificates-only","title":"4. Expired Certificates Only","text":"<p>Scenario: Focus on immediate compliance violations.</p> <p>LLM Prompt: \"List all expired certificates in the organization. I need to prioritize immediate renewals.\"</p> <p>Tool Call: <pre><code>{\n  \"tool\": \"check_certificates\",\n  \"parameters\": {\n    \"check_expiring\": false,\n    \"days_ahead\": 0\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools/check-certificates/#example-llm-prompts","title":"Example LLM Prompts","text":""},{"location":"mcp/tools/check-certificates/#conversational-queries","title":"Conversational Queries","text":"<ol> <li>\"Which crew members in the engine department have certificates expiring soon?\"</li> <li>\"Is Captain Johnson's documentation up to date for his next assignment?\"</li> <li>\"Show me the certificate status for all radio operators.\"</li> <li>\"What certificates expired last month that still need renewal?\"</li> <li>\"Check if our deck officers are compliant for the upcoming port inspection.\"</li> </ol>"},{"location":"mcp/tools/check-certificates/#analytical-queries","title":"Analytical Queries","text":"<ol> <li>\"Analyze certificate expiry patterns in the catering department over the next quarter.\"</li> <li>\"Compare certificate compliance rates between deck and engine departments.\"</li> <li>\"Identify crew members with multiple expiring certificates to prioritize renewals.\"</li> <li>\"Generate a timeline of upcoming certificate renewals for budget planning.\"</li> </ol>"},{"location":"mcp/tools/check-certificates/#integration-patterns","title":"Integration Patterns","text":""},{"location":"mcp/tools/check-certificates/#with-openai-function-calling","title":"With OpenAI Function Calling","text":"<pre><code>tools = [{\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"check_certificates\",\n        \"description\": \"Check certificate expiry status for crew members\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"crew_member_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"UUID of crew member (optional)\"\n                },\n                \"check_expiring\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"Include expiring certificates\",\n                    \"default\": True\n                },\n                \"days_ahead\": {\n                    \"type\": \"integer\",\n                    \"description\": \"Days to look ahead for expiring certificates\",\n                    \"default\": 90,\n                    \"minimum\": 1,\n                    \"maximum\": 365\n                },\n                \"department\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"deck\", \"engine\", \"catering\", \"radio\", \"medical\"],\n                    \"description\": \"Filter by department\"\n                }\n            }\n        }\n    }\n}]\n</code></pre>"},{"location":"mcp/tools/check-certificates/#with-claude-tool-use","title":"With Claude Tool Use","text":"<pre><code>tools = [{\n    \"name\": \"check_certificates\",\n    \"description\": \"Check certificate expiry status for crew members with advanced filtering options\",\n    \"input_schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"crew_member_id\": {\n                \"type\": \"string\",\n                \"description\": \"UUID of specific crew member to check\"\n            },\n            \"check_expiring\": {\n                \"type\": \"boolean\",\n                \"description\": \"Include certificates expiring within specified timeframe\",\n                \"default\": True\n            },\n            \"days_ahead\": {\n                \"type\": \"integer\",\n                \"description\": \"Number of days ahead to check for expiring certificates\",\n                \"default\": 90\n            },\n            \"department\": {\n                \"type\": \"string\",\n                \"description\": \"Filter by department (deck, engine, catering, radio, medical)\"\n            }\n        }\n    }\n}]\n</code></pre>"},{"location":"mcp/tools/check-certificates/#performance-considerations","title":"Performance Considerations","text":""},{"location":"mcp/tools/check-certificates/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Specific Queries: Use <code>crew_member_id</code> when checking individual crew members</li> <li>Department Filtering: Filter by department to reduce query scope</li> <li>Limit Timeframe: Use smaller <code>days_ahead</code> values for faster queries</li> <li>Caching: Results are cached for 5 minutes for identical queries</li> </ol>"},{"location":"mcp/tools/check-certificates/#query-complexity","title":"Query Complexity","text":"<ul> <li>Individual Crew Member: O(1) - Direct lookup with joins</li> <li>Department Filter: O(n) where n = department crew count</li> <li>Organization-wide: O(m) where m = total crew count</li> <li>Date Calculations: Performed at database level for efficiency</li> </ul>"},{"location":"mcp/tools/check-certificates/#error-handling","title":"Error Handling","text":""},{"location":"mcp/tools/check-certificates/#common-errors","title":"Common Errors","text":"<ol> <li>Invalid UUID: Crew member ID format validation</li> <li>Department Not Found: Invalid department name</li> <li>Invalid Date Range: Days ahead outside valid range</li> <li>Database Timeout: Large dataset queries timing out</li> <li>Permission Denied: Insufficient access to crew data</li> </ol>"},{"location":"mcp/tools/check-certificates/#error-recovery-strategies","title":"Error Recovery Strategies","text":"<pre><code>try:\n    result = await check_certificates(\n        crew_member_id=\"invalid-uuid\",\n        days_ahead=90\n    )\nexcept ValidationError as e:\n    # Handle parameter validation errors\n    return {\"error\": f\"Invalid parameters: {e}\"}\nexcept DatabaseError as e:\n    # Handle database connection issues\n    return {\"error\": \"Service temporarily unavailable\"}\n</code></pre>"},{"location":"mcp/tools/check-certificates/#security-compliance","title":"Security &amp; Compliance","text":""},{"location":"mcp/tools/check-certificates/#data-protection","title":"Data Protection","text":"<ul> <li>PII Handling: Certificate numbers may be truncated in responses</li> <li>Role-based Access: Users only see certificates for authorized crew</li> <li>Audit Logging: All certificate checks are logged for compliance</li> <li>Data Retention: Query logs retained per regulatory requirements</li> </ul>"},{"location":"mcp/tools/check-certificates/#regulatory-compliance","title":"Regulatory Compliance","text":"<ul> <li>STCW Standards: Aligns with international maritime certification requirements</li> <li>Flag State Requirements: Supports country-specific certification rules</li> <li>Port State Control: Provides data needed for PSC inspections</li> <li>ISM Code Compliance: Supports SMS certificate management requirements</li> </ul>"},{"location":"mcp/tools/check-certificates/#related-tools","title":"Related Tools","text":"<ul> <li><code>search_crew</code>: Find crew members for certificate checking</li> <li><code>create_appraisal</code>: Performance appraisals often reference certification status</li> <li><code>compliance_report</code>: Generate comprehensive compliance reports including certificates</li> <li><code>vessel_assignment</code>: Vessel assignments require valid certificates</li> </ul>"},{"location":"mcp/tools/check-certificates/#best-practices","title":"Best Practices","text":""},{"location":"mcp/tools/check-certificates/#for-llm-integration","title":"For LLM Integration","text":"<ol> <li>Context Awareness: Reference previous certificate checks in conversation</li> <li>Proactive Alerts: Set up regular checks for critical timeframes</li> <li>Actionable Results: Provide clear next steps for expiring/expired certificates</li> <li>Priority Handling: Differentiate between expired (critical) and expiring (planned) certificates</li> </ol>"},{"location":"mcp/tools/check-certificates/#for-system-integration","title":"For System Integration","text":"<ol> <li>Regular Monitoring: Schedule automated checks for compliance reporting</li> <li>Alert Thresholds: Configure different alert levels (30/60/90 days)</li> <li>Renewal Tracking: Integrate with certificate renewal workflow systems</li> <li>Historical Analysis: Track expiry patterns to improve renewal planning</li> </ol>"},{"location":"mcp/tools/check-certificates/#testing","title":"Testing","text":""},{"location":"mcp/tools/check-certificates/#unit-tests","title":"Unit Tests","text":"<pre><code>async def test_check_individual_certificates():\n    result = await check_certificates(\n        crew_member_id=\"test-crew-id\",\n        days_ahead=90,\n        db=test_db\n    )\n    assert result[\"certificates\"][\"total\"] &gt; 0\n    assert \"expiry_date\" in result[\"certificates\"][\"valid\"][0]\n\nasync def test_check_department_certificates():\n    result = await check_certificates(\n        department=\"deck\",\n        days_ahead=30,\n        db=test_db\n    )\n    assert result[\"scope\"] == \"deck\"\n    assert \"expiring_count\" in result\n</code></pre>"},{"location":"mcp/tools/check-certificates/#integration-tests","title":"Integration Tests","text":"<pre><code>async def test_llm_certificate_check():\n    # Test with actual LLM client\n    response = await llm_client.chat.completions.create(\n        model=\"gpt-4\",\n        messages=[{\"role\": \"user\", \"content\": \"Check certificates for the deck department\"}],\n        tools=[check_certificates_tool]\n    )\n    assert response.choices[0].message.tool_calls is not None\n</code></pre>"},{"location":"mcp/tools/compliance-report/","title":"compliance_report Tool","text":""},{"location":"mcp/tools/compliance-report/#overview","title":"Overview","text":"<p>The <code>compliance_report</code> tool enables LLMs to generate comprehensive compliance reports for vessels, departments, or the entire organization. This tool is essential for regulatory compliance monitoring, audit preparation, and operational risk management.</p>"},{"location":"mcp/tools/compliance-report/#tool-signature","title":"Tool Signature","text":"<pre><code>async def compliance_report(\n    vessel_id: Optional[str] = None,\n    department_id: Optional[str] = None,\n    include_expiring: bool = True,\n    format: str = \"summary\",\n    db: AsyncSession = None\n) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"mcp/tools/compliance-report/#parameters","title":"Parameters","text":"Parameter Type Required Default Description <code>vessel_id</code> <code>string</code> No <code>null</code> UUID of specific vessel to analyze <code>department_id</code> <code>string</code> No <code>null</code> Department to analyze (deck, engine, catering) <code>include_expiring</code> <code>boolean</code> No <code>true</code> Include certificates expiring within 90 days <code>format</code> <code>string</code> No <code>\"summary\"</code> Report format: summary, detailed, or csv"},{"location":"mcp/tools/compliance-report/#parameter-details","title":"Parameter Details","text":""},{"location":"mcp/tools/compliance-report/#vessel_id","title":"vessel_id","text":"<ul> <li>Format: UUID string (e.g., \"123e4567-e89b-12d3-a456-426614174000\")</li> <li>Scope: When provided, generates vessel-specific compliance report</li> <li>Validation: Must be a valid vessel UUID in the system</li> <li>Use Case: Pre-voyage compliance checks, port state control preparation</li> </ul>"},{"location":"mcp/tools/compliance-report/#department_id","title":"department_id","text":"<ul> <li>Valid Values: <code>deck</code>, <code>engine</code>, <code>catering</code>, <code>radio</code>, <code>medical</code></li> <li>Scope: Analyzes compliance across all crew in the specified department</li> <li>Case Sensitivity: Case-insensitive matching</li> <li>Use Case: Department-level compliance audits, training planning</li> </ul>"},{"location":"mcp/tools/compliance-report/#include_expiring","title":"include_expiring","text":"<ul> <li>Impact: When <code>true</code>, includes certificates expiring within 90 days</li> <li>Performance: Setting to <code>false</code> improves performance for large datasets</li> <li>Use Case: Focus on immediate violations vs. proactive compliance planning</li> </ul>"},{"location":"mcp/tools/compliance-report/#format","title":"format","text":"<ul> <li>Options:</li> <li><code>\"summary\"</code>: High-level compliance overview with key metrics</li> <li><code>\"detailed\"</code>: Comprehensive report with individual crew details</li> <li><code>\"csv\"</code>: Data export format for further analysis</li> <li>Use Case: Different audiences need different levels of detail</li> </ul>"},{"location":"mcp/tools/compliance-report/#response-format","title":"Response Format","text":""},{"location":"mcp/tools/compliance-report/#vessel-compliance-report-summary","title":"Vessel Compliance Report (Summary)","text":"<pre><code>{\n  \"vessel_id\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"vessel_name\": \"MV Ocean Pioneer\",\n  \"compliance_status\": \"non_compliant\",\n  \"summary\": {\n    \"crew_status\": \"18/20 crew\",\n    \"expired_certificates\": 2,\n    \"expiring_certificates\": 5\n  },\n  \"issues\": [\n    \"Vessel is undermanned: 18/20 crew\",\n    \"2 expired certificates found\",\n    \"5 certificates expiring within 90 days\"\n  ],\n  \"recommendations\": [\n    \"Assign additional crew to meet minimum manning requirements\",\n    \"Renew expired certificates immediately\",\n    \"Schedule certificate renewals for expiring documents\"\n  ],\n  \"report_date\": \"2024-10-15T14:30:00Z\"\n}\n</code></pre>"},{"location":"mcp/tools/compliance-report/#department-compliance-report","title":"Department Compliance Report","text":"<pre><code>{\n  \"department\": \"deck\",\n  \"compliance_status\": \"compliant\",\n  \"summary\": {\n    \"active_crew\": 45,\n    \"expired_certificates\": 0,\n    \"expiring_certificates\": 8\n  },\n  \"issues\": [\n    \"8 certificates expiring within 90 days\"\n  ],\n  \"recommendations\": [\n    \"Plan certificate renewals for expiring documents\",\n    \"Consider scheduling training courses for bulk renewals\"\n  ],\n  \"report_date\": \"2024-10-15T14:30:00Z\"\n}\n</code></pre>"},{"location":"mcp/tools/compliance-report/#organization-wide-compliance-report","title":"Organization-wide Compliance Report","text":"<pre><code>{\n  \"scope\": \"organization\",\n  \"compliance_status\": \"non_compliant\",\n  \"summary\": {\n    \"total_crew\": 450,\n    \"active_crew\": 387,\n    \"expired_certificates\": 12,\n    \"expiring_within_90_days\": 78,\n    \"compliance_rate\": 94.2\n  },\n  \"issues\": [\n    \"12 expired certificates across organization\",\n    \"78 certificates expiring within 90 days\"\n  ],\n  \"recommendations\": [\n    \"Implement automated certificate renewal reminders\",\n    \"Conduct quarterly compliance audits\",\n    \"Maintain buffer period for certificate renewals\"\n  ],\n  \"departmental_breakdown\": {\n    \"deck\": {\"compliance_rate\": 96.5, \"issues\": 3},\n    \"engine\": {\"compliance_rate\": 92.1, \"issues\": 7},\n    \"catering\": {\"compliance_rate\": 95.8, \"issues\": 2}\n  },\n  \"report_date\": \"2024-10-15T14:30:00Z\"\n}\n</code></pre>"},{"location":"mcp/tools/compliance-report/#detailed-format-example","title":"Detailed Format Example","text":"<pre><code>{\n  \"vessel_id\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"vessel_name\": \"MV Ocean Pioneer\",\n  \"compliance_status\": \"non_compliant\",\n  \"details\": {\n    \"manning_analysis\": {\n      \"current_crew\": 18,\n      \"minimum_crew\": 20,\n      \"positions_vacant\": [\"Second Engineer\", \"Able Seaman\"],\n      \"certification_gaps\": [\n        {\n          \"position\": \"Third Officer\",\n          \"missing_cert\": \"STCW Advanced Fire Fighting\",\n          \"crew_member\": \"John Smith\",\n          \"impact\": \"Cannot serve watch independently\"\n        }\n      ]\n    },\n    \"certificate_analysis\": {\n      \"expired\": [\n        {\n          \"crew_member_id\": \"crew-001\",\n          \"crew_name\": \"Jane Doe\",\n          \"certificate\": \"Medical Certificate\",\n          \"expiry_date\": \"2024-08-15\",\n          \"days_overdue\": 61,\n          \"severity\": \"critical\"\n        }\n      ],\n      \"expiring_soon\": [\n        {\n          \"crew_member_id\": \"crew-002\",\n          \"crew_name\": \"Bob Johnson\",\n          \"certificate\": \"STCW Basic Safety\",\n          \"expiry_date\": \"2024-12-01\",\n          \"days_remaining\": 47,\n          \"severity\": \"medium\"\n        }\n      ]\n    },\n    \"risk_assessment\": {\n      \"overall_risk\": \"medium\",\n      \"operational_impact\": \"Limited operations possible\",\n      \"regulatory_risk\": \"Port state control detention possible\"\n    }\n  }\n}\n</code></pre>"},{"location":"mcp/tools/compliance-report/#use-cases","title":"Use Cases","text":""},{"location":"mcp/tools/compliance-report/#1-pre-voyage-compliance-check","title":"1. Pre-Voyage Compliance Check","text":"<p>Scenario: Verify vessel compliance before departure to avoid port delays.</p> <p>LLM Prompt: \"Generate a compliance report for MV Ocean Pioneer before its departure to Singapore. I need to ensure we won't have any issues with port state control.\"</p> <p>Tool Call: <pre><code>{\n  \"tool\": \"compliance_report\",\n  \"parameters\": {\n    \"vessel_id\": \"123e4567-e89b-12d3-a456-426614174000\",\n    \"include_expiring\": true,\n    \"format\": \"detailed\"\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools/compliance-report/#2-department-audit-preparation","title":"2. Department Audit Preparation","text":"<p>Scenario: Prepare for annual audit of engine department compliance.</p> <p>LLM Prompt: \"Create a comprehensive compliance report for the engine department. The external auditors want to see our certification status and any compliance issues.\"</p> <p>Tool Call: <pre><code>{\n  \"tool\": \"compliance_report\",\n  \"parameters\": {\n    \"department_id\": \"engine\",\n    \"include_expiring\": true,\n    \"format\": \"detailed\"\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools/compliance-report/#3-monthly-executive-summary","title":"3. Monthly Executive Summary","text":"<p>Scenario: Generate high-level compliance overview for management.</p> <p>LLM Prompt: \"Provide a summary compliance report for the entire fleet. The CEO needs an overview of our compliance status for the monthly board meeting.\"</p> <p>Tool Call: <pre><code>{\n  \"tool\": \"compliance_report\",\n  \"parameters\": {\n    \"include_expiring\": true,\n    \"format\": \"summary\"\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools/compliance-report/#4-data-export-for-analysis","title":"4. Data Export for Analysis","text":"<p>Scenario: Export compliance data for detailed analysis in external tools.</p> <p>LLM Prompt: \"Export detailed compliance data for all vessels in CSV format. Our compliance officer wants to analyze trends in Excel.\"</p> <p>Tool Call: <pre><code>{\n  \"tool\": \"compliance_report\",\n  \"parameters\": {\n    \"include_expiring\": true,\n    \"format\": \"csv\"\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools/compliance-report/#example-llm-prompts","title":"Example LLM Prompts","text":""},{"location":"mcp/tools/compliance-report/#operational-compliance","title":"Operational Compliance","text":"<ol> <li>\"Show me the compliance status of all vessels scheduled for port calls this week.\"</li> <li>\"Which vessels have the highest compliance risk right now?\"</li> <li>\"Generate compliance reports for all vessels in Asian waters.\"</li> <li>\"Check compliance status for vessels due for dry dock this quarter.\"</li> </ol>"},{"location":"mcp/tools/compliance-report/#audit-regulatory","title":"Audit &amp; Regulatory","text":"<ol> <li>\"Prepare compliance documentation for the upcoming flag state inspection.\"</li> <li>\"Create audit trail reports showing compliance improvements over the last 6 months.\"</li> <li>\"Generate reports showing how we've addressed previous port state control deficiencies.\"</li> <li>\"Provide compliance evidence for insurance renewal requirements.\"</li> </ol>"},{"location":"mcp/tools/compliance-report/#strategic-planning","title":"Strategic Planning","text":"<ol> <li>\"Analyze compliance trends to identify training needs for next year.\"</li> <li>\"Show me department-wise compliance rates to allocate training budgets.\"</li> <li>\"Identify vessels requiring significant compliance investment.\"</li> <li>\"Generate forecast reports for certificate renewal costs.\"</li> </ol>"},{"location":"mcp/tools/compliance-report/#report-types-analysis","title":"Report Types &amp; Analysis","text":""},{"location":"mcp/tools/compliance-report/#compliance-risk-levels","title":"Compliance Risk Levels","text":"Risk Level Description Criteria Actions Required Critical Immediate operational impact Expired critical certificates Immediate action, vessel may be detained High Potential regulatory issues Multiple expiring certificates Schedule renewals within 30 days Medium Proactive planning needed Some expiring certificates Plan renewals within 90 days Low Good compliance status All certificates valid Maintain current practices"},{"location":"mcp/tools/compliance-report/#compliance-metrics","title":"Compliance Metrics","text":""},{"location":"mcp/tools/compliance-report/#key-performance-indicators","title":"Key Performance Indicators","text":"<pre><code>{\n  \"compliance_rate\": 96.5,\n  \"certificate_validity_rate\": 94.2,\n  \"manning_compliance_rate\": 98.1,\n  \"training_completion_rate\": 87.3,\n  \"audit_score\": 92.7\n}\n</code></pre>"},{"location":"mcp/tools/compliance-report/#trending-analysis","title":"Trending Analysis","text":"<ul> <li>Monthly Compliance Rate: Track compliance improvements over time</li> <li>Certificate Expiry Patterns: Identify seasonal renewal peaks</li> <li>Department Performance: Compare compliance across departments</li> <li>Vessel Risk Scores: Track individual vessel compliance trends</li> </ul>"},{"location":"mcp/tools/compliance-report/#integration-patterns","title":"Integration Patterns","text":""},{"location":"mcp/tools/compliance-report/#with-openai-function-calling","title":"With OpenAI Function Calling","text":"<pre><code>tools = [{\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"compliance_report\",\n        \"description\": \"Generate comprehensive compliance reports for vessels or departments\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"vessel_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"UUID of specific vessel (optional)\"\n                },\n                \"department_id\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"deck\", \"engine\", \"catering\", \"radio\", \"medical\"],\n                    \"description\": \"Department to analyze (optional)\"\n                },\n                \"include_expiring\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"Include certificates expiring within 90 days\",\n                    \"default\": True\n                },\n                \"format\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"summary\", \"detailed\", \"csv\"],\n                    \"description\": \"Report format\",\n                    \"default\": \"summary\"\n                }\n            }\n        }\n    }\n}]\n</code></pre>"},{"location":"mcp/tools/compliance-report/#with-claude-tool-use","title":"With Claude Tool Use","text":"<pre><code>tools = [{\n    \"name\": \"compliance_report\",\n    \"description\": \"Generate comprehensive compliance reports with risk analysis and recommendations\",\n    \"input_schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"vessel_id\": {\n                \"type\": \"string\",\n                \"description\": \"UUID of specific vessel for targeted compliance analysis\"\n            },\n            \"department_id\": {\n                \"type\": \"string\",\n                \"description\": \"Department to analyze: deck, engine, catering, radio, or medical\"\n            },\n            \"include_expiring\": {\n                \"type\": \"boolean\",\n                \"description\": \"Include certificates expiring within 90 days in the analysis\",\n                \"default\": True\n            },\n            \"format\": {\n                \"type\": \"string\",\n                \"description\": \"Report format: summary for overview, detailed for comprehensive analysis, csv for data export\",\n                \"enum\": [\"summary\", \"detailed\", \"csv\"],\n                \"default\": \"summary\"\n            }\n        }\n    }\n}]\n</code></pre>"},{"location":"mcp/tools/compliance-report/#advanced-analytics","title":"Advanced Analytics","text":""},{"location":"mcp/tools/compliance-report/#predictive-compliance-modeling","title":"Predictive Compliance Modeling","text":"<pre><code>{\n  \"compliance_forecast\": {\n    \"30_days\": {\n      \"predicted_compliance_rate\": 92.1,\n      \"certificates_expiring\": 23,\n      \"high_risk_vessels\": [\"vessel-001\", \"vessel-003\"]\n    },\n    \"90_days\": {\n      \"predicted_compliance_rate\": 87.5,\n      \"certificates_expiring\": 67,\n      \"training_requirements\": [\"STCW Refresher\", \"Medical Updates\"]\n    }\n  }\n}\n</code></pre>"},{"location":"mcp/tools/compliance-report/#cost-analysis","title":"Cost Analysis","text":"<pre><code>{\n  \"compliance_costs\": {\n    \"immediate_renewals\": {\n      \"cost\": 45000,\n      \"certificates\": 12,\n      \"priority\": \"critical\"\n    },\n    \"planned_renewals\": {\n      \"cost\": 127000,\n      \"certificates\": 43,\n      \"timeline\": \"90_days\"\n    },\n    \"training_costs\": {\n      \"cost\": 89000,\n      \"crew_affected\": 156,\n      \"courses_needed\": [\"Advanced Fire Fighting\", \"Medical Care\"]\n    }\n  }\n}\n</code></pre>"},{"location":"mcp/tools/compliance-report/#performance-optimization","title":"Performance &amp; Optimization","text":""},{"location":"mcp/tools/compliance-report/#query-performance","title":"Query Performance","text":"<ul> <li>Vessel Reports: &lt; 500ms for comprehensive vessel analysis</li> <li>Department Reports: &lt; 1s for large departments (100+ crew)</li> <li>Organization Reports: &lt; 3s for complete fleet analysis</li> <li>CSV Export: &lt; 2s for up to 10,000 records</li> </ul>"},{"location":"mcp/tools/compliance-report/#caching-strategy","title":"Caching Strategy","text":"<ol> <li>Report Caching: Cache reports for 30 minutes for identical parameters</li> <li>Data Caching: Cache certificate and crew data for 5 minutes</li> <li>Metric Caching: Cache calculated metrics for 1 hour</li> <li>Invalidation: Smart cache invalidation on data updates</li> </ol>"},{"location":"mcp/tools/compliance-report/#error-handling","title":"Error Handling","text":""},{"location":"mcp/tools/compliance-report/#common-errors","title":"Common Errors","text":"<pre><code>{\n  \"error\": \"Vessel not found: 123e4567-e89b-12d3-a456-426614174000\",\n  \"compliance_status\": \"unknown\",\n  \"suggestions\": [\n    \"Verify vessel ID is correct\",\n    \"Check if vessel is active in the system\",\n    \"Contact system administrator if vessel should exist\"\n  ]\n}\n</code></pre>"},{"location":"mcp/tools/compliance-report/#data-quality-issues","title":"Data Quality Issues","text":"<pre><code>{\n  \"warnings\": [\n    \"3 crew members have incomplete certificate data\",\n    \"Vessel manning certificate expires in 15 days\",\n    \"Some certificate types may not be current in system\"\n  ],\n  \"data_quality_score\": 87.3\n}\n</code></pre>"},{"location":"mcp/tools/compliance-report/#security-compliance","title":"Security &amp; Compliance","text":""},{"location":"mcp/tools/compliance-report/#access-control","title":"Access Control","text":"<ul> <li>Vessel Access: Users can only generate reports for authorized vessels</li> <li>Department Access: Department managers can access their department data</li> <li>Sensitive Data: PII and sensitive details filtered based on user roles</li> <li>Audit Trail: All report generation logged for compliance</li> </ul>"},{"location":"mcp/tools/compliance-report/#regulatory-standards","title":"Regulatory Standards","text":"<ul> <li>STCW Compliance: Reports align with STCW certification requirements</li> <li>Flag State Requirements: Incorporates flag state specific regulations</li> <li>Port State Control: Formats compatible with PSC inspection requirements</li> <li>ISM Code: Supports ISM compliance documentation needs</li> </ul>"},{"location":"mcp/tools/compliance-report/#related-tools","title":"Related Tools","text":"<ul> <li><code>check_certificates</code>: Detailed certificate analysis feeds into compliance reports</li> <li><code>search_crew</code>: Find specific crew for targeted compliance analysis</li> <li><code>vessel_assignment</code>: Assignment data influences vessel manning compliance</li> <li><code>create_appraisal</code>: Performance data can be included in compliance context</li> </ul>"},{"location":"mcp/tools/compliance-report/#best-practices","title":"Best Practices","text":""},{"location":"mcp/tools/compliance-report/#for-llm-integration","title":"For LLM Integration","text":"<ol> <li>Context Awareness: Use previous reports to track compliance improvements</li> <li>Actionable Insights: Provide clear next steps based on compliance status</li> <li>Risk Communication: Clearly communicate risk levels and implications</li> <li>Trend Analysis: Compare current reports with historical data when available</li> </ol>"},{"location":"mcp/tools/compliance-report/#for-system-integration","title":"for System Integration","text":"<ol> <li>Automated Scheduling: Generate reports automatically for critical timelines</li> <li>Alert Integration: Trigger alerts based on compliance thresholds</li> <li>Dashboard Integration: Feed report data into compliance dashboards</li> <li>Export Capabilities: Support various export formats for different stakeholders</li> </ol>"},{"location":"mcp/tools/compliance-report/#testing","title":"Testing","text":""},{"location":"mcp/tools/compliance-report/#unit-tests","title":"Unit Tests","text":"<pre><code>async def test_vessel_compliance_report():\n    result = await compliance_report(\n        vessel_id=\"test-vessel-123\",\n        include_expiring=True,\n        format=\"summary\",\n        db=test_db\n    )\n    assert result[\"compliance_status\"] in [\"compliant\", \"non_compliant\"]\n    assert \"summary\" in result\n    assert \"recommendations\" in result\n\nasync def test_department_compliance_report():\n    result = await compliance_report(\n        department_id=\"deck\",\n        format=\"detailed\",\n        db=test_db\n    )\n    assert result[\"department\"] == \"deck\"\n    assert \"active_crew\" in result[\"summary\"]\n</code></pre>"},{"location":"mcp/tools/compliance-report/#integration-tests","title":"Integration Tests","text":"<pre><code>async def test_llm_compliance_flow():\n    response = await llm_client.chat.completions.create(\n        model=\"gpt-4\",\n        messages=[{\n            \"role\": \"user\",\n            \"content\": \"Generate a compliance report for MV Ocean Pioneer\"\n        }],\n        tools=[compliance_report_tool]\n    )\n\n    tool_call = response.choices[0].message.tool_calls[0]\n    result = await execute_tool_call(tool_call)\n    assert result[\"vessel_name\"] == \"MV Ocean Pioneer\"\n    assert \"compliance_status\" in result\n</code></pre>"},{"location":"mcp/tools/compliance-report/#monitoring-kpis","title":"Monitoring &amp; KPIs","text":""},{"location":"mcp/tools/compliance-report/#usage-metrics","title":"Usage Metrics","text":"<ul> <li>Report Generation Frequency: Track how often different report types are generated</li> <li>Response Time Performance: Monitor query performance across different scopes</li> <li>Data Accuracy: Track data quality scores and improvement trends</li> <li>User Satisfaction: Measure usefulness of generated reports and recommendations</li> </ul>"},{"location":"mcp/tools/compliance-report/#business-impact","title":"Business Impact","text":"<ul> <li>Compliance Rate Improvement: Track organization-wide compliance improvements</li> <li>Cost Savings: Monitor reduced non-compliance penalties and operational delays</li> <li>Risk Reduction: Measure decreased incidents related to compliance issues</li> <li>Efficiency Gains: Track time savings in compliance management processes</li> </ul>"},{"location":"mcp/tools/create-appraisal/","title":"create_appraisal Tool","text":""},{"location":"mcp/tools/create-appraisal/#overview","title":"Overview","text":"<p>The <code>create_appraisal</code> tool enables LLMs to create structured performance appraisals for crew members. This tool provides AI-assisted evaluation capabilities with customizable categories, scoring systems, and detailed feedback mechanisms.</p>"},{"location":"mcp/tools/create-appraisal/#tool-signature","title":"Tool Signature","text":"<pre><code>async def create_appraisal(\n    crew_member_id: str,\n    vessel_id: Optional[str],\n    period_start: str,\n    period_end: str,\n    categories: List[Dict[str, Any]],\n    evaluator_id: Optional[str] = None,\n    db: AsyncSession = None\n) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"mcp/tools/create-appraisal/#parameters","title":"Parameters","text":""},{"location":"mcp/tools/create-appraisal/#required-parameters","title":"Required Parameters","text":"Parameter Type Description Example <code>crew_member_id</code> <code>string</code> UUID of the crew member being evaluated <code>\"550e8400-e29b-41d4-a716-446655440000\"</code> <code>vessel_id</code> <code>string</code> UUID of the vessel (optional, use <code>null</code> for shore-based) <code>\"660f9500-f39c-42e5-b827-557766550111\"</code> <code>period_start</code> <code>string</code> Start date of evaluation period (YYYY-MM-DD) <code>\"2024-01-01\"</code> <code>period_end</code> <code>string</code> End date of evaluation period (YYYY-MM-DD) <code>\"2024-06-30\"</code> <code>categories</code> <code>array</code> List of evaluation categories with scores See Categories Schema"},{"location":"mcp/tools/create-appraisal/#optional-parameters","title":"Optional Parameters","text":"Parameter Type Default Description Example <code>evaluator_id</code> <code>string</code> <code>\"ai-assistant\"</code> UUID of the evaluator <code>\"770a0600-g40d-43f6-c938-668877660222\"</code>"},{"location":"mcp/tools/create-appraisal/#categories-schema","title":"Categories Schema","text":"<p>Each category in the <code>categories</code> array should have the following structure:</p> <pre><code>{\n  \"name\": \"string\",           // Category name (required)\n  \"score\": \"number\",          // Score value (required, 0.0-5.0)\n  \"max_score\": \"number\",      // Maximum possible score (default: 5.0)\n  \"weight\": \"number\",         // Category weight for overall score (default: 1.0)\n  \"comments\": \"string\",       // Detailed comments (optional)\n  \"strengths\": \"string\",      // Identified strengths (optional)\n  \"weaknesses\": \"string\"      // Areas for improvement (optional)\n}\n</code></pre>"},{"location":"mcp/tools/create-appraisal/#standard-category-names","title":"Standard Category Names","text":"Category Description Typical Score Range <code>\"Technical Competence\"</code> Technical skills and knowledge 1.0 - 5.0 <code>\"Safety Awareness\"</code> Safety procedures and compliance 2.0 - 5.0 <code>\"Communication\"</code> Communication skills and teamwork 1.0 - 5.0 <code>\"Leadership\"</code> Leadership and mentoring abilities 1.0 - 5.0 <code>\"Problem Solving\"</code> Problem-solving and decision-making 1.0 - 5.0 <code>\"Reliability\"</code> Dependability and attendance 1.0 - 5.0 <code>\"Initiative\"</code> Proactivity and self-motivation 1.0 - 5.0 <code>\"Adaptability\"</code> Flexibility and learning ability 1.0 - 5.0"},{"location":"mcp/tools/create-appraisal/#response-schema","title":"Response Schema","text":""},{"location":"mcp/tools/create-appraisal/#successful-response","title":"Successful Response","text":"<pre><code>{\n  \"appraisal_id\": \"string\",        // Generated appraisal UUID\n  \"appraisal_number\": \"string\",    // Human-readable appraisal number\n  \"crew_member_id\": \"string\",      // Crew member UUID\n  \"vessel_id\": \"string|null\",      // Vessel UUID\n  \"period\": \"string\",              // Evaluation period description\n  \"categories_count\": \"integer\",   // Number of evaluation categories\n  \"overall_rating\": \"number\",      // Calculated overall rating\n  \"status\": \"string\",              // Appraisal status\n  \"created_at\": \"string|null\"      // Creation timestamp (ISO 8601)\n}\n</code></pre>"},{"location":"mcp/tools/create-appraisal/#error-response","title":"Error Response","text":"<pre><code>{\n  \"error\": \"string\",               // Error description\n  \"appraisal_id\": null,           // Null on failure\n  \"status\": \"failed\"              // Failed status\n}\n</code></pre>"},{"location":"mcp/tools/create-appraisal/#use-cases","title":"Use Cases","text":""},{"location":"mcp/tools/create-appraisal/#1-standard-performance-appraisal","title":"1. Standard Performance Appraisal","text":"<p>Prompt: \"Create a 6-month performance appraisal for John Smith focusing on his technical skills, safety awareness, and leadership\"</p> <p>Tool Call: <pre><code>{\n  \"tool\": \"create_appraisal\",\n  \"parameters\": {\n    \"crew_member_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"vessel_id\": \"660f9500-f39c-42e5-b827-557766550111\",\n    \"period_start\": \"2024-01-01\",\n    \"period_end\": \"2024-06-30\",\n    \"categories\": [\n      {\n        \"name\": \"Technical Competence\",\n        \"score\": 4.2,\n        \"comments\": \"Demonstrates strong technical knowledge with consistent application of procedures\",\n        \"strengths\": \"Excellent understanding of navigation systems and maintenance protocols\",\n        \"weaknesses\": \"Could improve documentation practices\"\n      },\n      {\n        \"name\": \"Safety Awareness\",\n        \"score\": 4.8,\n        \"comments\": \"Exceptional safety record with proactive hazard identification\",\n        \"strengths\": \"Consistently follows safety protocols and mentors junior crew on safety practices\"\n      },\n      {\n        \"name\": \"Leadership\",\n        \"score\": 3.9,\n        \"comments\": \"Shows good leadership potential with room for development\",\n        \"strengths\": \"Natural ability to guide team during complex operations\",\n        \"weaknesses\": \"Could improve delegation and feedback delivery skills\"\n      }\n    ]\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools/create-appraisal/#2-focused-evaluation-for-promotion","title":"2. Focused Evaluation for Promotion","text":"<p>Prompt: \"Evaluate Maria Santos for Chief Engineer promotion, focusing on technical competence and leadership skills\"</p> <p>Tool Call: <pre><code>{\n  \"tool\": \"create_appraisal\",\n  \"parameters\": {\n    \"crew_member_id\": \"661a1611-h51e-44g7-d049-779988771333\",\n    \"vessel_id\": \"660f9500-f39c-42e5-b827-557766550111\",\n    \"period_start\": \"2024-03-01\",\n    \"period_end\": \"2024-08-31\",\n    \"categories\": [\n      {\n        \"name\": \"Technical Competence\",\n        \"score\": 4.7,\n        \"weight\": 2.0,\n        \"comments\": \"Outstanding technical expertise in engine systems and troubleshooting\",\n        \"strengths\": \"Advanced knowledge of diesel engines, electrical systems, and automation\"\n      },\n      {\n        \"name\": \"Leadership\",\n        \"score\": 4.3,\n        \"weight\": 2.0,\n        \"comments\": \"Strong leadership skills with effective team management\",\n        \"strengths\": \"Excellent at training junior engineers and managing maintenance schedules\"\n      },\n      {\n        \"name\": \"Problem Solving\",\n        \"score\": 4.5,\n        \"weight\": 1.5,\n        \"comments\": \"Exceptional problem-solving abilities under pressure\",\n        \"strengths\": \"Quick diagnosis of complex machinery issues\"\n      }\n    ],\n    \"evaluator_id\": \"771b1722-i62f-45h8-e150-880099882444\"\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools/create-appraisal/#3-development-focused-appraisal","title":"3. Development-Focused Appraisal","text":"<p>Prompt: \"Create a development appraisal for a junior officer identifying areas for improvement\"</p> <p>Tool Call: <pre><code>{\n  \"tool\": \"create_appraisal\",\n  \"parameters\": {\n    \"crew_member_id\": \"772c1833-j73g-46i9-f261-991100993555\",\n    \"vessel_id\": \"660f9500-f39c-42e5-b827-557766550111\",\n    \"period_start\": \"2024-06-01\",\n    \"period_end\": \"2024-12-01\",\n    \"categories\": [\n      {\n        \"name\": \"Technical Competence\",\n        \"score\": 3.2,\n        \"comments\": \"Developing technical skills, shows good learning ability\",\n        \"strengths\": \"Quick to learn new procedures and eager to improve\",\n        \"weaknesses\": \"Needs more experience with navigation equipment and emergency procedures\"\n      },\n      {\n        \"name\": \"Communication\",\n        \"score\": 4.1,\n        \"comments\": \"Strong communication skills both verbal and written\",\n        \"strengths\": \"Clear reporting and good interaction with crew members\"\n      },\n      {\n        \"name\": \"Initiative\",\n        \"score\": 3.8,\n        \"comments\": \"Shows good initiative but sometimes needs guidance on priorities\",\n        \"strengths\": \"Proactive in identifying maintenance needs\",\n        \"weaknesses\": \"Should seek more feedback and clarification when uncertain\"\n      }\n    ]\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools/create-appraisal/#llm-integration-examples","title":"LLM Integration Examples","text":""},{"location":"mcp/tools/create-appraisal/#ai-assisted-appraisal-creation","title":"AI-Assisted Appraisal Creation","text":"<pre><code>class AppraisalAssistant:\n    \"\"\"AI assistant for creating performance appraisals\"\"\"\n\n    async def create_comprehensive_appraisal(\n        self,\n        crew_member_info: dict,\n        evaluation_context: dict,\n        performance_data: dict\n    ):\n        \"\"\"Create a comprehensive appraisal using AI analysis\"\"\"\n\n        # Analyze performance data to generate categories\n        categories = await self.analyze_performance_data(\n            crew_member_info,\n            performance_data,\n            evaluation_context\n        )\n\n        # Create the appraisal\n        result = await create_appraisal(\n            crew_member_id=crew_member_info[\"id\"],\n            vessel_id=evaluation_context.get(\"vessel_id\"),\n            period_start=evaluation_context[\"period_start\"],\n            period_end=evaluation_context[\"period_end\"],\n            categories=categories,\n            evaluator_id=evaluation_context.get(\"evaluator_id\")\n        )\n\n        return result\n\n    async def analyze_performance_data(\n        self,\n        crew_info: dict,\n        performance_data: dict,\n        context: dict\n    ) -&gt; List[dict]:\n        \"\"\"Analyze performance data to generate evaluation categories\"\"\"\n\n        categories = []\n\n        # Technical competence analysis\n        technical_score = self.calculate_technical_score(\n            performance_data.get(\"technical_incidents\", []),\n            performance_data.get(\"training_completed\", []),\n            crew_info.get(\"rank\")\n        )\n\n        categories.append({\n            \"name\": \"Technical Competence\",\n            \"score\": technical_score,\n            \"comments\": self.generate_technical_comments(performance_data),\n            \"strengths\": self.identify_technical_strengths(performance_data),\n            \"weaknesses\": self.identify_technical_weaknesses(performance_data)\n        })\n\n        # Safety awareness analysis\n        safety_score = self.calculate_safety_score(\n            performance_data.get(\"safety_incidents\", []),\n            performance_data.get(\"safety_training\", [])\n        )\n\n        categories.append({\n            \"name\": \"Safety Awareness\",\n            \"score\": safety_score,\n            \"comments\": self.generate_safety_comments(performance_data)\n        })\n\n        # Add more categories based on role and context\n        if crew_info.get(\"rank\") in [\"Captain\", \"Chief Officer\", \"Chief Engineer\"]:\n            leadership_score = self.calculate_leadership_score(\n                performance_data.get(\"leadership_feedback\", []),\n                performance_data.get(\"team_performance\", {})\n            )\n            categories.append({\n                \"name\": \"Leadership\",\n                \"score\": leadership_score,\n                \"weight\": 1.5,  # Higher weight for leadership roles\n                \"comments\": self.generate_leadership_comments(performance_data)\n            })\n\n        return categories\n\n    def calculate_technical_score(\n        self,\n        incidents: List[dict],\n        training: List[dict],\n        rank: str\n    ) -&gt; float:\n        \"\"\"Calculate technical competence score based on performance data\"\"\"\n\n        base_score = 3.5  # Baseline competent score\n\n        # Adjust based on incidents\n        if incidents:\n            serious_incidents = [i for i in incidents if i.get(\"severity\") == \"high\"]\n            base_score -= len(serious_incidents) * 0.5\n\n        # Adjust based on training\n        recent_training = [t for t in training if self.is_recent(t.get(\"date\"))]\n        base_score += min(len(recent_training) * 0.2, 1.0)\n\n        # Adjust based on rank expectations\n        if rank in [\"Captain\", \"Chief Engineer\"]:\n            base_score += 0.3  # Higher expectations\n\n        return min(max(base_score, 1.0), 5.0)  # Clamp between 1.0 and 5.0\n</code></pre>"},{"location":"mcp/tools/create-appraisal/#contextual-appraisal-generation","title":"Contextual Appraisal Generation","text":"<pre><code>async def generate_contextual_appraisal(\n    crew_member_id: str,\n    evaluation_period: dict,\n    performance_context: dict\n):\n    \"\"\"Generate appraisal with rich contextual information\"\"\"\n\n    # Gather contextual data\n    crew_history = await get_crew_history(crew_member_id)\n    vessel_context = await get_vessel_context(performance_context.get(\"vessel_id\"))\n    peer_feedback = await get_peer_feedback(crew_member_id, evaluation_period)\n\n    # Generate AI-informed categories\n    categories = []\n\n    # Context-aware scoring\n    if vessel_context.get(\"vessel_type\") == \"offshore\":\n        # Offshore vessels require higher safety standards\n        categories.append({\n            \"name\": \"Safety Awareness\",\n            \"score\": calculate_offshore_safety_score(performance_context),\n            \"weight\": 2.0,  # Higher weight for offshore operations\n            \"comments\": \"Offshore operations require exceptional safety awareness\"\n        })\n\n    if crew_history.get(\"years_experience\", 0) &lt; 2:\n        # Focus on development for junior crew\n        categories.extend([\n            {\n                \"name\": \"Learning Ability\",\n                \"score\": assess_learning_progress(performance_context),\n                \"comments\": \"Evaluated based on training progress and skill development\"\n            },\n            {\n                \"name\": \"Mentorship Receptiveness\",\n                \"score\": assess_mentorship_engagement(peer_feedback),\n                \"comments\": \"Willingness to learn from senior crew members\"\n            }\n        ])\n\n    # Create appraisal with context-informed categories\n    return await create_appraisal(\n        crew_member_id=crew_member_id,\n        vessel_id=performance_context.get(\"vessel_id\"),\n        period_start=evaluation_period[\"start\"],\n        period_end=evaluation_period[\"end\"],\n        categories=categories\n    )\n</code></pre>"},{"location":"mcp/tools/create-appraisal/#validation-and-business-rules","title":"Validation and Business Rules","text":""},{"location":"mcp/tools/create-appraisal/#input-validation","title":"Input Validation","text":"<p>The tool performs comprehensive validation:</p> <ol> <li>Date Validation</li> <li><code>period_start</code> must be before <code>period_end</code></li> <li>Evaluation period cannot exceed 12 months</li> <li> <p>Dates must be in valid YYYY-MM-DD format</p> </li> <li> <p>Score Validation</p> </li> <li>Scores must be between 0.0 and maximum score (default 5.0)</li> <li>Weights must be positive numbers</li> <li> <p>At least one category is required</p> </li> <li> <p>Reference Validation</p> </li> <li><code>crew_member_id</code> must exist and not be archived</li> <li><code>vessel_id</code> must exist if provided</li> <li><code>evaluator_id</code> must be valid if provided</li> </ol>"},{"location":"mcp/tools/create-appraisal/#business-rules","title":"Business Rules","text":"<pre><code># Example validation implementation\nclass AppraisalValidator:\n    \"\"\"Validates appraisal creation parameters\"\"\"\n\n    def validate_appraisal_request(self, params: dict) -&gt; List[str]:\n        \"\"\"Validate appraisal creation parameters\"\"\"\n        errors = []\n\n        # Date validation\n        start_date = datetime.strptime(params[\"period_start\"], \"%Y-%m-%d\").date()\n        end_date = datetime.strptime(params[\"period_end\"], \"%Y-%m-%d\").date()\n\n        if start_date &gt;= end_date:\n            errors.append(\"Period start must be before period end\")\n\n        if (end_date - start_date).days &gt; 365:\n            errors.append(\"Evaluation period cannot exceed 12 months\")\n\n        # Category validation\n        categories = params.get(\"categories\", [])\n        if not categories:\n            errors.append(\"At least one evaluation category is required\")\n\n        for i, category in enumerate(categories):\n            if not category.get(\"name\"):\n                errors.append(f\"Category {i+1} missing name\")\n\n            score = category.get(\"score\")\n            if score is None or not isinstance(score, (int, float)):\n                errors.append(f\"Category {i+1} missing valid score\")\n            elif score &lt; 0 or score &gt; category.get(\"max_score\", 5.0):\n                errors.append(f\"Category {i+1} score out of valid range\")\n\n        return errors\n</code></pre>"},{"location":"mcp/tools/create-appraisal/#performance-considerations","title":"Performance Considerations","text":""},{"location":"mcp/tools/create-appraisal/#optimization-strategies","title":"Optimization Strategies","text":"<ol> <li>Batch Operations: For multiple appraisals, use batch creation</li> <li>Database Transactions: All appraisal data is created in a single transaction</li> <li>Validation Caching: Cache crew member and vessel validations</li> <li>Category Templates: Use predefined category templates for consistency</li> </ol>"},{"location":"mcp/tools/create-appraisal/#example-batch-creation","title":"Example Batch Creation","text":"<pre><code>async def create_multiple_appraisals(\n    appraisal_requests: List[dict],\n    db: AsyncSession\n):\n    \"\"\"Create multiple appraisals efficiently\"\"\"\n\n    async with db.begin():\n        results = []\n        for request in appraisal_requests:\n            try:\n                result = await create_appraisal(db=db, **request)\n                results.append(result)\n            except Exception as e:\n                # Log error but continue with other appraisals\n                logger.error(f\"Failed to create appraisal: {e}\")\n                results.append({\"error\": str(e), \"request\": request})\n\n    return results\n</code></pre>"},{"location":"mcp/tools/create-appraisal/#error-handling","title":"Error Handling","text":""},{"location":"mcp/tools/create-appraisal/#common-error-scenarios","title":"Common Error Scenarios","text":"<ol> <li> <p>Invalid Crew Member ID <pre><code>{\n  \"error\": \"Crew member not found or archived: 550e8400-e29b-41d4-a716-446655440000\"\n}\n</code></pre></p> </li> <li> <p>Invalid Date Format <pre><code>{\n  \"error\": \"Invalid date format for period_start. Expected YYYY-MM-DD, got: 2024/01/01\"\n}\n</code></pre></p> </li> <li> <p>Score Validation Error <pre><code>{\n  \"error\": \"Category 'Technical Competence' score 6.0 exceeds maximum 5.0\"\n}\n</code></pre></p> </li> <li> <p>Missing Required Category Data <pre><code>{\n  \"error\": \"Category missing required 'name' field\"\n}\n</code></pre></p> </li> </ol>"},{"location":"mcp/tools/create-appraisal/#error-recovery-strategies","title":"Error Recovery Strategies","text":"<pre><code>async def robust_appraisal_creation(params: dict):\n    \"\"\"Create appraisal with comprehensive error handling\"\"\"\n\n    try:\n        # Validate parameters\n        validator = AppraisalValidator()\n        errors = validator.validate_appraisal_request(params)\n\n        if errors:\n            return {\n                \"success\": False,\n                \"errors\": errors,\n                \"suggestions\": get_validation_suggestions(errors)\n            }\n\n        # Attempt creation\n        result = await create_appraisal(**params)\n\n        if \"error\" in result:\n            return {\n                \"success\": False,\n                \"error\": result[\"error\"],\n                \"suggestions\": get_error_suggestions(result[\"error\"])\n            }\n\n        return {\n            \"success\": True,\n            \"appraisal\": result\n        }\n\n    except Exception as e:\n        logger.error(f\"Unexpected error in appraisal creation: {e}\")\n        return {\n            \"success\": False,\n            \"error\": \"An unexpected error occurred\",\n            \"suggestions\": [\"Please check your parameters and try again\"]\n        }\n\ndef get_validation_suggestions(errors: List[str]) -&gt; List[str]:\n    \"\"\"Provide helpful suggestions based on validation errors\"\"\"\n    suggestions = []\n\n    for error in errors:\n        if \"date\" in error.lower():\n            suggestions.append(\"Use YYYY-MM-DD format for dates\")\n        elif \"score\" in error.lower():\n            suggestions.append(\"Ensure scores are between 0.0 and 5.0\")\n        elif \"category\" in error.lower():\n            suggestions.append(\"Include name and score for each category\")\n\n    return suggestions\n</code></pre>"},{"location":"mcp/tools/create-appraisal/#testing","title":"Testing","text":""},{"location":"mcp/tools/create-appraisal/#unit-tests","title":"Unit Tests","text":"<pre><code>@pytest.mark.asyncio\nasync def test_create_basic_appraisal(db_session, sample_crew_member, sample_vessel):\n    \"\"\"Test basic appraisal creation\"\"\"\n\n    result = await create_appraisal(\n        crew_member_id=sample_crew_member.id,\n        vessel_id=sample_vessel.id,\n        period_start=\"2024-01-01\",\n        period_end=\"2024-06-30\",\n        categories=[\n            {\n                \"name\": \"Technical Competence\",\n                \"score\": 4.0,\n                \"comments\": \"Good technical skills\"\n            }\n        ],\n        db=db_session\n    )\n\n    assert \"appraisal_id\" in result\n    assert result[\"crew_member_id\"] == sample_crew_member.id\n    assert result[\"categories_count\"] == 1\n\n@pytest.mark.asyncio\nasync def test_appraisal_validation_errors(db_session):\n    \"\"\"Test appraisal validation error handling\"\"\"\n\n    result = await create_appraisal(\n        crew_member_id=\"invalid-uuid\",\n        vessel_id=None,\n        period_start=\"2024-06-30\",  # Invalid: after end date\n        period_end=\"2024-01-01\",\n        categories=[],  # Invalid: empty categories\n        db=db_session\n    )\n\n    assert \"error\" in result\n    assert result[\"status\"] == \"failed\"\n\n@pytest.mark.asyncio\nasync def test_weighted_categories(db_session, sample_crew_member):\n    \"\"\"Test appraisal with weighted categories\"\"\"\n\n    result = await create_appraisal(\n        crew_member_id=sample_crew_member.id,\n        vessel_id=None,\n        period_start=\"2024-01-01\",\n        period_end=\"2024-06-30\",\n        categories=[\n            {\n                \"name\": \"Technical Competence\",\n                \"score\": 4.0,\n                \"weight\": 2.0  # Higher weight\n            },\n            {\n                \"name\": \"Communication\",\n                \"score\": 3.0,\n                \"weight\": 1.0\n            }\n        ],\n        db=db_session\n    )\n\n    # Overall rating should reflect weighted scores\n    expected_overall = (4.0 * 2.0 + 3.0 * 1.0) / (2.0 + 1.0)  # 3.67\n    assert abs(result[\"overall_rating\"] - expected_overall) &lt; 0.1\n</code></pre>"},{"location":"mcp/tools/create-appraisal/#related-tools","title":"Related Tools","text":"<ul> <li>search_crew: Find crew members for appraisal</li> <li>check_certificates: Verify certifications during evaluation</li> <li>vessel_assignment: Review crew assignments for context</li> </ul>"},{"location":"mcp/tools/create-appraisal/#changelog","title":"Changelog","text":""},{"location":"mcp/tools/create-appraisal/#version-100","title":"Version 1.0.0","text":"<ul> <li>Initial implementation with basic appraisal creation</li> <li>Support for weighted categories and detailed feedback</li> <li>Comprehensive validation and error handling</li> <li>AI-assisted evaluation capabilities</li> </ul>"},{"location":"mcp/tools/create-appraisal/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>Template System: Predefined appraisal templates by role</li> <li>Multi-language Support: Appraisals in multiple languages</li> <li>Performance Analytics: Trend analysis and benchmarking</li> <li>Automated Reminders: Scheduled appraisal reminders</li> <li>Peer Reviews: Integration with 360-degree feedback systems</li> </ul>"},{"location":"mcp/tools/search-crew/","title":"search_crew Tool","text":""},{"location":"mcp/tools/search-crew/#overview","title":"Overview","text":"<p>The <code>search_crew</code> tool enables LLMs to search for crew members using natural language queries combined with structured filters. This tool provides AI-powered matching capabilities that understand maritime terminology and crew management context.</p>"},{"location":"mcp/tools/search-crew/#tool-signature","title":"Tool Signature","text":"<pre><code>async def search_crew(\n    query: str,\n    filters: Optional[Dict[str, Any]] = None,\n    limit: int = 10,\n    db: AsyncSession = None\n) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"mcp/tools/search-crew/#parameters","title":"Parameters","text":""},{"location":"mcp/tools/search-crew/#required-parameters","title":"Required Parameters","text":"Parameter Type Description Example <code>query</code> <code>string</code> Natural language search query <code>\"experienced deck officers with valid STCW\"</code>"},{"location":"mcp/tools/search-crew/#optional-parameters","title":"Optional Parameters","text":"Parameter Type Default Description Example <code>filters</code> <code>object</code> <code>null</code> Additional structured filters <code>{\"department\": \"deck\", \"status\": \"active\"}</code> <code>limit</code> <code>integer</code> <code>10</code> Maximum number of results (1-100) <code>25</code>"},{"location":"mcp/tools/search-crew/#filter-options","title":"Filter Options","text":"<p>The <code>filters</code> object supports the following properties:</p> Filter Type Description Valid Values <code>department</code> <code>string</code> Filter by crew department <code>\"deck\"</code>, <code>\"engine\"</code>, <code>\"catering\"</code>, <code>\"other\"</code> <code>rank</code> <code>string</code> Filter by specific rank/position <code>\"Captain\"</code>, <code>\"Chief Officer\"</code>, <code>\"Engineer\"</code>, etc. <code>status</code> <code>string</code> Filter by employment status <code>\"active\"</code>, <code>\"inactive\"</code>, <code>\"on_leave\"</code> <code>vessel_id</code> <code>string</code> Filter by current vessel assignment Valid vessel UUID <code>nationality</code> <code>string</code> Filter by crew member nationality ISO country codes"},{"location":"mcp/tools/search-crew/#response-schema","title":"Response Schema","text":""},{"location":"mcp/tools/search-crew/#successful-response","title":"Successful Response","text":"<pre><code>{\n  \"query\": \"string\",           // Original search query\n  \"filters\": \"object|null\",    // Applied filters\n  \"matches\": [                 // Array of matching crew members\n    {\n      \"id\": \"string\",          // Crew member UUID\n      \"name\": \"string\",        // Full name\n      \"rank\": \"string|null\",   // Current rank/position\n      \"department\": \"string|null\", // Department\n      \"status\": \"string|null\", // Employment status\n      \"email\": \"string|null\",  // Contact email\n      \"nationality\": \"string|null\", // Nationality\n      \"relevance_score\": \"number\"  // Relevance score (0.0-1.0)\n    }\n  ],\n  \"total_count\": \"integer\",    // Number of matches returned\n  \"limit\": \"integer\",          // Applied limit\n  \"search_time\": \"number\"      // Search execution time (seconds)\n}\n</code></pre>"},{"location":"mcp/tools/search-crew/#error-response","title":"Error Response","text":"<pre><code>{\n  \"error\": \"string\",           // Error description\n  \"matches\": [],               // Empty array\n  \"total_count\": 0,           // Zero count\n  \"query\": \"string|null\",     // Original query if available\n  \"filters\": \"object|null\"    // Applied filters if available\n}\n</code></pre>"},{"location":"mcp/tools/search-crew/#natural-language-understanding","title":"Natural Language Understanding","text":"<p>The search tool understands various maritime terms and contexts:</p>"},{"location":"mcp/tools/search-crew/#rank-recognition","title":"Rank Recognition","text":"<ul> <li>\"officers\" \u2192 Searches for officer-level positions</li> <li>\"deck officers\" \u2192 Filters to deck department officers</li> <li>\"engineers\" \u2192 Searches for engineering positions</li> <li>\"captain\", \"chief\" \u2192 Searches for senior positions</li> </ul>"},{"location":"mcp/tools/search-crew/#department-context","title":"Department Context","text":"<ul> <li>\"deck crew\" \u2192 Filters to deck department</li> <li>\"engine room\" \u2192 Filters to engine department</li> <li>\"galley\", \"catering\" \u2192 Filters to catering department</li> </ul>"},{"location":"mcp/tools/search-crew/#experience-indicators","title":"Experience Indicators","text":"<ul> <li>\"experienced\" \u2192 Prioritizes crew with longer service</li> <li>\"senior\" \u2192 Focuses on higher ranks</li> <li>\"qualified\" \u2192 Emphasizes certification status</li> </ul>"},{"location":"mcp/tools/search-crew/#certification-context","title":"Certification Context","text":"<ul> <li>\"valid certificates\" \u2192 Considers current certification status</li> <li>\"STCW\" \u2192 Focuses on STCW-certified crew</li> <li>\"DPO\" \u2192 Searches for Dynamic Positioning Operators</li> </ul>"},{"location":"mcp/tools/search-crew/#use-cases","title":"Use Cases","text":""},{"location":"mcp/tools/search-crew/#1-finding-available-crew-for-assignment","title":"1. Finding Available Crew for Assignment","text":"<p>Prompt: \"Find available deck officers for assignment to vessel\"</p> <p>Tool Call: <pre><code>{\n  \"tool\": \"search_crew\",\n  \"parameters\": {\n    \"query\": \"available deck officers\",\n    \"filters\": {\n      \"department\": \"deck\",\n      \"status\": \"active\"\n    },\n    \"limit\": 10\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools/search-crew/#2-identifying-crew-by-specialty","title":"2. Identifying Crew by Specialty","text":"<p>Prompt: \"Who are our certified Dynamic Positioning Operators?\"</p> <p>Tool Call: <pre><code>{\n  \"tool\": \"search_crew\",\n  \"parameters\": {\n    \"query\": \"DPO dynamic positioning operators certified\",\n    \"limit\": 20\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools/search-crew/#3-finding-crew-on-specific-vessel","title":"3. Finding Crew on Specific Vessel","text":"<p>Prompt: \"List all crew currently assigned to vessel MV Ocean Explorer\"</p> <p>Tool Call: <pre><code>{\n  \"tool\": \"search_crew\",\n  \"parameters\": {\n    \"query\": \"crew members\",\n    \"filters\": {\n      \"vessel_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools/search-crew/#4-department-specific-search","title":"4. Department-Specific Search","text":"<p>Prompt: \"Find all engine department crew with experience\"</p> <p>Tool Call: <pre><code>{\n  \"tool\": \"search_crew\",\n  \"parameters\": {\n    \"query\": \"experienced engineers engine crew\",\n    \"filters\": {\n      \"department\": \"engine\",\n      \"status\": \"active\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools/search-crew/#llm-integration-examples","title":"LLM Integration Examples","text":""},{"location":"mcp/tools/search-crew/#basic-search-implementation","title":"Basic Search Implementation","text":"<pre><code># Example LLM prompt processing\ndef process_crew_search_request(user_query: str):\n    \"\"\"\n    Process user's natural language request into search_crew tool call\n    \"\"\"\n\n    # Extract intent and parameters from user query\n    query, filters = parse_search_intent(user_query)\n\n    # Execute search\n    result = await search_crew(\n        query=query,\n        filters=filters,\n        limit=10\n    )\n\n    # Format response for user\n    if result.get(\"matches\"):\n        return format_crew_search_results(result)\n    else:\n        return \"No crew members found matching your criteria.\"\n\ndef format_crew_search_results(result: dict) -&gt; str:\n    \"\"\"Format search results for natural language response\"\"\"\n    matches = result[\"matches\"]\n    total = result[\"total_count\"]\n\n    response = f\"Found {total} crew member(s):\\n\\n\"\n\n    for crew in matches:\n        response += f\"\u2022 {crew['name']}\"\n        if crew['rank']:\n            response += f\" - {crew['rank']}\"\n        if crew['department']:\n            response += f\" ({crew['department']} dept.)\"\n        response += \"\\n\"\n\n    return response\n</code></pre>"},{"location":"mcp/tools/search-crew/#advanced-search-with-context","title":"Advanced Search with Context","text":"<pre><code>class CrewSearchAssistant:\n    \"\"\"AI assistant for crew search operations\"\"\"\n\n    async def handle_search_query(self, query: str, context: dict = None):\n        \"\"\"Handle complex search queries with context awareness\"\"\"\n\n        # Parse query for implicit filters\n        parsed = self.parse_search_context(query, context)\n\n        # Execute search with parsed parameters\n        result = await search_crew(\n            query=parsed[\"query\"],\n            filters=parsed[\"filters\"],\n            limit=parsed.get(\"limit\", 10)\n        )\n\n        # Provide contextual response\n        return self.generate_contextual_response(result, query, context)\n\n    def parse_search_context(self, query: str, context: dict) -&gt; dict:\n        \"\"\"Parse search query with contextual information\"\"\"\n\n        filters = {}\n\n        # Apply contextual filters\n        if context.get(\"current_vessel\"):\n            filters[\"vessel_id\"] = context[\"current_vessel\"][\"id\"]\n\n        if context.get(\"target_department\"):\n            filters[\"department\"] = context[\"target_department\"]\n\n        # Extract implicit filters from query\n        if \"available\" in query.lower():\n            filters[\"status\"] = \"active\"\n\n        if \"deck\" in query.lower():\n            filters[\"department\"] = \"deck\"\n        elif \"engine\" in query.lower():\n            filters[\"department\"] = \"engine\"\n\n        return {\n            \"query\": query,\n            \"filters\": filters,\n            \"limit\": self.extract_limit(query)\n        }\n</code></pre>"},{"location":"mcp/tools/search-crew/#performance-considerations","title":"Performance Considerations","text":""},{"location":"mcp/tools/search-crew/#search-optimization","title":"Search Optimization","text":"<ol> <li>Index Usage: The tool leverages database indexes on commonly searched fields</li> <li>Query Complexity: Complex natural language queries may take longer to process</li> <li>Result Limits: Use appropriate limits to balance completeness and performance</li> <li>Filter Efficiency: Structured filters are more efficient than text search</li> </ol>"},{"location":"mcp/tools/search-crew/#recommended-practices","title":"Recommended Practices","text":"<pre><code># Good: Specific filters with reasonable limits\nawait search_crew(\n    query=\"experienced officers\",\n    filters={\"department\": \"deck\", \"status\": \"active\"},\n    limit=20\n)\n\n# Less efficient: Very broad search with high limits\nawait search_crew(\n    query=\"crew\",\n    limit=100\n)\n\n# Good: Combine text search with filters\nawait search_crew(\n    query=\"STCW certified\",\n    filters={\"status\": \"active\"},\n    limit=15\n)\n</code></pre>"},{"location":"mcp/tools/search-crew/#error-handling","title":"Error Handling","text":""},{"location":"mcp/tools/search-crew/#common-errors-and-solutions","title":"Common Errors and Solutions","text":"<ol> <li> <p>Invalid Filter Values <pre><code>{\n  \"error\": \"Invalid department value: 'kitchen'. Valid values: deck, engine, catering, other\"\n}\n</code></pre></p> </li> <li> <p>Limit Out of Range <pre><code>{\n  \"error\": \"Limit must be between 1 and 100, got: 150\"\n}\n</code></pre></p> </li> <li> <p>Database Connection Issues <pre><code>{\n  \"error\": \"Database connection failed. Please try again.\"\n}\n</code></pre></p> </li> </ol>"},{"location":"mcp/tools/search-crew/#error-handling-in-llm-integration","title":"Error Handling in LLM Integration","text":"<pre><code>async def safe_crew_search(query: str, **kwargs):\n    \"\"\"Wrapper for safe crew search with error handling\"\"\"\n\n    try:\n        result = await search_crew(query=query, **kwargs)\n\n        if \"error\" in result:\n            # Handle tool-specific errors\n            return {\n                \"success\": False,\n                \"message\": f\"Search failed: {result['error']}\",\n                \"suggestions\": get_search_suggestions(query)\n            }\n\n        return {\n            \"success\": True,\n            \"data\": result\n        }\n\n    except Exception as e:\n        # Handle unexpected errors\n        logger.error(f\"Crew search error: {str(e)}\")\n        return {\n            \"success\": False,\n            \"message\": \"An unexpected error occurred during search.\",\n            \"suggestions\": [\"Try simplifying your search query\", \"Check your filters\"]\n        }\n</code></pre>"},{"location":"mcp/tools/search-crew/#testing","title":"Testing","text":""},{"location":"mcp/tools/search-crew/#unit-tests","title":"Unit Tests","text":"<pre><code>import pytest\nfrom src.mcp.tools import search_crew\n\n@pytest.mark.asyncio\nasync def test_basic_crew_search(db_session):\n    \"\"\"Test basic crew search functionality\"\"\"\n\n    result = await search_crew(\n        query=\"deck officers\",\n        filters={\"status\": \"active\"},\n        limit=5,\n        db=db_session\n    )\n\n    assert \"matches\" in result\n    assert \"total_count\" in result\n    assert isinstance(result[\"matches\"], list)\n    assert len(result[\"matches\"]) &lt;= 5\n\n@pytest.mark.asyncio\nasync def test_search_with_filters(db_session):\n    \"\"\"Test crew search with multiple filters\"\"\"\n\n    result = await search_crew(\n        query=\"officers\",\n        filters={\n            \"department\": \"deck\",\n            \"status\": \"active\"\n        },\n        db=db_session\n    )\n\n    # Verify all results match filters\n    for crew in result[\"matches\"]:\n        assert crew[\"department\"] == \"deck\"\n        assert crew[\"status\"] == \"active\"\n\n@pytest.mark.asyncio\nasync def test_invalid_filter_handling(db_session):\n    \"\"\"Test handling of invalid filter values\"\"\"\n\n    result = await search_crew(\n        query=\"crew\",\n        filters={\"department\": \"invalid_dept\"},\n        db=db_session\n    )\n\n    assert \"error\" in result\n    assert \"matches\" in result\n    assert len(result[\"matches\"]) == 0\n</code></pre>"},{"location":"mcp/tools/search-crew/#integration-tests","title":"Integration Tests","text":"<pre><code>@pytest.mark.asyncio\nasync def test_mcp_search_crew_integration(mcp_client):\n    \"\"\"Test search_crew tool through MCP interface\"\"\"\n\n    response = await mcp_client.call_tool(\n        \"search_crew\",\n        {\n            \"query\": \"experienced deck officers\",\n            \"limit\": 10\n        }\n    )\n\n    assert response[\"success\"] is True\n    assert \"result\" in response\n    assert \"matches\" in response[\"result\"]\n</code></pre>"},{"location":"mcp/tools/search-crew/#related-tools","title":"Related Tools","text":"<ul> <li>check_certificates: Verify certification status of search results</li> <li>vessel_assignment: Assign found crew to vessels</li> <li>compliance_report: Generate reports for crew groups</li> </ul>"},{"location":"mcp/tools/search-crew/#changelog","title":"Changelog","text":""},{"location":"mcp/tools/search-crew/#version-100","title":"Version 1.0.0","text":"<ul> <li>Initial implementation with natural language search</li> <li>Basic filtering capabilities</li> <li>Relevance scoring system</li> <li>Error handling and validation</li> </ul>"},{"location":"mcp/tools/search-crew/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>Fuzzy Matching: Improved name and rank matching</li> <li>Semantic Search: AI-powered semantic understanding</li> <li>Historical Data: Search including past assignments</li> <li>Bulk Operations: Multi-crew selection and operations</li> </ul>"},{"location":"mcp/tools/vessel-assignment/","title":"vessel_assignment Tool","text":""},{"location":"mcp/tools/vessel-assignment/#overview","title":"Overview","text":"<p>The <code>vessel_assignment</code> tool enables LLMs to create and manage crew vessel assignments with intelligent validation and optimization. This tool is crucial for crew deployment, scheduling, and ensuring proper vessel manning compliance.</p>"},{"location":"mcp/tools/vessel-assignment/#tool-signature","title":"Tool Signature","text":"<pre><code>async def vessel_assignment(\n    crew_member_id: str,\n    vessel_id: str,\n    role: str,\n    start_date: str,\n    end_date: Optional[str] = None,\n    db: AsyncSession = None\n) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"mcp/tools/vessel-assignment/#parameters","title":"Parameters","text":"Parameter Type Required Default Description <code>crew_member_id</code> <code>string</code> Yes - UUID of the crew member to assign <code>vessel_id</code> <code>string</code> Yes - UUID of the target vessel <code>role</code> <code>string</code> Yes - Position/role on the vessel <code>start_date</code> <code>string</code> Yes - Assignment start date (YYYY-MM-DD format) <code>end_date</code> <code>string</code> No <code>null</code> Assignment end date (YYYY-MM-DD format)"},{"location":"mcp/tools/vessel-assignment/#parameter-details","title":"Parameter Details","text":""},{"location":"mcp/tools/vessel-assignment/#crew_member_id","title":"crew_member_id","text":"<ul> <li>Format: UUID string (e.g., \"123e4567-e89b-12d3-a456-426614174000\")</li> <li>Validation: Must be a valid UUID of an active crew member</li> <li>Error Handling: Returns error if crew member not found or archived</li> </ul>"},{"location":"mcp/tools/vessel-assignment/#vessel_id","title":"vessel_id","text":"<ul> <li>Format: UUID string (e.g., \"456e7890-e89b-12d3-a456-426614174001\")</li> <li>Validation: Must be a valid UUID of an active vessel</li> <li>Error Handling: Returns error if vessel not found or inactive</li> </ul>"},{"location":"mcp/tools/vessel-assignment/#role","title":"role","text":"<ul> <li>Format: String representing the position on vessel</li> <li>Common Values:</li> <li>Officers: <code>\"Master\"</code>, <code>\"Chief Officer\"</code>, <code>\"Second Officer\"</code>, <code>\"Third Officer\"</code></li> <li>Engineers: <code>\"Chief Engineer\"</code>, <code>\"Second Engineer\"</code>, <code>\"Third Engineer\"</code></li> <li>Ratings: <code>\"Bosun\"</code>, <code>\"Able Seaman\"</code>, <code>\"Ordinary Seaman\"</code></li> <li>Catering: <code>\"Chief Cook\"</code>, <code>\"Steward\"</code>, <code>\"Galley Hand\"</code></li> <li>Validation: Role must be compatible with crew member's rank and qualifications</li> </ul>"},{"location":"mcp/tools/vessel-assignment/#start_date","title":"start_date","text":"<ul> <li>Format: ISO date string (YYYY-MM-DD)</li> <li>Validation: Must be a valid future or current date</li> <li>Business Rules: Cannot overlap with existing active assignments</li> </ul>"},{"location":"mcp/tools/vessel-assignment/#end_date","title":"end_date","text":"<ul> <li>Format: ISO date string (YYYY-MM-DD) or null</li> <li>Default: Open-ended assignment if not provided</li> <li>Validation: Must be after start_date if provided</li> <li>Business Rules: Used for contract or rotation planning</li> </ul>"},{"location":"mcp/tools/vessel-assignment/#response-format","title":"Response Format","text":""},{"location":"mcp/tools/vessel-assignment/#successful-assignment","title":"Successful Assignment","text":"<pre><code>{\n  \"assignment_id\": \"789e0123-e89b-12d3-a456-426614174002\",\n  \"crew_member\": {\n    \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n    \"name\": \"John Smith\"\n  },\n  \"vessel\": {\n    \"id\": \"456e7890-e89b-12d3-a456-426614174001\",\n    \"name\": \"MV Ocean Pioneer\",\n    \"imo\": \"9123456\"\n  },\n  \"role\": \"Chief Officer\",\n  \"period\": {\n    \"start\": \"2024-11-01\",\n    \"end\": \"2025-05-01\"\n  },\n  \"status\": \"active\",\n  \"created_at\": \"2024-10-15T14:30:00Z\"\n}\n</code></pre>"},{"location":"mcp/tools/vessel-assignment/#error-response","title":"Error Response","text":"<pre><code>{\n  \"error\": \"Crew member already assigned to another vessel during this period\",\n  \"assignment_id\": null,\n  \"status\": \"failed\",\n  \"conflict_details\": {\n    \"existing_assignment_id\": \"existing-assignment-123\",\n    \"existing_vessel\": \"MV Atlantic Star\",\n    \"conflict_period\": {\n      \"start\": \"2024-10-15\",\n      \"end\": \"2024-12-15\"\n    }\n  }\n}\n</code></pre>"},{"location":"mcp/tools/vessel-assignment/#use-cases","title":"Use Cases","text":""},{"location":"mcp/tools/vessel-assignment/#1-new-vessel-assignment","title":"1. New Vessel Assignment","text":"<p>Scenario: Assign a chief officer to a vessel for a 6-month rotation.</p> <p>LLM Prompt: \"Assign John Smith as Chief Officer to MV Ocean Pioneer starting November 1<sup>st</sup>, 2024 for a 6-month contract ending April 30<sup>th</sup>, 2025.\"</p> <p>Tool Call: <pre><code>{\n  \"tool\": \"vessel_assignment\",\n  \"parameters\": {\n    \"crew_member_id\": \"123e4567-e89b-12d3-a456-426614174000\",\n    \"vessel_id\": \"456e7890-e89b-12d3-a456-426614174001\",\n    \"role\": \"Chief Officer\",\n    \"start_date\": \"2024-11-01\",\n    \"end_date\": \"2025-04-30\"\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools/vessel-assignment/#2-emergency-assignment","title":"2. Emergency Assignment","text":"<p>Scenario: Quickly assign available crew to cover an emergency vacancy.</p> <p>LLM Prompt: \"We need to assign an available Second Engineer to MV Atlantic Star immediately. The current engineer had a medical emergency.\"</p> <p>Tool Call: <pre><code>{\n  \"tool\": \"vessel_assignment\",\n  \"parameters\": {\n    \"crew_member_id\": \"789e0123-e89b-12d3-a456-426614174002\",\n    \"vessel_id\": \"012e3456-e89b-12d3-a456-426614174003\",\n    \"role\": \"Second Engineer\",\n    \"start_date\": \"2024-10-16\"\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools/vessel-assignment/#3-rotation-planning","title":"3. Rotation Planning","text":"<p>Scenario: Plan crew rotations for multiple vessels.</p> <p>LLM Prompt: \"Plan the next rotation for Captain Anderson. He should join MV Pacific Explorer after his current assignment ends on December 15<sup>th</sup>.\"</p> <p>Tool Call: <pre><code>{\n  \"tool\": \"vessel_assignment\",\n  \"parameters\": {\n    \"crew_member_id\": \"345e6789-e89b-12d3-a456-426614174004\",\n    \"vessel_id\": \"678e9012-e89b-12d3-a456-426614174005\",\n    \"role\": \"Master\",\n    \"start_date\": \"2024-12-16\",\n    \"end_date\": \"2025-06-15\"\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools/vessel-assignment/#4-open-ended-assignment","title":"4. Open-Ended Assignment","text":"<p>Scenario: Assign crew without a defined end date for permanent positions.</p> <p>LLM Prompt: \"Assign Maria Santos as Chief Cook to MV Coastal Star starting next month. This is a permanent position.\"</p> <p>Tool Call: <pre><code>{\n  \"tool\": \"vessel_assignment\",\n  \"parameters\": {\n    \"crew_member_id\": \"456e7890-e89b-12d3-a456-426614174006\",\n    \"vessel_id\": \"789e0123-e89b-12d3-a456-426614174007\",\n    \"role\": \"Chief Cook\",\n    \"start_date\": \"2024-11-01\"\n  }\n}\n</code></pre></p>"},{"location":"mcp/tools/vessel-assignment/#example-llm-prompts","title":"Example LLM Prompts","text":""},{"location":"mcp/tools/vessel-assignment/#assignment-creation","title":"Assignment Creation","text":"<ol> <li>\"Assign the next available deck officer to MV Sea Horizon for their upcoming voyage.\"</li> <li>\"I need to assign a replacement engineer to MV Atlantic Pioneer starting this Friday.\"</li> <li>\"Create a 4-month assignment for Chief Officer Johnson on MV Pacific Dream.\"</li> <li>\"Assign three able seamen to MV Ocean Star for the upcoming dry dock period.\"</li> </ol>"},{"location":"mcp/tools/vessel-assignment/#rotation-management","title":"Rotation Management","text":"<ol> <li>\"Plan the crew rotation for MV Northern Light - the current crew needs to be relieved in two weeks.\"</li> <li>\"Set up the next assignment for Captain Rodriguez after his shore leave ends.\"</li> <li>\"Arrange crew assignments for our new vessel that enters service next month.\"</li> <li>\"Schedule assignments for the catering crew on MV Southern Cross.\"</li> </ol>"},{"location":"mcp/tools/vessel-assignment/#emergency-scenarios","title":"Emergency Scenarios","text":"<ol> <li>\"We have a medical emergency on MV Baltic Sea - need immediate crew replacement.\"</li> <li>\"A crew member missed their flight - assign backup crew to prevent sailing delays.\"</li> <li>\"Port authority requires additional certified crew - make emergency assignments.\"</li> <li>\"Weather delayed crew change - extend current assignments and plan new ones.\"</li> </ol>"},{"location":"mcp/tools/vessel-assignment/#validation-business-rules","title":"Validation &amp; Business Rules","text":""},{"location":"mcp/tools/vessel-assignment/#assignment-validation","title":"Assignment Validation","text":"<ol> <li>Overlap Prevention: No crew member can be assigned to multiple vessels simultaneously</li> <li>Qualification Matching: Crew member must have appropriate rank and certificates for the role</li> <li>Date Validation: Start date cannot be in the past (except same-day assignments)</li> <li>End Date Logic: End date must be after start date when provided</li> </ol>"},{"location":"mcp/tools/vessel-assignment/#role-compatibility","title":"Role Compatibility","text":"<pre><code>ROLE_RANK_MAPPING = {\n    \"Master\": [\"Master\", \"Chief Officer\"],\n    \"Chief Officer\": [\"Chief Officer\", \"Second Officer\"],\n    \"Second Officer\": [\"Second Officer\", \"Third Officer\"],\n    \"Chief Engineer\": [\"Chief Engineer\", \"Second Engineer\"],\n    \"Bosun\": [\"Bosun\", \"Able Seaman\"],\n    # Additional mappings...\n}\n</code></pre>"},{"location":"mcp/tools/vessel-assignment/#certificate-requirements","title":"Certificate Requirements","text":"<ul> <li>Officers: Must have valid STCW officer certificates</li> <li>Engineers: Must have appropriate engineering certificates</li> <li>Radio Operators: Must have valid radio operator licenses</li> <li>Medical Personnel: Must have current medical certificates</li> </ul>"},{"location":"mcp/tools/vessel-assignment/#integration-patterns","title":"Integration Patterns","text":""},{"location":"mcp/tools/vessel-assignment/#with-openai-function-calling","title":"With OpenAI Function Calling","text":"<pre><code>tools = [{\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"vessel_assignment\",\n        \"description\": \"Create or manage crew vessel assignments with validation\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"crew_member_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"UUID of the crew member to assign\"\n                },\n                \"vessel_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"UUID of the target vessel\"\n                },\n                \"role\": {\n                    \"type\": \"string\",\n                    \"description\": \"Position/role on the vessel\",\n                    \"enum\": [\"Master\", \"Chief Officer\", \"Second Officer\", \"Third Officer\",\n                           \"Chief Engineer\", \"Second Engineer\", \"Third Engineer\",\n                           \"Bosun\", \"Able Seaman\", \"Ordinary Seaman\", \"Chief Cook\", \"Steward\"]\n                },\n                \"start_date\": {\n                    \"type\": \"string\",\n                    \"format\": \"date\",\n                    \"description\": \"Assignment start date (YYYY-MM-DD)\"\n                },\n                \"end_date\": {\n                    \"type\": \"string\",\n                    \"format\": \"date\",\n                    \"description\": \"Assignment end date (YYYY-MM-DD), optional\"\n                }\n            },\n            \"required\": [\"crew_member_id\", \"vessel_id\", \"role\", \"start_date\"]\n        }\n    }\n}]\n</code></pre>"},{"location":"mcp/tools/vessel-assignment/#with-claude-tool-use","title":"With Claude Tool Use","text":"<pre><code>tools = [{\n    \"name\": \"vessel_assignment\",\n    \"description\": \"Create and manage crew vessel assignments with intelligent validation and optimization\",\n    \"input_schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"crew_member_id\": {\n                \"type\": \"string\",\n                \"description\": \"UUID of the crew member to assign to the vessel\"\n            },\n            \"vessel_id\": {\n                \"type\": \"string\",\n                \"description\": \"UUID of the vessel for the assignment\"\n            },\n            \"role\": {\n                \"type\": \"string\",\n                \"description\": \"Role/position on the vessel (e.g., Master, Chief Officer, Chief Engineer)\"\n            },\n            \"start_date\": {\n                \"type\": \"string\",\n                \"description\": \"Assignment start date in YYYY-MM-DD format\"\n            },\n            \"end_date\": {\n                \"type\": \"string\",\n                \"description\": \"Assignment end date in YYYY-MM-DD format (optional for open-ended assignments)\"\n            }\n        },\n        \"required\": [\"crew_member_id\", \"vessel_id\", \"role\", \"start_date\"]\n    }\n}]\n</code></pre>"},{"location":"mcp/tools/vessel-assignment/#advanced-features","title":"Advanced Features","text":""},{"location":"mcp/tools/vessel-assignment/#conflict-resolution","title":"Conflict Resolution","text":"<p>The tool automatically detects and reports assignment conflicts:</p> <pre><code>{\n  \"error\": \"Assignment conflict detected\",\n  \"conflict_type\": \"overlapping_assignment\",\n  \"suggestions\": [\n    {\n      \"action\": \"modify_dates\",\n      \"current_assignment_end\": \"2024-11-15\",\n      \"suggested_start\": \"2024-11-16\"\n    },\n    {\n      \"action\": \"reassign_vessel\",\n      \"alternative_vessels\": [\"vessel-001\", \"vessel-002\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"mcp/tools/vessel-assignment/#assignment-optimization","title":"Assignment Optimization","text":"<p>The tool provides optimization suggestions for better crew utilization:</p> <pre><code>{\n  \"assignment_id\": \"new-assignment-123\",\n  \"optimization_score\": 85,\n  \"recommendations\": [\n    {\n      \"type\": \"efficiency\",\n      \"message\": \"This assignment reduces crew travel time by 40%\"\n    },\n    {\n      \"type\": \"qualification_match\",\n      \"message\": \"Crew member has specialized certification beneficial for this vessel\"\n    }\n  ]\n}\n</code></pre>"},{"location":"mcp/tools/vessel-assignment/#automatic-notifications","title":"Automatic Notifications","text":"<p>Upon successful assignment, the tool can trigger notifications:</p> <ul> <li>Crew Member: Assignment confirmation with vessel details</li> <li>Vessel Management: New crew member arrival notification</li> <li>Crewing Department: Assignment completion confirmation</li> <li>Planning System: Update crew availability and vessel manning</li> </ul>"},{"location":"mcp/tools/vessel-assignment/#performance-considerations","title":"Performance Considerations","text":""},{"location":"mcp/tools/vessel-assignment/#query-optimization","title":"Query Optimization","text":"<ol> <li>Database Indexes: Optimized indexes on crew_member_id, vessel_id, and date ranges</li> <li>Conflict Detection: Efficient overlap detection using database date range queries</li> <li>Validation Caching: Certificate and qualification data cached for performance</li> <li>Batch Processing: Support for multiple assignments in single transaction</li> </ol>"},{"location":"mcp/tools/vessel-assignment/#scalability-metrics","title":"Scalability Metrics","text":"<ul> <li>Individual Assignment: &lt; 100ms average response time</li> <li>Conflict Checking: &lt; 200ms for complex overlap scenarios</li> <li>Validation Processing: &lt; 50ms for qualification matching</li> <li>Database Impact: Minimal with proper indexing</li> </ul>"},{"location":"mcp/tools/vessel-assignment/#error-handling","title":"Error Handling","text":""},{"location":"mcp/tools/vessel-assignment/#common-error-scenarios","title":"Common Error Scenarios","text":"<ol> <li>Crew Not Available: Already assigned elsewhere during the period</li> <li>Invalid Qualifications: Crew member not qualified for the role</li> <li>Vessel Inactive: Target vessel not available for assignments</li> <li>Date Conflicts: Assignment dates conflict with existing assignments</li> <li>Certificate Expiry: Required certificates expire during assignment period</li> </ol>"},{"location":"mcp/tools/vessel-assignment/#error-response-examples","title":"Error Response Examples","text":"<pre><code>{\n  \"error\": \"Crew member lacks required qualifications\",\n  \"status\": \"failed\",\n  \"details\": {\n    \"missing_certificates\": [\"STCW Officer Certificate\", \"Advanced Fire Fighting\"],\n    \"crew_rank\": \"Able Seaman\",\n    \"required_rank\": \"Officer\",\n    \"suggestions\": [\n      \"Assign to rating position instead\",\n      \"Complete required training before assignment\"\n    ]\n  }\n}\n</code></pre>"},{"location":"mcp/tools/vessel-assignment/#security-compliance","title":"Security &amp; Compliance","text":""},{"location":"mcp/tools/vessel-assignment/#access-control","title":"Access Control","text":"<ul> <li>Assignment Authority: Users can only create assignments within their authority level</li> <li>Vessel Access: Restricted based on fleet management permissions</li> <li>Data Sensitivity: Assignment details logged for audit trails</li> <li>Approval Workflows: High-level assignments may require additional approvals</li> </ul>"},{"location":"mcp/tools/vessel-assignment/#regulatory-compliance","title":"Regulatory Compliance","text":"<ul> <li>STCW Compliance: Ensures all assignments meet international certification requirements</li> <li>Flag State Requirements: Validates assignments against flag state regulations</li> <li>Manning Certificates: Verifies vessel manning certificate compliance</li> <li>Labor Laws: Considers work/rest hour regulations and contract terms</li> </ul>"},{"location":"mcp/tools/vessel-assignment/#related-tools","title":"Related Tools","text":"<ul> <li><code>search_crew</code>: Find available crew members for assignments</li> <li><code>check_certificates</code>: Validate crew qualifications before assignment</li> <li><code>compliance_report</code>: Generate assignment compliance reports</li> <li><code>create_appraisal</code>: Create appraisals often reference vessel assignments</li> </ul>"},{"location":"mcp/tools/vessel-assignment/#best-practices","title":"Best Practices","text":""},{"location":"mcp/tools/vessel-assignment/#for-llm-integration","title":"For LLM Integration","text":"<ol> <li>Context Preservation: Maintain assignment context throughout conversations</li> <li>Conflict Resolution: Provide clear options when conflicts arise</li> <li>Proactive Suggestions: Recommend optimal crew-vessel pairings</li> <li>Status Updates: Keep users informed of assignment status changes</li> </ol>"},{"location":"mcp/tools/vessel-assignment/#for-system-integration","title":"For System Integration","text":"<ol> <li>Real-time Updates: Sync assignment data with scheduling systems</li> <li>Notification Integration: Connect with communication systems for alerts</li> <li>Calendar Integration: Update crew and vessel calendars automatically</li> <li>Document Generation: Auto-generate assignment letters and contracts</li> </ol>"},{"location":"mcp/tools/vessel-assignment/#testing","title":"Testing","text":""},{"location":"mcp/tools/vessel-assignment/#unit-tests","title":"Unit Tests","text":"<pre><code>async def test_create_assignment():\n    result = await vessel_assignment(\n        crew_member_id=\"test-crew-123\",\n        vessel_id=\"test-vessel-456\",\n        role=\"Chief Officer\",\n        start_date=\"2024-11-01\",\n        end_date=\"2025-05-01\",\n        db=test_db\n    )\n    assert result[\"assignment_id\"] is not None\n    assert result[\"status\"] == \"active\"\n\nasync def test_assignment_conflict():\n    # Create overlapping assignment\n    result = await vessel_assignment(\n        crew_member_id=\"test-crew-123\",\n        vessel_id=\"test-vessel-789\",\n        role=\"Second Officer\",\n        start_date=\"2024-10-15\",\n        end_date=\"2024-12-15\",\n        db=test_db\n    )\n    assert \"conflict\" in result[\"error\"].lower()\n</code></pre>"},{"location":"mcp/tools/vessel-assignment/#integration-tests","title":"Integration Tests","text":"<pre><code>async def test_llm_assignment_flow():\n    # Test complete assignment workflow with LLM\n    response = await llm_client.chat.completions.create(\n        model=\"gpt-4\",\n        messages=[{\n            \"role\": \"user\",\n            \"content\": \"Assign John Smith as Chief Officer to MV Ocean Pioneer\"\n        }],\n        tools=[vessel_assignment_tool]\n    )\n\n    tool_call = response.choices[0].message.tool_calls[0]\n    assert tool_call.function.name == \"vessel_assignment\"\n\n    # Execute the tool call\n    result = await execute_tool_call(tool_call)\n    assert result[\"assignment_id\"] is not None\n</code></pre>"},{"location":"mcp/tools/vessel-assignment/#monitoring-analytics","title":"Monitoring &amp; Analytics","text":""},{"location":"mcp/tools/vessel-assignment/#key-metrics","title":"Key Metrics","text":"<ul> <li>Assignment Success Rate: Percentage of successful assignments</li> <li>Conflict Resolution Time: Average time to resolve assignment conflicts</li> <li>Optimization Score: Effectiveness of assignment recommendations</li> <li>User Satisfaction: Feedback on assignment quality and process</li> </ul>"},{"location":"mcp/tools/vessel-assignment/#analytics-dashboard","title":"Analytics Dashboard","text":"<p>Track assignment patterns, optimization effectiveness, and system performance through integrated monitoring dashboards that provide insights into crew deployment efficiency and vessel manning optimization.</p>"},{"location":"models/","title":"Data Models Overview","text":"<p>This section provides comprehensive documentation for the Crewing Management System's data models, covering the domain architecture, core entities, relationships, and database schema.</p>"},{"location":"models/#domain-model-architecture","title":"Domain Model Architecture","text":"<p>The Crewing Management System follows a domain-driven design approach with clear separation of concerns across several key domains:</p>"},{"location":"models/#core-domains","title":"Core Domains","text":"<ul> <li>Identity &amp; Access Management: User authentication, authorization, and role-based access control</li> <li>Crew Management: Personnel records, employment status, and career tracking</li> <li>Performance Management: Appraisals, evaluations, and performance tracking</li> <li>Fleet Management: Vessel information, specifications, and operational status</li> <li>Compliance Management: Certificates, documents, and regulatory compliance</li> <li>Assignment Management: Crew-vessel assignments and deployment tracking</li> </ul>"},{"location":"models/#core-entities","title":"Core Entities","text":"<p>The system is built around five primary entities that form the foundation of the data model:</p>"},{"location":"models/#user","title":"User","text":"<p>Central authentication and authorization entity managing system access and permissions.</p> <ul> <li>Purpose: Authentication, authorization, and user management</li> <li>Key Features: Role-based access control, session management, audit logging</li> <li>Relationships: One-to-one with CrewMember (optional), one-to-many with Sessions and AuditLogs</li> </ul>"},{"location":"models/#crewmember","title":"CrewMember","text":"<p>Comprehensive personnel records for maritime crew members.</p> <ul> <li>Purpose: Personnel management and crew record keeping</li> <li>Key Features: Personal information, employment history, status tracking, emergency contacts</li> <li>Relationships: Linked to User, has many Certificates, VesselAssignments, and Appraisals</li> </ul>"},{"location":"models/#appraisal","title":"Appraisal","text":"<p>Performance evaluation system for crew members.</p> <ul> <li>Purpose: Performance tracking, career development, and evaluation management</li> <li>Key Features: Multi-category scoring, workflow management, recommendations, compliance tracking</li> <li>Relationships: Belongs to CrewMember and Vessel, evaluated by Users</li> </ul>"},{"location":"models/#vessel","title":"Vessel","text":"<p>Fleet management and vessel information system.</p> <ul> <li>Purpose: Ship information, specifications, and operational management</li> <li>Key Features: Technical specifications, crew requirements, operational status, compliance tracking</li> <li>Relationships: Has many VesselAssignments and Appraisals</li> </ul>"},{"location":"models/#certificate","title":"Certificate","text":"<p>Compliance and document management for crew certifications.</p> <ul> <li>Purpose: Regulatory compliance, document tracking, and certification management</li> <li>Key Features: Expiry tracking, verification status, renewal alerts, document storage</li> <li>Relationships: Belongs to CrewMember</li> </ul>"},{"location":"models/#entity-relationships","title":"Entity Relationships","text":"<pre><code>erDiagram\n    User {\n        string id PK\n        string username UK\n        string email UK\n        string password_hash\n        string first_name\n        string last_name\n        string phone\n        UserRole role\n        boolean is_active\n        boolean is_superuser\n        json preferences\n    }\n\n    CrewMember {\n        string id PK\n        string employee_id UK\n        string first_name\n        string last_name\n        string email UK\n        string rank\n        Department department\n        CrewStatus status\n        date date_of_birth\n        date date_joined\n        string user_id FK\n    }\n\n    Appraisal {\n        string id PK\n        string appraisal_number UK\n        AppraisalType type\n        AppraisalStatus status\n        date period_start\n        date period_end\n        float overall_rating\n        text evaluator_comments\n        boolean recommended_for_promotion\n        string crew_member_id FK\n        string vessel_id FK\n        string evaluator_id FK\n    }\n\n    Vessel {\n        string id PK\n        string name\n        string imo_number UK\n        VesselType type\n        VesselStatus status\n        string flag_state\n        int minimum_crew\n        int maximum_crew\n        int current_crew_count\n    }\n\n    Certificate {\n        string id PK\n        string type\n        string number UK\n        string name\n        date issue_date\n        date expiry_date\n        boolean is_required\n        boolean is_verified\n        string crew_member_id FK\n    }\n\n    VesselAssignment {\n        string id PK\n        date start_date\n        date end_date\n        string position\n        string crew_member_id FK\n        string vessel_id FK\n    }\n\n    User ||--o| CrewMember : \"may have profile\"\n    CrewMember ||--o{ Certificate : \"has certifications\"\n    CrewMember ||--o{ VesselAssignment : \"has assignments\"\n    CrewMember ||--o{ Appraisal : \"receives appraisals\"\n    Vessel ||--o{ VesselAssignment : \"has crew assignments\"\n    Vessel ||--o{ Appraisal : \"location of appraisals\"\n    User ||--o{ Appraisal : \"evaluates crew\"</code></pre>"},{"location":"models/#database-schema-overview","title":"Database Schema Overview","text":""},{"location":"models/#table-structure","title":"Table Structure","text":"<p>The database schema consists of the following primary tables:</p> Table Purpose Key Features <code>users</code> Authentication and user management Role-based access, session tracking <code>crew_members</code> Personnel records Comprehensive crew information <code>appraisals</code> Performance evaluations Workflow-enabled scoring system <code>vessels</code> Fleet management Technical specs and operational data <code>certificates</code> Compliance tracking Expiry management and verification <code>vessel_assignments</code> Crew deployment Assignment history and current status <code>appraisal_categories</code> Evaluation criteria Configurable scoring categories <code>sessions</code> Authentication sessions Secure session management <code>audit_logs</code> System activity tracking Comprehensive audit trail"},{"location":"models/#key-design-principles","title":"Key Design Principles","text":"<ol> <li>Data Integrity: Foreign key constraints and cascading deletes ensure referential integrity</li> <li>Audit Trail: All critical operations are logged for compliance and debugging</li> <li>Soft Deletes: Important records use soft deletion to preserve historical data</li> <li>Flexible Metadata: JSON columns allow for extensible data without schema changes</li> <li>Performance Optimization: Strategic indexing on frequently queried fields</li> <li>Compliance Ready: Built-in support for maritime regulatory requirements</li> </ol>"},{"location":"models/#indexing-strategy","title":"Indexing Strategy","text":"<ul> <li>Primary Keys: UUID-based primary keys for distributed system compatibility</li> <li>Unique Constraints: Business-critical unique fields (email, employee_id, imo_number)</li> <li>Foreign Key Indexes: Automatic indexing on all foreign key relationships</li> <li>Query Optimization: Composite indexes on frequently used query patterns</li> <li>Text Search: Full-text search capabilities on relevant text fields</li> </ul>"},{"location":"models/#data-types-and-standards","title":"Data Types and Standards","text":"<ul> <li>Identifiers: UUID strings for primary keys and foreign keys</li> <li>Dates: ISO 8601 date format for all date fields</li> <li>Enums: String-based enums for better readability and maintenance</li> <li>JSON: Structured metadata storage for extensibility</li> <li>Text: Unlimited text storage for comments and notes</li> </ul>"},{"location":"models/#security-considerations","title":"Security Considerations","text":""},{"location":"models/#access-control","title":"Access Control","text":"<ul> <li>Role-based permissions with granular access controls</li> <li>Row-level security for data isolation</li> <li>Encrypted password storage using bcrypt hashing</li> </ul>"},{"location":"models/#data-protection","title":"Data Protection","text":"<ul> <li>Personal data handling compliant with privacy regulations</li> <li>Secure document storage with hash verification</li> <li>Audit logging for all data modifications</li> </ul>"},{"location":"models/#api-security","title":"API Security","text":"<ul> <li>JWT-based authentication for stateless sessions</li> <li>Rate limiting and input validation</li> <li>HTTPS enforcement for all communications</li> </ul>"},{"location":"models/#next-steps","title":"Next Steps","text":"<ul> <li>Review Entity Details for comprehensive field documentation</li> <li>Check API Reference for endpoint documentation</li> <li>See Error Codes for error handling information</li> <li>Browse FAQ for common questions and solutions</li> </ul>"},{"location":"models/entities/","title":"Core Entity Documentation","text":"<p>This document provides detailed documentation for each core entity in the Crewing Management System, including their attributes, relationships, validation rules, and business logic.</p>"},{"location":"models/entities/#user-model","title":"User Model","text":"<p>The User model handles authentication, authorization, and user management within the system.</p>"},{"location":"models/entities/#purpose","title":"Purpose","text":"<ul> <li>System authentication and session management</li> <li>Role-based access control and permissions</li> <li>User profile and preference management</li> <li>Audit trail for user activities</li> </ul>"},{"location":"models/entities/#attributes","title":"Attributes","text":"Field Type Required Constraints Description <code>id</code> UUID Yes Primary Key Unique identifier <code>username</code> String(50) Yes Unique, Index Login username <code>email</code> String(255) Yes Unique, Index Email address <code>password_hash</code> String(255) Yes - Bcrypt hashed password <code>first_name</code> String(100) Yes - User's first name <code>last_name</code> String(100) Yes - User's last name <code>phone</code> String(20) No - Contact phone number <code>role</code> UserRole Yes Enum User's system role <code>is_active</code> Boolean Yes Default: True Account active status <code>is_superuser</code> Boolean Yes Default: False Superuser privileges <code>preferences</code> JSON No Default: {} User preferences <code>created_at</code> DateTime Yes Auto Record creation timestamp <code>updated_at</code> DateTime Yes Auto Last update timestamp"},{"location":"models/entities/#user-roles","title":"User Roles","text":"Role Permissions Description <code>SUPER_ADMIN</code> All permissions System administrator <code>ADMIN</code> Crew, appraisal, vessel, form, report management Fleet administrator <code>CREW_MANAGER</code> Crew and appraisal management HR and crew operations <code>RECRUITMENT_OFFICER</code> Crew recruitment and certificates Hiring and compliance <code>VESSEL_CAPTAIN</code> Crew appraisals on assigned vessel Ship captain <code>DEPARTMENT_HEAD</code> Department crew appraisals Department manager <code>CREW_MEMBER</code> Personal profile and appraisal view Individual crew member <code>VIEWER</code> Read-only access to reports Observer role"},{"location":"models/entities/#relationships","title":"Relationships","text":"<ul> <li>One-to-One: <code>crew_member</code> (optional)</li> <li>One-to-Many: <code>sessions</code>, <code>audit_logs</code></li> <li>Evaluator: <code>appraisals</code> (as evaluator or reviewer)</li> </ul>"},{"location":"models/entities/#methods","title":"Methods","text":"<ul> <li><code>full_name</code>: Returns formatted full name</li> <li><code>set_password(password)</code>: Hash and store password</li> <li><code>verify_password(password)</code>: Verify password against hash</li> <li><code>has_permission(permission)</code>: Check role-based permissions</li> </ul>"},{"location":"models/entities/#validation-rules","title":"Validation Rules","text":"<ul> <li>Username must be unique and 3-50 characters</li> <li>Email must be valid format and unique</li> <li>Password must meet complexity requirements (handled externally)</li> <li>Phone number format validation (optional)</li> </ul>"},{"location":"models/entities/#crewmember-model","title":"CrewMember Model","text":"<p>The CrewMember model manages comprehensive personnel records for maritime crew members.</p>"},{"location":"models/entities/#purpose_1","title":"Purpose","text":"<ul> <li>Store detailed crew member information</li> <li>Track employment status and history</li> <li>Manage emergency contacts and personal details</li> <li>Support regulatory compliance requirements</li> </ul>"},{"location":"models/entities/#attributes_1","title":"Attributes","text":""},{"location":"models/entities/#personal-information","title":"Personal Information","text":"Field Type Required Constraints Description <code>id</code> UUID Yes Primary Key Unique identifier <code>first_name</code> String(100) Yes - First name <code>last_name</code> String(100) Yes - Last name <code>middle_name</code> String(100) No - Middle name <code>email</code> String(255) Yes Unique Email address <code>phone</code> String(50) No - Primary phone <code>phone_secondary</code> String(50) No - Secondary phone"},{"location":"models/entities/#professional-information","title":"Professional Information","text":"Field Type Required Constraints Description <code>employee_id</code> String(50) Yes Unique Company employee ID <code>rank</code> String(100) Yes - Maritime rank/position <code>department</code> Department Yes Enum Ship department <code>status</code> CrewStatus Yes Default: AVAILABLE Employment status"},{"location":"models/entities/#personal-details","title":"Personal Details","text":"Field Type Required Constraints Description <code>date_of_birth</code> Date No - Birth date <code>nationality</code> String(100) No - Nationality <code>passport_number</code> String(50) No - Passport number <code>passport_expiry</code> Date No - Passport expiration <code>seaman_book_number</code> String(50) No - Seaman's book number"},{"location":"models/entities/#employment-details","title":"Employment Details","text":"Field Type Required Constraints Description <code>date_joined</code> Date Yes - Employment start date <code>date_left</code> Date No - Employment end date <code>contract_type</code> String(50) No - Contract type <code>contract_duration_months</code> Integer No - Contract duration"},{"location":"models/entities/#contact-information","title":"Contact Information","text":"Field Type Required Constraints Description <code>address_line1</code> String(255) No - Primary address <code>address_line2</code> String(255) No - Secondary address <code>city</code> String(100) No - City <code>state_province</code> String(100) No - State or province <code>postal_code</code> String(20) No - Postal code <code>country</code> String(100) No - Country"},{"location":"models/entities/#emergency-contact","title":"Emergency Contact","text":"Field Type Required Constraints Description <code>emergency_contact_name</code> String(200) No - Contact name <code>emergency_contact_relationship</code> String(50) No - Relationship <code>emergency_contact_phone</code> String(50) No - Contact phone <code>emergency_contact_email</code> String(255) No - Contact email"},{"location":"models/entities/#additional-information","title":"Additional Information","text":"Field Type Required Constraints Description <code>notes</code> Text No - General notes <code>metadata_</code> JSON No - Additional metadata <code>photo_url</code> String(500) No - Profile photo URL <code>user_id</code> UUID No Foreign Key Linked user account"},{"location":"models/entities/#enumerations","title":"Enumerations","text":""},{"location":"models/entities/#crewstatus","title":"CrewStatus","text":"<ul> <li><code>ACTIVE</code>: Currently employed</li> <li><code>ON_LEAVE</code>: On approved leave</li> <li><code>ON_VESSEL</code>: Currently deployed</li> <li><code>AVAILABLE</code>: Available for assignment</li> <li><code>INACTIVE</code>: Not currently active</li> <li><code>TRAINING</code>: In training program</li> <li><code>MEDICAL</code>: Medical leave</li> </ul>"},{"location":"models/entities/#department","title":"Department","text":"<ul> <li><code>DECK</code>: Deck department</li> <li><code>ENGINE</code>: Engine department</li> <li><code>CATERING</code>: Catering/galley</li> <li><code>ELECTRICAL</code>: Electrical</li> <li><code>RADIO</code>: Radio/communications</li> </ul>"},{"location":"models/entities/#relationships_1","title":"Relationships","text":"<ul> <li>Many-to-One: <code>user</code> (optional)</li> <li>One-to-Many: <code>certificates</code>, <code>vessel_assignments</code>, <code>appraisals</code></li> </ul>"},{"location":"models/entities/#methods_1","title":"Methods","text":"<ul> <li><code>full_name</code>: Returns formatted full name with middle name</li> <li><code>current_vessel_assignment</code>: Gets active vessel assignment</li> <li><code>has_valid_certificates()</code>: Checks certificate validity</li> </ul>"},{"location":"models/entities/#validation-rules_1","title":"Validation Rules","text":"<ul> <li>Employee ID must be unique</li> <li>Email must be unique and valid format</li> <li>Date of birth must be reasonable (18+ years old)</li> <li>Passport expiry must be future date if provided</li> <li>Employment dates must be logical (joined &lt;= left)</li> </ul>"},{"location":"models/entities/#appraisal-model","title":"Appraisal Model","text":"<p>The Appraisal model manages crew performance evaluations with workflow support and detailed scoring.</p>"},{"location":"models/entities/#purpose_2","title":"Purpose","text":"<ul> <li>Track crew member performance evaluations</li> <li>Manage appraisal workflow and approvals</li> <li>Store detailed feedback and recommendations</li> <li>Support compliance and career development</li> </ul>"},{"location":"models/entities/#attributes_2","title":"Attributes","text":""},{"location":"models/entities/#appraisal-information","title":"Appraisal Information","text":"Field Type Required Constraints Description <code>id</code> UUID Yes Primary Key Unique identifier <code>appraisal_number</code> String(50) Yes Unique Business identifier <code>type</code> AppraisalType Yes Enum Evaluation type <code>status</code> AppraisalStatus Yes Default: DRAFT Workflow status"},{"location":"models/entities/#period-and-scoring","title":"Period and Scoring","text":"Field Type Required Constraints Description <code>period_start</code> Date Yes - Evaluation period start <code>period_end</code> Date Yes - Evaluation period end <code>overall_rating</code> Float No 0-5 scale Overall performance rating <code>overall_score</code> Float No - Calculated total score <code>max_score</code> Float No - Maximum possible score"},{"location":"models/entities/#feedback-and-comments","title":"Feedback and Comments","text":"Field Type Required Constraints Description <code>evaluator_comments</code> Text No - Evaluator feedback <code>crew_comments</code> Text No - Crew member response <code>improvement_areas</code> Text No - Areas for improvement <code>achievements</code> Text No - Notable achievements"},{"location":"models/entities/#recommendations","title":"Recommendations","text":"Field Type Required Constraints Description <code>recommendation</code> String(255) No - Overall recommendation <code>recommended_for_promotion</code> Boolean Yes Default: False Promotion recommendation <code>recommended_training</code> JSON Array No - Training recommendations"},{"location":"models/entities/#conduct-and-discipline","title":"Conduct and Discipline","text":"Field Type Required Constraints Description <code>conduct_rating</code> Integer No 1-5 scale Conduct rating <code>discipline_issues</code> Text No - Disciplinary notes <code>commendations</code> Text No - Commendations"},{"location":"models/entities/#contract-and-rehire","title":"Contract and Rehire","text":"Field Type Required Constraints Description <code>recommend_rehire</code> Boolean No - Rehire recommendation <code>next_contract_duration_months</code> Integer No - Suggested contract length <code>wage_increase_percentage</code> Float No - Wage increase recommendation"},{"location":"models/entities/#timestamps","title":"Timestamps","text":"Field Type Required Constraints Description <code>evaluation_date</code> DateTime Yes - Evaluation completed date <code>reviewed_date</code> DateTime No - Review completion date <code>completed_date</code> DateTime No - Final completion date"},{"location":"models/entities/#acknowledgment","title":"Acknowledgment","text":"Field Type Required Constraints Description <code>crew_acknowledged</code> Boolean Yes Default: False Crew acknowledgment <code>crew_acknowledged_date</code> DateTime No - Acknowledgment date <code>crew_signature</code> Text No - Digital signature"},{"location":"models/entities/#references","title":"References","text":"Field Type Required Constraints Description <code>crew_member_id</code> UUID Yes Foreign Key Evaluated crew member <code>vessel_id</code> UUID No Foreign Key Vessel where evaluated <code>evaluator_id</code> UUID Yes Foreign Key Evaluating user <code>reviewer_id</code> UUID No Foreign Key Reviewing user"},{"location":"models/entities/#additional-data","title":"Additional Data","text":"Field Type Required Constraints Description <code>attachments</code> JSON Array No - Supporting documents <code>metadata_</code> JSON No - Additional metadata"},{"location":"models/entities/#enumerations_1","title":"Enumerations","text":""},{"location":"models/entities/#appraisalstatus","title":"AppraisalStatus","text":"<ul> <li><code>DRAFT</code>: Initial draft state</li> <li><code>IN_PROGRESS</code>: Currently being completed</li> <li><code>PENDING_REVIEW</code>: Awaiting review</li> <li><code>REVIEWED</code>: Review completed</li> <li><code>COMPLETED</code>: Final completed state</li> <li><code>DISPUTED</code>: Under dispute</li> </ul>"},{"location":"models/entities/#appraisaltype","title":"AppraisalType","text":"<ul> <li><code>REGULAR</code>: Regular performance review</li> <li><code>PROBATION</code>: Probationary evaluation</li> <li><code>PROMOTION</code>: Promotion assessment</li> <li><code>INCIDENT</code>: Incident-related review</li> <li><code>END_OF_CONTRACT</code>: Contract completion review</li> <li><code>SPECIAL</code>: Special circumstances</li> </ul>"},{"location":"models/entities/#relationships_2","title":"Relationships","text":"<ul> <li>Many-to-One: <code>crew_member</code>, <code>vessel</code>, <code>evaluator</code>, <code>reviewer</code></li> <li>One-to-Many: <code>categories</code> (AppraisalCategory)</li> </ul>"},{"location":"models/entities/#methods_2","title":"Methods","text":"<ul> <li><code>calculate_overall_score()</code>: Calculates score from categories</li> <li><code>is_overdue</code>: Property checking if past due</li> <li><code>rating_description</code>: Property returning rating description</li> </ul>"},{"location":"models/entities/#validation-rules_2","title":"Validation Rules","text":"<ul> <li>Period end must be after period start</li> <li>Overall rating must be 0-5 if provided</li> <li>Evaluation date must be within evaluation period</li> <li>Crew member must exist</li> <li>Evaluator must have appropriate permissions</li> </ul>"},{"location":"models/entities/#vessel-model","title":"Vessel Model","text":"<p>The Vessel model manages fleet information, specifications, and operational status.</p>"},{"location":"models/entities/#purpose_3","title":"Purpose","text":"<ul> <li>Store comprehensive vessel information</li> <li>Track operational status and capabilities</li> <li>Manage crew requirements and assignments</li> <li>Support compliance and inspection tracking</li> </ul>"},{"location":"models/entities/#attributes_3","title":"Attributes","text":""},{"location":"models/entities/#basic-information","title":"Basic Information","text":"Field Type Required Constraints Description <code>id</code> UUID Yes Primary Key Unique identifier <code>name</code> String(200) Yes - Vessel name <code>imo_number</code> String(20) Yes Unique IMO identification <code>mmsi</code> String(20) No Unique MMSI number <code>call_sign</code> String(20) No - Radio call sign"},{"location":"models/entities/#type-and-status","title":"Type and Status","text":"Field Type Required Constraints Description <code>type</code> VesselType Yes Enum Vessel type <code>status</code> VesselStatus Yes Default: ACTIVE Operational status"},{"location":"models/entities/#registration","title":"Registration","text":"Field Type Required Constraints Description <code>flag_state</code> String(100) Yes - Flag state <code>port_of_registry</code> String(100) No - Registry port <code>registration_number</code> String(50) No - Registration number"},{"location":"models/entities/#technical-specifications","title":"Technical Specifications","text":"Field Type Required Constraints Description <code>gross_tonnage</code> Float No Positive Gross tonnage <code>net_tonnage</code> Float No Positive Net tonnage <code>deadweight_tonnage</code> Float No Positive Deadweight tonnage <code>length_overall</code> Float No Positive Length overall (meters) <code>beam</code> Float No Positive Beam (meters) <code>draft</code> Float No Positive Draft (meters)"},{"location":"models/entities/#build-information","title":"Build Information","text":"Field Type Required Constraints Description <code>year_built</code> Integer No Reasonable year Construction year <code>builder</code> String(200) No - Shipbuilder name <code>class_society</code> String(100) No - Classification society <code>class_notation</code> String(200) No - Class notation"},{"location":"models/entities/#crew-requirements","title":"Crew Requirements","text":"Field Type Required Constraints Description <code>minimum_crew</code> Integer Yes Positive Minimum crew required <code>maximum_crew</code> Integer Yes &gt;= minimum_crew Maximum crew capacity <code>current_crew_count</code> Integer Yes Default: 0 Current crew count"},{"location":"models/entities/#management","title":"Management","text":"Field Type Required Constraints Description <code>owner</code> String(200) No - Vessel owner <code>operator</code> String(200) No - Operating company <code>manager</code> String(200) No - Management company"},{"location":"models/entities/#operations","title":"Operations","text":"Field Type Required Constraints Description <code>last_port</code> String(200) No - Last port of call <code>next_port</code> String(200) No - Next port destination <code>eta</code> Date No - Estimated time of arrival"},{"location":"models/entities/#compliance","title":"Compliance","text":"Field Type Required Constraints Description <code>last_inspection_date</code> Date No - Last inspection <code>next_inspection_date</code> Date No - Next inspection due <code>last_drydock_date</code> Date No - Last drydock <code>next_drydock_date</code> Date No - Next drydock due"},{"location":"models/entities/#additional-information_1","title":"Additional Information","text":"Field Type Required Constraints Description <code>notes</code> String(1000) No - General notes <code>metadata_</code> JSON No - Additional metadata <code>photo_url</code> String(500) No - Vessel photo URL"},{"location":"models/entities/#enumerations_2","title":"Enumerations","text":""},{"location":"models/entities/#vesseltype","title":"VesselType","text":"<ul> <li><code>BULK_CARRIER</code>: Bulk carrier vessel</li> <li><code>CONTAINER</code>: Container ship</li> <li><code>TANKER</code>: Tanker vessel</li> <li><code>GENERAL_CARGO</code>: General cargo ship</li> <li><code>PASSENGER</code>: Passenger vessel</li> <li><code>RORO</code>: Roll-on/roll-off</li> <li><code>CRUISE</code>: Cruise ship</li> <li><code>OFFSHORE</code>: Offshore vessel</li> <li><code>TUG</code>: Tugboat</li> <li><code>SUPPLY</code>: Supply vessel</li> <li><code>OTHER</code>: Other vessel type</li> </ul>"},{"location":"models/entities/#vesselstatus","title":"VesselStatus","text":"<ul> <li><code>ACTIVE</code>: Currently active</li> <li><code>LAID_UP</code>: Laid up/inactive</li> <li><code>DRY_DOCK</code>: In dry dock</li> <li><code>DECOMMISSIONED</code>: Decommissioned</li> <li><code>UNDER_CONSTRUCTION</code>: Under construction</li> </ul>"},{"location":"models/entities/#relationships_3","title":"Relationships","text":"<ul> <li>One-to-Many: <code>assignments</code> (VesselAssignment), <code>appraisals</code></li> </ul>"},{"location":"models/entities/#methods_3","title":"Methods","text":"<ul> <li><code>is_fully_crewed</code>: Property checking minimum crew</li> <li><code>available_positions</code>: Property calculating available positions</li> <li><code>update_crew_count()</code>: Updates crew count from assignments</li> </ul>"},{"location":"models/entities/#validation-rules_3","title":"Validation Rules","text":"<ul> <li>IMO number must be valid format and unique</li> <li>MMSI must be unique if provided</li> <li>Maximum crew must be &gt;= minimum crew</li> <li>Technical specifications must be positive numbers</li> <li>Year built must be reasonable</li> <li>Crew counts must be non-negative</li> </ul>"},{"location":"models/entities/#certificate-model","title":"Certificate Model","text":"<p>The Certificate model manages crew member certifications, licenses, and compliance documents.</p>"},{"location":"models/entities/#purpose_4","title":"Purpose","text":"<ul> <li>Track crew member certifications and licenses</li> <li>Monitor expiry dates and renewal requirements</li> <li>Ensure regulatory compliance</li> <li>Support verification and audit processes</li> </ul>"},{"location":"models/entities/#attributes_4","title":"Attributes","text":""},{"location":"models/entities/#certificate-information","title":"Certificate Information","text":"Field Type Required Constraints Description <code>id</code> UUID Yes Primary Key Unique identifier <code>type</code> String(100) Yes - Certificate type <code>number</code> String(100) Yes Unique Certificate number <code>name</code> String(255) Yes - Certificate name"},{"location":"models/entities/#validity","title":"Validity","text":"Field Type Required Constraints Description <code>issue_date</code> Date Yes - Issue date <code>expiry_date</code> Date No - Expiry date <code>is_lifetime</code> Boolean Yes Default: False Lifetime validity"},{"location":"models/entities/#issuing-authority","title":"Issuing Authority","text":"Field Type Required Constraints Description <code>issued_by</code> String(255) Yes - Issuing authority <code>issuing_country</code> String(100) No - Issuing country"},{"location":"models/entities/#status","title":"Status","text":"Field Type Required Constraints Description <code>is_required</code> Boolean Yes Default: True Required for employment <code>is_verified</code> Boolean Yes Default: False Verification status <code>verified_date</code> DateTime No - Verification date <code>verified_by</code> String(255) No - Verified by whom"},{"location":"models/entities/#document-storage","title":"Document Storage","text":"Field Type Required Constraints Description <code>document_url</code> String(500) No - Document file URL <code>document_hash</code> String(255) No - Document hash"},{"location":"models/entities/#additional-information_2","title":"Additional Information","text":"Field Type Required Constraints Description <code>notes</code> Text No - Additional notes <code>metadata_</code> JSON No - Additional metadata <code>renewal_alert_days</code> Integer Yes Default: 90 Alert days before expiry <code>crew_member_id</code> UUID Yes Foreign Key Owning crew member"},{"location":"models/entities/#common-certificate-types","title":"Common Certificate Types","text":"<ul> <li>STCW Certificates: Standards of Training, Certification and Watchkeeping</li> <li>Medical Certificates: Medical fitness certificates</li> <li>Flag State Endorsements: National endorsements</li> <li>Passport: Identity document</li> <li>Seaman's Book: Seaman's identity document</li> <li>Visas: Country-specific entry permits</li> <li>Vaccination Certificates: Health compliance documents</li> </ul>"},{"location":"models/entities/#relationships_4","title":"Relationships","text":"<ul> <li>Many-to-One: <code>crew_member</code></li> </ul>"},{"location":"models/entities/#methods_4","title":"Methods","text":"<ul> <li><code>is_valid()</code>: Checks current validity status</li> <li><code>is_expiring_soon(days)</code>: Checks if expiring within specified days</li> <li><code>is_expired()</code>: Checks if already expired</li> <li><code>status</code>: Property returning current status string</li> </ul>"},{"location":"models/entities/#validation-rules_4","title":"Validation Rules","text":"<ul> <li>Certificate number must be unique</li> <li>Issue date must be in the past</li> <li>Expiry date must be after issue date if provided</li> <li>Renewal alert days must be positive</li> <li>Document hash must match stored document</li> </ul>"},{"location":"models/entities/#status-values","title":"Status Values","text":"<ul> <li><code>valid</code>: Currently valid certificate</li> <li><code>expiring_soon</code>: Valid but expiring within alert period</li> <li><code>expired</code>: Past expiry date</li> <li><code>unknown</code>: Status cannot be determined</li> </ul>"},{"location":"models/entities/#summary","title":"Summary","text":"<p>These core entities form the foundation of the Crewing Management System, providing comprehensive data management for:</p> <ul> <li>User authentication and authorization</li> <li>Personnel and crew management</li> <li>Performance evaluation and tracking</li> <li>Fleet and vessel management</li> <li>Compliance and certification tracking</li> </ul> <p>Each entity is designed with maritime industry requirements in mind, supporting regulatory compliance, operational efficiency, and data integrity throughout the crew management lifecycle.</p>"},{"location":"reference/errors/","title":"Error Code Reference","text":"<p>This document provides comprehensive information about error codes, HTTP status codes, error response formats, and common error scenarios in the Crewing Management System API.</p>"},{"location":"reference/errors/#error-response-format","title":"Error Response Format","text":"<p>All API errors follow a consistent JSON response format:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Validation failed\",\n    \"details\": {\n      \"field\": \"email\",\n      \"constraint\": \"Email address already exists\"\n    },\n    \"timestamp\": \"2024-09-26T10:30:00Z\",\n    \"request_id\": \"req_123456789\",\n    \"path\": \"/api/v1/crew-members\"\n  }\n}\n</code></pre>"},{"location":"reference/errors/#error-response-fields","title":"Error Response Fields","text":"Field Type Description <code>code</code> String Application-specific error code <code>message</code> String Human-readable error message <code>details</code> Object Additional error context (optional) <code>timestamp</code> String ISO 8601 error timestamp <code>request_id</code> String Unique request identifier for tracking <code>path</code> String API endpoint where error occurred"},{"location":"reference/errors/#http-status-codes","title":"HTTP Status Codes","text":"<p>The API uses standard HTTP status codes with the following meanings:</p>"},{"location":"reference/errors/#2xx-success","title":"2xx Success","text":"Code Status Description 200 OK Request successful 201 Created Resource created successfully 202 Accepted Request accepted for processing 204 No Content Request successful, no content returned"},{"location":"reference/errors/#4xx-client-errors","title":"4xx Client Errors","text":"Code Status Description Common Causes 400 Bad Request Invalid request format or parameters Malformed JSON, missing required fields 401 Unauthorized Authentication required or failed Missing/invalid token, expired session 403 Forbidden Access denied Insufficient permissions, account suspended 404 Not Found Resource not found Invalid ID, deleted resource 405 Method Not Allowed HTTP method not supported GET on POST endpoint 409 Conflict Resource conflict Duplicate unique field, concurrent modification 422 Unprocessable Entity Validation failed Business rule violation, invalid data 429 Too Many Requests Rate limit exceeded API throttling, DDoS protection"},{"location":"reference/errors/#5xx-server-errors","title":"5xx Server Errors","text":"Code Status Description Common Causes 500 Internal Server Error Unexpected server error Database connection, unhandled exception 502 Bad Gateway Upstream service error Database unavailable, external service down 503 Service Unavailable Service temporarily unavailable Maintenance mode, overloaded 504 Gateway Timeout Upstream service timeout Slow database query, external API timeout"},{"location":"reference/errors/#application-error-codes","title":"Application Error Codes","text":""},{"location":"reference/errors/#authentication-and-authorization-auth_","title":"Authentication and Authorization (AUTH_*)","text":"Code Description HTTP Status Resolution <code>AUTH_INVALID_CREDENTIALS</code> Invalid username or password 401 Check credentials and retry <code>AUTH_TOKEN_EXPIRED</code> JWT token has expired 401 Refresh token or re-authenticate <code>AUTH_TOKEN_INVALID</code> JWT token is malformed or invalid 401 Clear token and re-authenticate <code>AUTH_INSUFFICIENT_PERMISSIONS</code> User lacks required permissions 403 Contact administrator for access <code>AUTH_ACCOUNT_SUSPENDED</code> User account is suspended 403 Contact administrator <code>AUTH_SESSION_EXPIRED</code> Session has expired 401 Re-authenticate <code>AUTH_RATE_LIMITED</code> Too many authentication attempts 429 Wait before retrying"},{"location":"reference/errors/#validation-errors-validation_","title":"Validation Errors (VALIDATION_*)","text":"Code Description HTTP Status Resolution <code>VALIDATION_REQUIRED_FIELD</code> Required field is missing 422 Provide required field value <code>VALIDATION_INVALID_FORMAT</code> Field format is invalid 422 Check field format requirements <code>VALIDATION_INVALID_EMAIL</code> Email address format is invalid 422 Provide valid email address <code>VALIDATION_INVALID_DATE</code> Date format or value is invalid 422 Use ISO 8601 date format <code>VALIDATION_INVALID_ENUM</code> Enum value is not allowed 422 Use one of the allowed values <code>VALIDATION_STRING_TOO_LONG</code> String exceeds maximum length 422 Shorten the field value <code>VALIDATION_STRING_TOO_SHORT</code> String below minimum length 422 Lengthen the field value <code>VALIDATION_NUMBER_OUT_OF_RANGE</code> Number outside allowed range 422 Use value within range <code>VALIDATION_DUPLICATE_VALUE</code> Value must be unique 422 Use a different value <code>VALIDATION_INVALID_REFERENCE</code> Referenced entity doesn't exist 422 Use valid entity ID"},{"location":"reference/errors/#resource-errors-resource_","title":"Resource Errors (RESOURCE_*)","text":"Code Description HTTP Status Resolution <code>RESOURCE_NOT_FOUND</code> Requested resource not found 404 Check resource ID <code>RESOURCE_ALREADY_EXISTS</code> Resource with unique field exists 409 Use different unique values <code>RESOURCE_CONFLICT</code> Resource state conflict 409 Refresh and retry <code>RESOURCE_LOCKED</code> Resource is locked by another process 409 Wait and retry <code>RESOURCE_DELETED</code> Resource has been soft deleted 410 Restore resource if needed"},{"location":"reference/errors/#business-logic-errors-business_","title":"Business Logic Errors (BUSINESS_*)","text":"Code Description HTTP Status Resolution <code>BUSINESS_INVALID_STATE_TRANSITION</code> Invalid workflow state change 422 Check allowed transitions <code>BUSINESS_CERTIFICATE_EXPIRED</code> Certificate has expired 422 Renew certificate <code>BUSINESS_CREW_LIMIT_EXCEEDED</code> Vessel crew limit exceeded 422 Remove crew or increase limit <code>BUSINESS_INVALID_DATE_RANGE</code> Date range is invalid 422 Ensure start &lt; end dates <code>BUSINESS_OVERLAPPING_ASSIGNMENT</code> Crew assignment overlap 409 Resolve assignment conflicts <code>BUSINESS_INSUFFICIENT_RANK</code> User rank insufficient for action 403 Assign higher rank <code>BUSINESS_APPRAISAL_LOCKED</code> Appraisal is locked 409 Complete workflow to unlock <code>BUSINESS_VESSEL_UNAVAILABLE</code> Vessel not available for assignment 422 Check vessel status"},{"location":"reference/errors/#file-and-document-errors-file_","title":"File and Document Errors (FILE_*)","text":"Code Description HTTP Status Resolution <code>FILE_NOT_FOUND</code> Requested file not found 404 Check file path <code>FILE_TOO_LARGE</code> File exceeds size limit 413 Reduce file size <code>FILE_INVALID_TYPE</code> File type not allowed 422 Use supported file type <code>FILE_UPLOAD_FAILED</code> File upload failed 500 Retry upload <code>FILE_VIRUS_DETECTED</code> Virus detected in file 422 Scan file and retry <code>FILE_CORRUPTED</code> File is corrupted 422 Upload valid file"},{"location":"reference/errors/#external-service-errors-external_","title":"External Service Errors (EXTERNAL_*)","text":"Code Description HTTP Status Resolution <code>EXTERNAL_SERVICE_UNAVAILABLE</code> External service unavailable 503 Retry later <code>EXTERNAL_API_ERROR</code> External API returned error 502 Check external service status <code>EXTERNAL_TIMEOUT</code> External service timeout 504 Retry with longer timeout <code>EXTERNAL_RATE_LIMITED</code> External service rate limited 429 Reduce request frequency"},{"location":"reference/errors/#system-errors-system_","title":"System Errors (SYSTEM_*)","text":"Code Description HTTP Status Resolution <code>SYSTEM_MAINTENANCE</code> System under maintenance 503 Wait for maintenance completion <code>SYSTEM_DATABASE_ERROR</code> Database connection error 500 Contact system administrator <code>SYSTEM_CONFIGURATION_ERROR</code> System misconfiguration 500 Contact system administrator <code>SYSTEM_OVERLOADED</code> System overloaded 503 Retry later or contact support"},{"location":"reference/errors/#common-error-scenarios","title":"Common Error Scenarios","text":""},{"location":"reference/errors/#authentication-issues","title":"Authentication Issues","text":""},{"location":"reference/errors/#invalid-login-credentials","title":"Invalid Login Credentials","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"AUTH_INVALID_CREDENTIALS\",\n    \"message\": \"Invalid username or password\",\n    \"timestamp\": \"2024-09-26T10:30:00Z\",\n    \"request_id\": \"req_auth_001\",\n    \"path\": \"/api/v1/auth/login\"\n  }\n}\n</code></pre>"},{"location":"reference/errors/#expired-token","title":"Expired Token","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"AUTH_TOKEN_EXPIRED\",\n    \"message\": \"JWT token has expired\",\n    \"details\": {\n      \"expired_at\": \"2024-09-26T09:30:00Z\"\n    },\n    \"timestamp\": \"2024-09-26T10:30:00Z\",\n    \"request_id\": \"req_auth_002\",\n    \"path\": \"/api/v1/crew-members\"\n  }\n}\n</code></pre>"},{"location":"reference/errors/#insufficient-permissions","title":"Insufficient Permissions","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"AUTH_INSUFFICIENT_PERMISSIONS\",\n    \"message\": \"User lacks required permissions\",\n    \"details\": {\n      \"required_permission\": \"crew.write\",\n      \"user_role\": \"viewer\"\n    },\n    \"timestamp\": \"2024-09-26T10:30:00Z\",\n    \"request_id\": \"req_auth_003\",\n    \"path\": \"/api/v1/crew-members\"\n  }\n}\n</code></pre>"},{"location":"reference/errors/#validation-errors","title":"Validation Errors","text":""},{"location":"reference/errors/#missing-required-field","title":"Missing Required Field","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"VALIDATION_REQUIRED_FIELD\",\n    \"message\": \"Required field is missing\",\n    \"details\": {\n      \"field\": \"first_name\",\n      \"location\": \"body\"\n    },\n    \"timestamp\": \"2024-09-26T10:30:00Z\",\n    \"request_id\": \"req_val_001\",\n    \"path\": \"/api/v1/crew-members\"\n  }\n}\n</code></pre>"},{"location":"reference/errors/#invalid-email-format","title":"Invalid Email Format","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"VALIDATION_INVALID_EMAIL\",\n    \"message\": \"Email address format is invalid\",\n    \"details\": {\n      \"field\": \"email\",\n      \"value\": \"invalid-email\",\n      \"expected_format\": \"user@domain.com\"\n    },\n    \"timestamp\": \"2024-09-26T10:30:00Z\",\n    \"request_id\": \"req_val_002\",\n    \"path\": \"/api/v1/crew-members\"\n  }\n}\n</code></pre>"},{"location":"reference/errors/#duplicate-value","title":"Duplicate Value","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"VALIDATION_DUPLICATE_VALUE\",\n    \"message\": \"Employee ID already exists\",\n    \"details\": {\n      \"field\": \"employee_id\",\n      \"value\": \"EMP001\",\n      \"constraint\": \"unique\"\n    },\n    \"timestamp\": \"2024-09-26T10:30:00Z\",\n    \"request_id\": \"req_val_003\",\n    \"path\": \"/api/v1/crew-members\"\n  }\n}\n</code></pre>"},{"location":"reference/errors/#business-logic-errors","title":"Business Logic Errors","text":""},{"location":"reference/errors/#certificate-expired","title":"Certificate Expired","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"BUSINESS_CERTIFICATE_EXPIRED\",\n    \"message\": \"Required certificate has expired\",\n    \"details\": {\n      \"certificate_type\": \"STCW Basic Safety Training\",\n      \"certificate_number\": \"BST123456\",\n      \"expired_date\": \"2024-08-15\",\n      \"crew_member_id\": \"cm_123456\"\n    },\n    \"timestamp\": \"2024-09-26T10:30:00Z\",\n    \"request_id\": \"req_bus_001\",\n    \"path\": \"/api/v1/vessel-assignments\"\n  }\n}\n</code></pre>"},{"location":"reference/errors/#vessel-crew-limit-exceeded","title":"Vessel Crew Limit Exceeded","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"BUSINESS_CREW_LIMIT_EXCEEDED\",\n    \"message\": \"Vessel crew limit exceeded\",\n    \"details\": {\n      \"vessel_id\": \"v_123456\",\n      \"vessel_name\": \"MV Example\",\n      \"current_crew\": 25,\n      \"maximum_crew\": 25,\n      \"attempted_assignment\": \"cm_789012\"\n    },\n    \"timestamp\": \"2024-09-26T10:30:00Z\",\n    \"request_id\": \"req_bus_002\",\n    \"path\": \"/api/v1/vessel-assignments\"\n  }\n}\n</code></pre>"},{"location":"reference/errors/#resource-not-found","title":"Resource Not Found","text":""},{"location":"reference/errors/#crew-member-not-found","title":"Crew Member Not Found","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"RESOURCE_NOT_FOUND\",\n    \"message\": \"Crew member not found\",\n    \"details\": {\n      \"resource_type\": \"crew_member\",\n      \"resource_id\": \"cm_nonexistent\"\n    },\n    \"timestamp\": \"2024-09-26T10:30:00Z\",\n    \"request_id\": \"req_res_001\",\n    \"path\": \"/api/v1/crew-members/cm_nonexistent\"\n  }\n}\n</code></pre>"},{"location":"reference/errors/#error-handling-best-practices","title":"Error Handling Best Practices","text":""},{"location":"reference/errors/#client-side-handling","title":"Client-Side Handling","text":"<ol> <li>Always check HTTP status codes before processing responses</li> <li>Parse error responses to get detailed error information</li> <li>Display user-friendly messages based on error codes</li> <li>Implement retry logic for transient errors (5xx, 429)</li> <li>Log errors with request IDs for debugging</li> </ol>"},{"location":"reference/errors/#common-retry-scenarios","title":"Common Retry Scenarios","text":"<ul> <li>429 Too Many Requests: Implement exponential backoff</li> <li>500 Internal Server Error: Retry up to 3 times</li> <li>502 Bad Gateway: Retry with increasing delays</li> <li>503 Service Unavailable: Check maintenance status</li> <li>504 Gateway Timeout: Increase timeout and retry</li> </ul>"},{"location":"reference/errors/#error-prevention","title":"Error Prevention","text":"<ol> <li>Validate input before sending requests</li> <li>Handle authentication expiry proactively</li> <li>Check resource existence before operations</li> <li>Respect rate limits in client applications</li> <li>Use proper HTTP methods for operations</li> </ol>"},{"location":"reference/errors/#request-id-usage","title":"Request ID Usage","text":"<p>Every error response includes a <code>request_id</code> field. Use this ID when:</p> <ul> <li>Reporting bugs or issues to support</li> <li>Correlating errors across multiple services</li> <li>Debugging complex workflows</li> <li>Tracking request flows in logs</li> </ul>"},{"location":"reference/errors/#monitoring-and-alerting","title":"Monitoring and Alerting","text":"<p>Set up monitoring for:</p> <ul> <li>High error rates (&gt; 5% 4xx, &gt; 1% 5xx)</li> <li>Authentication failures (potential security issues)</li> <li>Resource conflicts (business logic problems)</li> <li>External service errors (dependency issues)</li> <li>File upload failures (storage problems)</li> </ul>"},{"location":"reference/errors/#support-and-troubleshooting","title":"Support and Troubleshooting","text":""},{"location":"reference/errors/#getting-help","title":"Getting Help","text":"<p>When reporting errors, provide:</p> <ol> <li>Request ID from error response</li> <li>HTTP status code and error code</li> <li>Request details (method, path, payload)</li> <li>Timestamp of the error</li> <li>User context (role, permissions)</li> </ol>"},{"location":"reference/errors/#common-solutions","title":"Common Solutions","text":"<ul> <li>Authentication errors: Check token validity and refresh if needed</li> <li>Permission errors: Verify user role and required permissions</li> <li>Validation errors: Review API documentation for field requirements</li> <li>Business logic errors: Check entity states and business rules</li> <li>Rate limiting: Implement proper backoff strategies</li> </ul> <p>For additional support, consult the FAQ or contact the development team with the error details above.</p>"},{"location":"reference/faq/","title":"Frequently Asked Questions (FAQ)","text":"<p>This document addresses common questions about the Crewing Management System API, including usage patterns, authentication, integration, and performance considerations.</p>"},{"location":"reference/faq/#table-of-contents","title":"Table of Contents","text":"<ul> <li>General API Usage</li> <li>Authentication &amp; Authorization</li> <li>Data Management</li> <li>Integration Questions</li> <li>Performance &amp; Optimization</li> <li>Error Handling</li> <li>Security &amp; Compliance</li> <li>Troubleshooting</li> </ul>"},{"location":"reference/faq/#general-api-usage","title":"General API Usage","text":""},{"location":"reference/faq/#q-what-api-version-should-i-use","title":"Q: What API version should I use?","text":"<p>A: Use API version 1 (<code>/api/v1/</code>), which is the current stable version. All endpoints are prefixed with <code>/api/v1/</code>.</p> <pre><code>GET /api/v1/crew-members\n</code></pre>"},{"location":"reference/faq/#q-what-data-formats-are-supported","title":"Q: What data formats are supported?","text":"<p>A: The API uses JSON for all request and response bodies. Set the appropriate headers:</p> <pre><code>Content-Type: application/json\nAccept: application/json\n</code></pre>"},{"location":"reference/faq/#q-are-there-rate-limits","title":"Q: Are there rate limits?","text":"<p>A: Yes, the API implements rate limiting: - Authenticated users: 1000 requests per hour - Unauthenticated requests: 100 requests per hour - Heavy operations (bulk uploads): 10 requests per minute</p> <p>Rate limit headers are included in responses: <pre><code>X-RateLimit-Limit: 1000\nX-RateLimit-Remaining: 847\nX-RateLimit-Reset: 1640995200\n</code></pre></p>"},{"location":"reference/faq/#q-how-do-i-handle-pagination","title":"Q: How do I handle pagination?","text":"<p>A: Use the <code>page</code> and <code>limit</code> query parameters:</p> <pre><code>GET /api/v1/crew-members?page=1&amp;limit=50\n</code></pre> <p>Response includes pagination metadata: <pre><code>{\n  \"data\": [...],\n  \"pagination\": {\n    \"page\": 1,\n    \"limit\": 50,\n    \"total\": 1250,\n    \"total_pages\": 25,\n    \"has_next\": true,\n    \"has_prev\": false\n  }\n}\n</code></pre></p> <p>Maximum limit is 100 items per page.</p>"},{"location":"reference/faq/#q-how-do-i-filter-and-sort-results","title":"Q: How do I filter and sort results?","text":"<p>A: Use query parameters for filtering and sorting:</p> <pre><code>GET /api/v1/crew-members?department=deck&amp;status=active&amp;sort=last_name&amp;order=asc\n</code></pre> <p>Common filter patterns: - Exact match: <code>?status=active</code> - Date range: <code>?date_joined_after=2024-01-01&amp;date_joined_before=2024-12-31</code> - Text search: <code>?search=john+doe</code> - Multiple values: <code>?department=deck,engine</code></p>"},{"location":"reference/faq/#authentication-authorization","title":"Authentication &amp; Authorization","text":""},{"location":"reference/faq/#q-how-do-i-authenticate-with-the-api","title":"Q: How do I authenticate with the API?","text":"<p>A: Use JWT (JSON Web Tokens) for authentication:</p> <ol> <li> <p>Login to get a token: <pre><code>POST /api/v1/auth/login\nContent-Type: application/json\n\n{\n  \"username\": \"your_username\",\n  \"password\": \"your_password\"\n}\n</code></pre></p> </li> <li> <p>Use the token in subsequent requests: <pre><code>GET /api/v1/crew-members\nAuthorization: Bearer your_jwt_token_here\n</code></pre></p> </li> </ol>"},{"location":"reference/faq/#q-how-long-do-tokens-last","title":"Q: How long do tokens last?","text":"<p>A: - Access tokens: 1 hour - Refresh tokens: 30 days</p> <p>Use the refresh token to get new access tokens without re-authenticating.</p>"},{"location":"reference/faq/#q-what-happens-if-my-token-expires","title":"Q: What happens if my token expires?","text":"<p>A: You'll receive a <code>401 Unauthorized</code> response: <pre><code>{\n  \"error\": {\n    \"code\": \"AUTH_TOKEN_EXPIRED\",\n    \"message\": \"JWT token has expired\"\n  }\n}\n</code></pre></p> <p>Use your refresh token to get a new access token: <pre><code>POST /api/v1/auth/refresh\nContent-Type: application/json\n\n{\n  \"refresh_token\": \"your_refresh_token\"\n}\n</code></pre></p>"},{"location":"reference/faq/#q-what-are-the-different-user-roles","title":"Q: What are the different user roles?","text":"<p>A: The system has 8 user roles with different permissions:</p> Role Description Key Permissions <code>SUPER_ADMIN</code> System administrator All permissions <code>ADMIN</code> Fleet administrator Full crew, vessel, appraisal management <code>CREW_MANAGER</code> HR and crew operations Crew and appraisal management <code>RECRUITMENT_OFFICER</code> Hiring and compliance Crew recruitment, certificates <code>VESSEL_CAPTAIN</code> Ship captain Crew appraisals on assigned vessel <code>DEPARTMENT_HEAD</code> Department manager Department crew appraisals <code>CREW_MEMBER</code> Individual crew member Personal profile and appraisals <code>VIEWER</code> Observer Read-only access"},{"location":"reference/faq/#q-how-do-i-check-if-a-user-has-permission-for-an-action","title":"Q: How do I check if a user has permission for an action?","text":"<p>A: Permissions are automatically enforced by the API. If you don't have permission, you'll get a <code>403 Forbidden</code> response:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"AUTH_INSUFFICIENT_PERMISSIONS\",\n    \"message\": \"User lacks required permissions\"\n  }\n}\n</code></pre>"},{"location":"reference/faq/#data-management","title":"Data Management","text":""},{"location":"reference/faq/#q-how-are-dates-formatted","title":"Q: How are dates formatted?","text":"<p>A: Use ISO 8601 format (YYYY-MM-DD for dates, YYYY-MM-DDTHH:MM:SSZ for timestamps):</p> <pre><code>{\n  \"date_of_birth\": \"1985-03-15\",\n  \"created_at\": \"2024-09-26T10:30:00Z\"\n}\n</code></pre>"},{"location":"reference/faq/#q-how-do-i-handle-file-uploads","title":"Q: How do I handle file uploads?","text":"<p>A: Use multipart/form-data for file uploads:</p> <pre><code>POST /api/v1/crew-members/{id}/photo\nContent-Type: multipart/form-data\nAuthorization: Bearer your_token\n\nfile=@profile_photo.jpg\n</code></pre> <p>File restrictions: - Max size: 10MB - Allowed types: JPEG, PNG, PDF - Virus scanning: All files are scanned</p>"},{"location":"reference/faq/#q-can-i-bulk-import-crew-members","title":"Q: Can I bulk import crew members?","text":"<p>A: Yes, use the bulk import endpoint:</p> <pre><code>POST /api/v1/crew-members/bulk-import\nContent-Type: multipart/form-data\nAuthorization: Bearer your_token\n\nfile=@crew_data.csv\n</code></pre> <p>CSV format requirements: - UTF-8 encoding - First row contains headers - Maximum 1000 records per file - Required fields: first_name, last_name, email, employee_id</p>"},{"location":"reference/faq/#q-how-do-i-update-only-specific-fields","title":"Q: How do I update only specific fields?","text":"<p>A: Use PATCH for partial updates:</p> <pre><code>PATCH /api/v1/crew-members/{id}\nContent-Type: application/json\n\n{\n  \"status\": \"on_vessel\",\n  \"phone\": \"+1-555-0123\"\n}\n</code></pre> <p>Only provided fields will be updated.</p>"},{"location":"reference/faq/#q-how-do-i-handle-soft-deletes","title":"Q: How do I handle soft deletes?","text":"<p>A: The API uses soft deletes for critical records. When you delete:</p> <pre><code>DELETE /api/v1/crew-members/{id}\n</code></pre> <p>The record is marked as deleted but preserved for audit purposes. To restore:</p> <pre><code>POST /api/v1/crew-members/{id}/restore\n</code></pre>"},{"location":"reference/faq/#integration-questions","title":"Integration Questions","text":""},{"location":"reference/faq/#q-is-there-a-webhook-system","title":"Q: Is there a webhook system?","text":"<p>A: Yes, webhooks notify your system of important events:</p> <p>Available events: - <code>crew_member.created</code> - <code>crew_member.updated</code> - <code>appraisal.completed</code> - <code>certificate.expiring</code> - <code>vessel_assignment.created</code></p> <p>Configuration: <pre><code>POST /api/v1/webhooks\nContent-Type: application/json\n\n{\n  \"url\": \"https://your-system.com/webhook\",\n  \"events\": [\"crew_member.created\", \"appraisal.completed\"],\n  \"secret\": \"your_webhook_secret\"\n}\n</code></pre></p>"},{"location":"reference/faq/#q-how-do-i-integrate-with-our-hr-system","title":"Q: How do I integrate with our HR system?","text":"<p>A: Common integration patterns:</p> <ol> <li>Pull updates regularly using the <code>/api/v1/crew-members</code> endpoint with <code>updated_since</code> parameter</li> <li>Push changes to the API when your HR system data changes</li> <li>Use webhooks for real-time notifications</li> <li>Sync user accounts with the <code>/api/v1/users</code> endpoint</li> </ol>"},{"location":"reference/faq/#q-can-i-export-data","title":"Q: Can I export data?","text":"<p>A: Yes, several export formats are available:</p> <pre><code>GET /api/v1/crew-members/export?format=csv\nGET /api/v1/crew-members/export?format=excel\nGET /api/v1/crew-members/export?format=pdf\n</code></pre> <p>Export options: - CSV: Structured data export - Excel: Formatted spreadsheet with multiple sheets - PDF: Formatted reports</p>"},{"location":"reference/faq/#q-how-do-i-handle-time-zones","title":"Q: How do I handle time zones?","text":"<p>A: All timestamps are in UTC. Convert to local time zones in your application:</p> <pre><code>{\n  \"created_at\": \"2024-09-26T10:30:00Z\",\n  \"timezone\": \"UTC\"\n}\n</code></pre>"},{"location":"reference/faq/#performance-optimization","title":"Performance &amp; Optimization","text":""},{"location":"reference/faq/#q-how-can-i-improve-api-response-times","title":"Q: How can I improve API response times?","text":"<p>A: Several optimization strategies:</p> <ol> <li> <p>Use field selection: Request only needed fields <pre><code>GET /api/v1/crew-members?fields=id,first_name,last_name,email\n</code></pre></p> </li> <li> <p>Implement caching: Cache frequently accessed data</p> </li> <li>Use pagination: Don't request all records at once</li> <li>Batch requests: Combine multiple operations where possible</li> </ol>"},{"location":"reference/faq/#q-whats-the-maximum-request-size","title":"Q: What's the maximum request size?","text":"<p>A: - JSON payload: 10MB - File upload: 10MB per file - Bulk operations: 1000 records maximum</p>"},{"location":"reference/faq/#q-are-there-any-query-optimization-tips","title":"Q: Are there any query optimization tips?","text":"<p>A: - Use specific filters to reduce result sets - Sort by indexed fields (id, email, employee_id) - Use date ranges instead of open-ended queries - Avoid deep pagination (use cursors for large datasets)</p>"},{"location":"reference/faq/#q-how-do-i-handle-large-datasets","title":"Q: How do I handle large datasets?","text":"<p>A: For large datasets:</p> <ol> <li> <p>Use cursor-based pagination: <pre><code>GET /api/v1/crew-members?cursor=abc123&amp;limit=100\n</code></pre></p> </li> <li> <p>Use streaming exports for large data exports</p> </li> <li>Filter aggressively to reduce dataset size</li> <li>Process in smaller batches</li> </ol>"},{"location":"reference/faq/#error-handling","title":"Error Handling","text":""},{"location":"reference/faq/#q-how-should-i-handle-api-errors","title":"Q: How should I handle API errors?","text":"<p>A: Implement proper error handling:</p> <pre><code>try {\n  const response = await fetch('/api/v1/crew-members', {\n    method: 'POST',\n    headers: {\n      'Authorization': 'Bearer ' + token,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(crewMemberData)\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    console.error('API Error:', error.error.code, error.error.message);\n\n    // Handle specific errors\n    switch (error.error.code) {\n      case 'AUTH_TOKEN_EXPIRED':\n        // Refresh token and retry\n        break;\n      case 'VALIDATION_DUPLICATE_VALUE':\n        // Show user-friendly message\n        break;\n      case 'BUSINESS_CERTIFICATE_EXPIRED':\n        // Prompt for certificate renewal\n        break;\n      default:\n        // Generic error handling\n    }\n  }\n} catch (networkError) {\n  // Handle network errors\n}\n</code></pre>"},{"location":"reference/faq/#q-should-i-retry-failed-requests","title":"Q: Should I retry failed requests?","text":"<p>A: Yes, but selectively:</p> <ul> <li>Retry: 429 (rate limited), 500, 502, 503, 504</li> <li>Don't retry: 400, 401, 403, 404, 409, 422</li> <li>Use exponential backoff with jitter</li> <li>Maximum 3 retry attempts</li> </ul>"},{"location":"reference/faq/#q-how-do-i-debug-api-issues","title":"Q: How do I debug API issues?","text":"<p>A: Use the request ID from error responses:</p> <pre><code>{\n  \"error\": {\n    \"request_id\": \"req_123456789\"\n  }\n}\n</code></pre> <p>Include this ID when reporting issues for faster resolution.</p>"},{"location":"reference/faq/#security-compliance","title":"Security &amp; Compliance","text":""},{"location":"reference/faq/#q-how-is-sensitive-data-protected","title":"Q: How is sensitive data protected?","text":"<p>A: Multiple security measures:</p> <ul> <li>Encryption: All data encrypted at rest and in transit</li> <li>Access control: Role-based permissions</li> <li>Audit logging: All operations logged</li> <li>Data masking: Sensitive fields masked in logs</li> <li>Regular security scans: Automated vulnerability testing</li> </ul>"},{"location":"reference/faq/#q-are-there-compliance-features","title":"Q: Are there compliance features?","text":"<p>A: Yes, built-in compliance support:</p> <ul> <li>GDPR: Data export, deletion, consent tracking</li> <li>Maritime regulations: STCW compliance checking</li> <li>Audit trails: Complete operation history</li> <li>Data retention: Configurable retention policies</li> </ul>"},{"location":"reference/faq/#q-how-do-i-report-security-issues","title":"Q: How do I report security issues?","text":"<p>A: For security issues: 1. Don't create public issues 2. Email security@company.com 3. Include detailed reproduction steps 4. We'll respond within 24 hours</p>"},{"location":"reference/faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"reference/faq/#q-why-am-i-getting-resource-not-found-errors","title":"Q: Why am I getting \"Resource not found\" errors?","text":"<p>A: Common causes:</p> <ol> <li>Incorrect ID: Check the resource ID format (UUID)</li> <li>Soft deleted: Resource may be soft deleted</li> <li>Permission issue: You may not have access to the resource</li> <li>Wrong endpoint: Verify the correct endpoint URL</li> </ol>"},{"location":"reference/faq/#q-why-are-my-webhook-deliveries-failing","title":"Q: Why are my webhook deliveries failing?","text":"<p>A: Check webhook requirements:</p> <ol> <li>HTTPS endpoint: Webhooks only deliver to HTTPS URLs</li> <li>Response time: Endpoint must respond within 10 seconds</li> <li>Status code: Return 2xx status code for success</li> <li>Signature verification: Verify the webhook signature</li> </ol>"},{"location":"reference/faq/#q-how-do-i-handle-certificate-expiry-notifications","title":"Q: How do I handle certificate expiry notifications?","text":"<p>A: Certificate management workflow:</p> <ol> <li>Monitor expiry dates: Use the certificates endpoint</li> <li>Set up alerts: Configure renewal alerts (default 90 days)</li> <li>Renewal process: Update certificates before expiry</li> <li>Compliance checking: System blocks assignments with expired certificates</li> </ol>"},{"location":"reference/faq/#q-what-if-i-hit-rate-limits-frequently","title":"Q: What if I hit rate limits frequently?","text":"<p>A: Optimize your usage:</p> <ol> <li>Implement caching: Reduce duplicate requests</li> <li>Use batch operations: Combine multiple operations</li> <li>Spread requests: Don't burst all requests at once</li> <li>Contact support: For higher limits if needed</li> </ol>"},{"location":"reference/faq/#q-how-do-i-migrate-from-another-crew-management-system","title":"Q: How do I migrate from another crew management system?","text":"<p>A: Migration checklist:</p> <ol> <li>Data mapping: Map your data to our schema</li> <li>User accounts: Create user accounts first</li> <li>Bulk import: Use CSV import for crew members</li> <li>Certificates: Upload certificate documents</li> <li>Historical data: Import historical appraisals</li> <li>Integration testing: Test all workflows thoroughly</li> </ol>"},{"location":"reference/faq/#q-why-are-some-fields-read-only","title":"Q: Why are some fields read-only?","text":"<p>A: Read-only fields are:</p> <ul> <li>System generated: ID, timestamps</li> <li>Calculated: Overall scores, current crew count</li> <li>Audit fields: Created by, updated by</li> <li>Protected data: Some fields require special permissions</li> </ul>"},{"location":"reference/faq/#q-how-do-i-get-support","title":"Q: How do I get support?","text":"<p>A: Support channels:</p> <ol> <li>Documentation: Check API docs and this FAQ first</li> <li>GitHub Issues: For bugs and feature requests</li> <li>Email support: support@company.com</li> <li>Emergency contact: For critical production issues</li> </ol> <p>Include this information in support requests: - API endpoint and HTTP method - Request/response bodies - Error codes and messages - Request ID from error response - Your user role and permissions</p>"},{"location":"reference/faq/#additional-resources","title":"Additional Resources","text":"<ul> <li>API Documentation - Complete API reference</li> <li>Data Models - Data structure documentation</li> <li>Error Codes - Comprehensive error reference</li> <li>Authentication Guide - Detailed auth setup</li> <li>Integration Examples - Code samples and patterns</li> </ul> <p>For questions not covered here, please contact our support team with specific details about your use case.</p>"},{"location":"testing/","title":"Testing Strategy","text":"<p>The Crew Appraisals System follows a comprehensive testing strategy built around Test-Driven Development (TDD) principles, ensuring high code quality and reliable functionality.</p>"},{"location":"testing/#overview","title":"Overview","text":"<p>Our testing approach is designed to:</p> <ul> <li>Prevent bugs before they reach production</li> <li>Document behavior through executable specifications</li> <li>Enable confident refactoring with comprehensive test coverage</li> <li>Support continuous integration with automated test execution</li> <li>Maintain code quality through test-first development</li> </ul>"},{"location":"testing/#test-driven-development-tdd","title":"Test-Driven Development (TDD)","text":"<p>We follow the classic Red-Green-Refactor cycle:</p> <ol> <li>Red: Write a failing test that describes the desired behavior</li> <li>Green: Write the minimal code to make the test pass</li> <li>Refactor: Improve the code while keeping tests passing</li> </ol> <p>See our TDD Guide for detailed practices and examples.</p>"},{"location":"testing/#test-pyramid","title":"Test Pyramid","text":"<p>Our testing strategy follows the test pyramid principle, emphasizing different types of tests:</p> <pre><code>graph TD\n    A[E2E Tests&lt;br/&gt;Few, High-level] --&gt; B[Integration Tests&lt;br/&gt;Some, Cross-component]\n    B --&gt; C[Contract Tests&lt;br/&gt;API Validation]\n    C --&gt; D[Unit Tests&lt;br/&gt;Many, Fast, Isolated]</code></pre>"},{"location":"testing/#unit-tests-foundation","title":"Unit Tests (Foundation)","text":"<ul> <li>80% of test suite</li> <li>Fast execution (&lt; 1ms per test)</li> <li>Isolated components testing</li> <li>Mock external dependencies</li> <li>High code coverage target: 95%+</li> </ul>"},{"location":"testing/#integration-tests-middle-layer","title":"Integration Tests (Middle Layer)","text":"<ul> <li>15% of test suite</li> <li>Database integration testing</li> <li>Service layer interactions</li> <li>External API integrations</li> <li>Redis caching behavior</li> </ul>"},{"location":"testing/#contract-tests-api-validation","title":"Contract Tests (API Validation)","text":"<ul> <li>3% of test suite</li> <li>OpenAPI specification validation</li> <li>Request/response format verification</li> <li>API contract compliance</li> <li>Cross-service communication validation</li> </ul> <p>See our Contract Testing Guide for implementation details.</p>"},{"location":"testing/#end-to-end-tests-top-layer","title":"End-to-End Tests (Top Layer)","text":"<ul> <li>2% of test suite</li> <li>Full user journey testing</li> <li>Browser automation</li> <li>Production-like environment</li> <li>Critical path validation</li> </ul>"},{"location":"testing/#testing-tools-framework","title":"Testing Tools &amp; Framework","text":""},{"location":"testing/#core-testing-stack","title":"Core Testing Stack","text":"Tool Purpose Usage pytest Test framework Primary test runner and assertion library pytest-asyncio Async testing Testing async/await functions and coroutines pytest-cov Coverage analysis Code coverage measurement and reporting testcontainers Integration testing Containerized test dependencies (PostgreSQL, Redis) factory-boy Test data generation Creating realistic test fixtures faker Mock data Generating fake but realistic test data httpx HTTP testing Testing FastAPI endpoints and external APIs"},{"location":"testing/#development-tools","title":"Development Tools","text":"Tool Purpose Usage black Code formatting Consistent Python code style isort Import sorting Organized import statements flake8 Linting Code quality and style checking mypy Type checking Static type analysis locust Load testing Performance and stress testing"},{"location":"testing/#test-coverage-goals","title":"Test Coverage Goals","text":""},{"location":"testing/#coverage-targets","title":"Coverage Targets","text":"<ul> <li>Overall Coverage: 95% minimum</li> <li>Unit Tests: 98% minimum</li> <li>Critical Paths: 100% required</li> <li>New Features: 100% required before merge</li> </ul>"},{"location":"testing/#coverage-exclusions","title":"Coverage Exclusions","text":"<ul> <li>Configuration files</li> <li>Database migration files</li> <li>Third-party integrations (tested via contract tests)</li> <li>Development-only utilities</li> </ul>"},{"location":"testing/#coverage-reporting","title":"Coverage Reporting","text":"<pre><code># Generate coverage report\npytest --cov=src --cov-report=html --cov-report=term-missing\n\n# View coverage report\nopen htmlcov/index.html\n</code></pre>"},{"location":"testing/#test-organization","title":"Test Organization","text":""},{"location":"testing/#directory-structure","title":"Directory Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/                  # Unit tests (isolated components)\n\u2502   \u251c\u2500\u2500 test_models.py\n\u2502   \u251c\u2500\u2500 test_services.py\n\u2502   \u251c\u2500\u2500 test_utils.py\n\u2502   \u2514\u2500\u2500 api/\n\u2502       \u251c\u2500\u2500 test_auth.py\n\u2502       \u251c\u2500\u2500 test_crews.py\n\u2502       \u2514\u2500\u2500 test_appraisals.py\n\u251c\u2500\u2500 integration/           # Integration tests (cross-component)\n\u2502   \u251c\u2500\u2500 test_database.py\n\u2502   \u251c\u2500\u2500 test_redis.py\n\u2502   \u2514\u2500\u2500 test_external_apis.py\n\u251c\u2500\u2500 contract/             # Contract tests (API validation)\n\u2502   \u251c\u2500\u2500 test_openapi_spec.py\n\u2502   \u251c\u2500\u2500 test_request_validation.py\n\u2502   \u2514\u2500\u2500 test_response_schemas.py\n\u251c\u2500\u2500 e2e/                  # End-to-end tests\n\u2502   \u251c\u2500\u2500 test_user_flows.py\n\u2502   \u2514\u2500\u2500 test_critical_paths.py\n\u251c\u2500\u2500 fixtures/             # Test data and fixtures\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 conftest.py\n\u2502   \u2514\u2500\u2500 factories.py\n\u2514\u2500\u2500 utils/                # Test utilities\n    \u251c\u2500\u2500 helpers.py\n    \u2514\u2500\u2500 mocks.py\n</code></pre>"},{"location":"testing/#test-naming-conventions","title":"Test Naming Conventions","text":"<ul> <li>Unit Tests: <code>test_&lt;function_name&gt;_&lt;scenario&gt;</code></li> <li>Integration Tests: <code>test_&lt;feature&gt;_integration</code></li> <li>Contract Tests: <code>test_&lt;endpoint&gt;_contract</code></li> <li>E2E Tests: <code>test_&lt;user_flow&gt;_e2e</code></li> </ul> <p>Examples: <pre><code>def test_create_crew_member_with_valid_data()\ndef test_create_crew_member_with_duplicate_email_raises_error()\ndef test_authentication_integration()\ndef test_post_crews_endpoint_contract()\ndef test_complete_appraisal_workflow_e2e()\n</code></pre></p>"},{"location":"testing/#test-execution","title":"Test Execution","text":""},{"location":"testing/#local-development","title":"Local Development","text":"<pre><code># Run all tests\npytest\n\n# Run specific test category\npytest tests/unit/          # Unit tests only\npytest tests/integration/   # Integration tests only\npytest tests/contract/      # Contract tests only\n\n# Run with coverage\npytest --cov=src --cov-report=term-missing\n\n# Run specific test file\npytest tests/unit/test_models.py\n\n# Run specific test function\npytest tests/unit/test_models.py::test_crew_model_creation\n</code></pre>"},{"location":"testing/#docker-environment","title":"Docker Environment","text":"<pre><code># Run tests in Docker\ndocker compose -f docker-compose.yaml run --rm backend pytest\n\n# Run with coverage in Docker\ndocker compose -f docker-compose.yaml run --rm backend \\\n  pytest --cov=src --cov-report=term-missing\n\n# Run specific test target\ndocker compose -f docker-compose.yaml build testing\ndocker compose -f docker-compose.yaml run --rm testing\n</code></pre>"},{"location":"testing/#continuous-integration","title":"Continuous Integration","text":"<p>Tests are automatically executed on:</p> <ul> <li>Every commit (pre-commit hooks)</li> <li>Pull request creation (full test suite)</li> <li>Main branch updates (full test suite + integration tests)</li> <li>Release builds (full test suite + e2e tests)</li> </ul>"},{"location":"testing/#test-data-management","title":"Test Data Management","text":""},{"location":"testing/#test-database","title":"Test Database","text":"<ul> <li>Isolated test database per test session</li> <li>Automatic cleanup between tests</li> <li>Database migrations applied automatically</li> <li>Testcontainers for integration tests</li> </ul>"},{"location":"testing/#test-fixtures","title":"Test Fixtures","text":"<ul> <li>Factory Pattern: Using factory-boy for object creation</li> <li>Realistic Data: Faker for generating test data</li> <li>Consistent State: pytest fixtures for setup/teardown</li> <li>Data Isolation: Each test gets clean state</li> </ul>"},{"location":"testing/#example-test-structure","title":"Example Test Structure","text":"<pre><code>import pytest\nfrom httpx import AsyncClient\nfrom tests.fixtures.factories import CrewMemberFactory\n\n@pytest.mark.asyncio\nasync def test_create_crew_member_success(async_client: AsyncClient):\n    \"\"\"Test successful crew member creation.\"\"\"\n    # Arrange\n    crew_data = CrewMemberFactory.build_dict()\n\n    # Act\n    response = await async_client.post(\"/api/v1/crew-members\", json=crew_data)\n\n    # Assert\n    assert response.status_code == 201\n    assert response.json()[\"email\"] == crew_data[\"email\"]\n</code></pre>"},{"location":"testing/#performance-testing","title":"Performance Testing","text":""},{"location":"testing/#load-testing-with-locust","title":"Load Testing with Locust","text":"<pre><code>from locust import HttpUser, task\n\nclass CrewAppraisalsUser(HttpUser):\n    @task\n    def get_crew_members(self):\n        self.client.get(\"/api/v1/crew-members\")\n\n    @task(3)\n    def create_appraisal(self):\n        self.client.post(\"/api/v1/appraisals\", json={...})\n</code></pre> <p>Run load tests: <pre><code># Local load testing\nlocust -f tests/performance/locustfile.py --host=http://localhost:8000\n\n# Docker load testing\ndocker compose -f docker-compose.yaml run --rm locust\n</code></pre></p>"},{"location":"testing/#best-practices","title":"Best Practices","text":""},{"location":"testing/#test-writing-guidelines","title":"Test Writing Guidelines","text":"<ol> <li>Test Behavior, Not Implementation: Focus on what the code should do, not how</li> <li>One Assertion Per Test: Each test should verify one specific behavior</li> <li>Clear Test Names: Test names should describe the scenario and expected outcome</li> <li>Arrange-Act-Assert: Structure tests with clear setup, execution, and verification</li> <li>Fast and Deterministic: Tests should run quickly and produce consistent results</li> </ol>"},{"location":"testing/#common-patterns","title":"Common Patterns","text":"<pre><code># Good: Testing behavior\ndef test_invalid_email_returns_validation_error():\n    with pytest.raises(ValidationError):\n        CrewMember(email=\"invalid-email\")\n\n# Good: Clear test structure\n@pytest.mark.asyncio\nasync def test_get_crew_member_by_id_returns_member():\n    # Arrange\n    member = await CrewMemberFactory.create()\n\n    # Act\n    result = await crew_service.get_by_id(member.id)\n\n    # Assert\n    assert result.id == member.id\n    assert result.email == member.email\n</code></pre>"},{"location":"testing/#continuous-improvement","title":"Continuous Improvement","text":"<ul> <li>Regular Review: Weekly test suite analysis</li> <li>Flaky Test Tracking: Monitor and fix unstable tests</li> <li>Coverage Monitoring: Track coverage trends over time</li> <li>Performance Metrics: Monitor test execution times</li> </ul>"},{"location":"testing/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Set up development environment:    <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Run your first test:    <pre><code>pytest tests/unit/test_models.py -v\n</code></pre></p> </li> <li> <p>Check coverage:    <pre><code>pytest --cov=src --cov-report=html\n</code></pre></p> </li> <li> <p>Follow TDD workflow:</p> </li> <li>Write failing test</li> <li>Implement minimal code</li> <li>Refactor and improve</li> </ol> <p>For detailed TDD practices, see our TDD Guide.</p>"},{"location":"testing/contract/","title":"Contract Testing Guide","text":"<p>Contract testing validates the interfaces between services, ensuring that APIs meet their documented specifications and that consumers can safely interact with providers. In the Crew Appraisals System, contract testing focuses on OpenAPI specification validation and request/response format compliance.</p>"},{"location":"testing/contract/#overview","title":"Overview","text":"<p>Contract testing sits between unit and integration testing in our test pyramid, providing:</p> <ul> <li>API Specification Compliance: Ensuring endpoints match OpenAPI documentation</li> <li>Request/Response Validation: Verifying data formats and schemas</li> <li>Backward Compatibility: Detecting breaking changes in APIs</li> <li>Cross-Service Communication: Validating service interactions</li> <li>Documentation Accuracy: Keeping API docs synchronized with implementation</li> </ul>"},{"location":"testing/contract/#contract-testing-strategy","title":"Contract Testing Strategy","text":"<pre><code>graph TB\n    A[OpenAPI Specification] --&gt; B[Contract Tests]\n    B --&gt; C[Request Validation]\n    B --&gt; D[Response Validation]\n    B --&gt; E[Schema Compliance]\n    C --&gt; F[Test Results]\n    D --&gt; F\n    E --&gt; F</code></pre>"},{"location":"testing/contract/#provider-side-testing","title":"Provider-Side Testing","text":"<ul> <li>Validate that our API implementation matches the OpenAPI specification</li> <li>Ensure all endpoints return responses in the documented format</li> <li>Verify error responses follow the specified schemas</li> </ul>"},{"location":"testing/contract/#consumer-side-testing","title":"Consumer-Side Testing","text":"<ul> <li>Test that client code can handle all documented response formats</li> <li>Validate request generation matches API expectations</li> <li>Ensure proper error handling for documented error responses</li> </ul>"},{"location":"testing/contract/#openapi-contract-validation","title":"OpenAPI Contract Validation","text":""},{"location":"testing/contract/#openapi-specification","title":"OpenAPI Specification","text":"<p>Our API specification serves as the contract between frontend and backend:</p> <pre><code># openapi.yaml (excerpt)\nopenapi: 3.0.3\ninfo:\n  title: Crew Appraisals API\n  version: 1.0.0\n  description: REST API for managing crew appraisals and performance reviews\n\npaths:\n  /api/v1/crew-members:\n    post:\n      summary: Create a new crew member\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CrewMemberCreate'\n      responses:\n        '201':\n          description: Crew member created successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CrewMember'\n        '400':\n          description: Validation error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n\ncomponents:\n  schemas:\n    CrewMemberCreate:\n      type: object\n      required:\n        - name\n        - email\n        - rank\n      properties:\n        name:\n          type: string\n          minLength: 1\n          maxLength: 100\n        email:\n          type: string\n          format: email\n        rank:\n          type: string\n          enum: [Able Seaman, Bosun, Chief Engineer, Captain]\n</code></pre>"},{"location":"testing/contract/#contract-test-implementation","title":"Contract Test Implementation","text":"<pre><code># tests/contract/test_crew_members_contract.py\nimport pytest\nfrom httpx import AsyncClient\nfrom openapi_spec_validator import validate_spec\nfrom openapi_core import create_spec\nfrom openapi_core.validation.request.validators import RequestValidator\nfrom openapi_core.validation.response.validators import ResponseValidator\nimport yaml\n\nclass TestCrewMembersContract:\n    \"\"\"Contract tests for crew members API.\"\"\"\n\n    @pytest.fixture\n    def openapi_spec(self):\n        \"\"\"Load OpenAPI specification.\"\"\"\n        with open(\"openapi.yaml\", \"r\") as f:\n            spec_dict = yaml.safe_load(f)\n        validate_spec(spec_dict)  # Validate spec is valid OpenAPI\n        return create_spec(spec_dict)\n\n    @pytest.mark.asyncio\n    async def test_create_crew_member_request_contract(self, async_client, openapi_spec):\n        \"\"\"Test that create crew member request matches OpenAPI spec.\"\"\"\n        # Arrange\n        request_data = {\n            \"name\": \"John Doe\",\n            \"email\": \"john.doe@example.com\",\n            \"rank\": \"Able Seaman\"\n        }\n\n        # Act\n        response = await async_client.post(\n            \"/api/v1/crew-members\",\n            json=request_data,\n            headers={\"Content-Type\": \"application/json\"}\n        )\n\n        # Assert - Validate request against OpenAPI spec\n        validator = RequestValidator(openapi_spec)\n        request = self._build_openapi_request(\"POST\", \"/api/v1/crew-members\", request_data)\n        result = validator.validate(request)\n\n        assert not result.errors, f\"Request validation errors: {result.errors}\"\n\n    @pytest.mark.asyncio\n    async def test_create_crew_member_response_contract(self, async_client, openapi_spec):\n        \"\"\"Test that create crew member response matches OpenAPI spec.\"\"\"\n        # Arrange\n        request_data = {\n            \"name\": \"Jane Smith\",\n            \"email\": \"jane.smith@example.com\",\n            \"rank\": \"Bosun\"\n        }\n\n        # Act\n        response = await async_client.post(\"/api/v1/crew-members\", json=request_data)\n\n        # Assert - Validate response against OpenAPI spec\n        validator = ResponseValidator(openapi_spec)\n        openapi_response = self._build_openapi_response(response)\n        request = self._build_openapi_request(\"POST\", \"/api/v1/crew-members\", request_data)\n\n        result = validator.validate(request, openapi_response)\n        assert not result.errors, f\"Response validation errors: {result.errors}\"\n\n        # Additional assertions for successful creation\n        assert response.status_code == 201\n        response_data = response.json()\n        assert \"id\" in response_data\n        assert response_data[\"name\"] == request_data[\"name\"]\n        assert response_data[\"email\"] == request_data[\"email\"]\n\n    @pytest.mark.asyncio\n    async def test_create_crew_member_validation_error_contract(self, async_client, openapi_spec):\n        \"\"\"Test that validation errors match OpenAPI spec.\"\"\"\n        # Arrange - Invalid data\n        request_data = {\n            \"name\": \"\",  # Invalid: empty name\n            \"email\": \"invalid-email\",  # Invalid: bad email format\n            \"rank\": \"Invalid Rank\"  # Invalid: not in enum\n        }\n\n        # Act\n        response = await async_client.post(\"/api/v1/crew-members\", json=request_data)\n\n        # Assert\n        assert response.status_code == 400\n\n        # Validate error response format\n        validator = ResponseValidator(openapi_spec)\n        openapi_response = self._build_openapi_response(response)\n        request = self._build_openapi_request(\"POST\", \"/api/v1/crew-members\", request_data)\n\n        result = validator.validate(request, openapi_response)\n        assert not result.errors, f\"Error response validation errors: {result.errors}\"\n\n        # Verify error structure\n        error_data = response.json()\n        assert \"detail\" in error_data\n        assert isinstance(error_data[\"detail\"], list)\n\n    def _build_openapi_request(self, method, path, data):\n        \"\"\"Build OpenAPI request object for validation.\"\"\"\n        from openapi_core.contrib.requests import RequestsOpenAPIRequest\n        import requests\n\n        # Create a requests.Request object\n        req = requests.Request(\n            method=method,\n            url=f\"http://test{path}\",\n            json=data,\n            headers={\"Content-Type\": \"application/json\"}\n        )\n        prepared = req.prepare()\n        return RequestsOpenAPIRequest(prepared)\n\n    def _build_openapi_response(self, httpx_response):\n        \"\"\"Build OpenAPI response object for validation.\"\"\"\n        from openapi_core.contrib.requests import RequestsOpenAPIResponse\n        import requests\n\n        # Convert HTTPX response to requests-like response\n        response = requests.Response()\n        response.status_code = httpx_response.status_code\n        response.headers.update(httpx_response.headers)\n        response._content = httpx_response.content\n        return RequestsOpenAPIResponse(response)\n</code></pre>"},{"location":"testing/contract/#requestresponse-validation","title":"Request/Response Validation","text":""},{"location":"testing/contract/#schema-based-validation","title":"Schema-Based Validation","text":"<pre><code># tests/contract/test_schema_validation.py\nimport pytest\nfrom pydantic import ValidationError\nfrom src.schemas.crew_member import CrewMemberCreate, CrewMemberResponse\n\nclass TestSchemaValidation:\n    \"\"\"Test Pydantic schema validation against OpenAPI schemas.\"\"\"\n\n    def test_crew_member_create_schema_validation(self):\n        \"\"\"Test CrewMemberCreate schema validates correctly.\"\"\"\n        # Valid data\n        valid_data = {\n            \"name\": \"Test User\",\n            \"email\": \"test@example.com\",\n            \"rank\": \"Able Seaman\"\n        }\n\n        schema = CrewMemberCreate(**valid_data)\n        assert schema.name == \"Test User\"\n        assert schema.email == \"test@example.com\"\n        assert schema.rank == \"Able Seaman\"\n\n    def test_crew_member_create_schema_validation_errors(self):\n        \"\"\"Test CrewMemberCreate schema validation errors.\"\"\"\n        test_cases = [\n            # Missing required fields\n            ({\"name\": \"Test\"}, \"email\"),\n            ({\"email\": \"test@example.com\"}, \"name\"),\n\n            # Invalid data types\n            ({\"name\": 123, \"email\": \"test@example.com\", \"rank\": \"Able Seaman\"}, \"name\"),\n\n            # Invalid email format\n            ({\"name\": \"Test\", \"email\": \"invalid\", \"rank\": \"Able Seaman\"}, \"email\"),\n\n            # Invalid enum value\n            ({\"name\": \"Test\", \"email\": \"test@example.com\", \"rank\": \"Invalid\"}, \"rank\"),\n\n            # String length constraints\n            ({\"name\": \"\", \"email\": \"test@example.com\", \"rank\": \"Able Seaman\"}, \"name\"),\n            ({\"name\": \"x\" * 101, \"email\": \"test@example.com\", \"rank\": \"Able Seaman\"}, \"name\"),\n        ]\n\n        for invalid_data, expected_field in test_cases:\n            with pytest.raises(ValidationError) as exc_info:\n                CrewMemberCreate(**invalid_data)\n\n            errors = exc_info.value.errors()\n            error_fields = [error[\"loc\"][0] for error in errors]\n            assert expected_field in error_fields\n\n    def test_crew_member_response_schema(self):\n        \"\"\"Test CrewMemberResponse schema.\"\"\"\n        response_data = {\n            \"id\": 1,\n            \"name\": \"Test User\",\n            \"email\": \"test@example.com\",\n            \"rank\": \"Able Seaman\",\n            \"created_at\": \"2024-01-01T00:00:00Z\",\n            \"updated_at\": \"2024-01-01T00:00:00Z\"\n        }\n\n        schema = CrewMemberResponse(**response_data)\n        assert schema.id == 1\n        assert schema.created_at is not None\n        assert schema.updated_at is not None\n</code></pre>"},{"location":"testing/contract/#json-schema-validation","title":"JSON Schema Validation","text":"<pre><code># tests/contract/test_json_schema.py\nimport json\nimport jsonschema\nimport pytest\n\nclass TestJSONSchemaValidation:\n    \"\"\"Test responses against JSON schemas derived from OpenAPI.\"\"\"\n\n    @pytest.fixture\n    def crew_member_schema(self):\n        \"\"\"JSON schema for crew member response.\"\"\"\n        return {\n            \"type\": \"object\",\n            \"required\": [\"id\", \"name\", \"email\", \"rank\", \"created_at\"],\n            \"properties\": {\n                \"id\": {\"type\": \"integer\", \"minimum\": 1},\n                \"name\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 100},\n                \"email\": {\"type\": \"string\", \"format\": \"email\"},\n                \"rank\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"Able Seaman\", \"Bosun\", \"Chief Engineer\", \"Captain\"]\n                },\n                \"created_at\": {\"type\": \"string\", \"format\": \"date-time\"},\n                \"updated_at\": {\"type\": \"string\", \"format\": \"date-time\"}\n            },\n            \"additionalProperties\": false\n        }\n\n    @pytest.mark.asyncio\n    async def test_crew_member_response_json_schema(self, async_client, crew_member_schema):\n        \"\"\"Test crew member response against JSON schema.\"\"\"\n        # Arrange\n        request_data = {\n            \"name\": \"Schema Test User\",\n            \"email\": \"schema.test@example.com\",\n            \"rank\": \"Chief Engineer\"\n        }\n\n        # Act\n        response = await async_client.post(\"/api/v1/crew-members\", json=request_data)\n\n        # Assert\n        assert response.status_code == 201\n\n        response_data = response.json()\n        try:\n            jsonschema.validate(response_data, crew_member_schema)\n        except jsonschema.ValidationError as e:\n            pytest.fail(f\"Response doesn't match JSON schema: {e.message}\")\n\n    def test_validation_error_schema(self):\n        \"\"\"Test validation error response schema.\"\"\"\n        error_schema = {\n            \"type\": \"object\",\n            \"required\": [\"detail\"],\n            \"properties\": {\n                \"detail\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"required\": [\"type\", \"loc\", \"msg\"],\n                        \"properties\": {\n                            \"type\": {\"type\": \"string\"},\n                            \"loc\": {\"type\": \"array\"},\n                            \"msg\": {\"type\": \"string\"}\n                        }\n                    }\n                }\n            }\n        }\n\n        # Example validation error response\n        error_response = {\n            \"detail\": [\n                {\n                    \"type\": \"value_error\",\n                    \"loc\": [\"body\", \"email\"],\n                    \"msg\": \"invalid email format\"\n                }\n            ]\n        }\n\n        jsonschema.validate(error_response, error_schema)\n</code></pre>"},{"location":"testing/contract/#contract-test-examples","title":"Contract Test Examples","text":""},{"location":"testing/contract/#api-endpoint-contract-tests","title":"API Endpoint Contract Tests","text":"<pre><code># tests/contract/test_appraisals_contract.py\n@pytest.mark.asyncio\nasync def test_create_appraisal_contract(async_client, openapi_spec):\n    \"\"\"Test appraisal creation contract.\"\"\"\n    # First create a crew member\n    crew_member_data = {\n        \"name\": \"Test Appraisee\",\n        \"email\": \"appraisee@example.com\",\n        \"rank\": \"Able Seaman\"\n    }\n    member_response = await async_client.post(\"/api/v1/crew-members\", json=crew_member_data)\n    member_id = member_response.json()[\"id\"]\n\n    # Create appraisal\n    appraisal_data = {\n        \"appraisee_id\": member_id,\n        \"appraiser_id\": member_id,  # Self-appraisal for simplicity\n        \"review_period_start\": \"2024-01-01\",\n        \"review_period_end\": \"2024-06-30\",\n        \"overall_rating\": 4,\n        \"technical_skills\": 4,\n        \"communication\": 3,\n        \"leadership\": 4,\n        \"comments\": \"Good performance overall.\"\n    }\n\n    # Act\n    response = await async_client.post(\"/api/v1/appraisals\", json=appraisal_data)\n\n    # Assert\n    assert response.status_code == 201\n\n    # Validate against OpenAPI contract\n    response_data = response.json()\n    expected_fields = [\n        \"id\", \"appraisee_id\", \"appraiser_id\", \"review_period_start\",\n        \"review_period_end\", \"overall_rating\", \"status\", \"created_at\"\n    ]\n\n    for field in expected_fields:\n        assert field in response_data, f\"Missing required field: {field}\"\n\n    # Validate data types and constraints\n    assert isinstance(response_data[\"id\"], int)\n    assert response_data[\"overall_rating\"] &gt;= 1\n    assert response_data[\"overall_rating\"] &lt;= 5\n    assert response_data[\"status\"] in [\"draft\", \"submitted\", \"approved\"]\n\n@pytest.mark.asyncio\nasync def test_get_appraisals_pagination_contract(async_client):\n    \"\"\"Test pagination contract for appraisals list.\"\"\"\n    # Act\n    response = await async_client.get(\"/api/v1/appraisals?page=1&amp;size=10\")\n\n    # Assert\n    assert response.status_code == 200\n\n    response_data = response.json()\n\n    # Validate pagination structure\n    required_pagination_fields = [\"items\", \"total\", \"page\", \"size\", \"pages\"]\n    for field in required_pagination_fields:\n        assert field in response_data, f\"Missing pagination field: {field}\"\n\n    # Validate pagination constraints\n    assert isinstance(response_data[\"items\"], list)\n    assert isinstance(response_data[\"total\"], int)\n    assert isinstance(response_data[\"page\"], int)\n    assert isinstance(response_data[\"size\"], int)\n    assert isinstance(response_data[\"pages\"], int)\n\n    assert response_data[\"page\"] &gt;= 1\n    assert response_data[\"size\"] &gt;= 1\n    assert response_data[\"total\"] &gt;= 0\n    assert response_data[\"pages\"] &gt;= 0\n</code></pre>"},{"location":"testing/contract/#error-response-contract-tests","title":"Error Response Contract Tests","text":"<pre><code># tests/contract/test_error_contracts.py\n@pytest.mark.asyncio\nasync def test_404_error_contract(async_client):\n    \"\"\"Test 404 error response contract.\"\"\"\n    # Act\n    response = await async_client.get(\"/api/v1/crew-members/999999\")\n\n    # Assert\n    assert response.status_code == 404\n\n    error_data = response.json()\n    assert \"detail\" in error_data\n    assert error_data[\"detail\"] == \"Crew member not found\"\n\n@pytest.mark.asyncio\nasync def test_422_validation_error_contract(async_client):\n    \"\"\"Test 422 validation error response contract.\"\"\"\n    # Act - Send invalid data\n    invalid_data = {\n        \"name\": \"\",  # Invalid: empty name\n        \"email\": \"not-an-email\",  # Invalid: bad email format\n        \"rank\": \"Invalid Rank\"  # Invalid: not in enum\n    }\n\n    response = await async_client.post(\"/api/v1/crew-members\", json=invalid_data)\n\n    # Assert\n    assert response.status_code == 422\n\n    error_data = response.json()\n    assert \"detail\" in error_data\n    assert isinstance(error_data[\"detail\"], list)\n\n    # Each error should have required fields\n    for error in error_data[\"detail\"]:\n        assert \"type\" in error\n        assert \"loc\" in error\n        assert \"msg\" in error\n        assert isinstance(error[\"loc\"], list)\n        assert len(error[\"loc\"]) &gt;= 1\n\n@pytest.mark.asyncio\nasync def test_500_server_error_contract(async_client, monkeypatch):\n    \"\"\"Test 500 server error response contract.\"\"\"\n    # Arrange - Mock a function to raise an exception\n    from src.services import crew_member_service\n\n    def mock_create_crew_member(*args, **kwargs):\n        raise Exception(\"Database connection failed\")\n\n    monkeypatch.setattr(crew_member_service, \"create\", mock_create_crew_member)\n\n    # Act\n    response = await async_client.post(\"/api/v1/crew-members\", json={\n        \"name\": \"Test User\",\n        \"email\": \"test@example.com\",\n        \"rank\": \"Able Seaman\"\n    })\n\n    # Assert\n    assert response.status_code == 500\n\n    error_data = response.json()\n    assert \"detail\" in error_data\n    assert error_data[\"detail\"] == \"Internal server error\"\n</code></pre>"},{"location":"testing/contract/#continuous-contract-validation","title":"Continuous Contract Validation","text":""},{"location":"testing/contract/#pre-commit-contract-testing","title":"Pre-commit Contract Testing","text":"<p>Add contract validation to pre-commit hooks:</p> <pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: local\n    hooks:\n      - id: contract-tests\n        name: contract-tests\n        entry: pytest tests/contract/ -v\n        language: system\n        pass_filenames: false\n        always_run: true\n</code></pre>"},{"location":"testing/contract/#openapi-spec-generation","title":"OpenAPI Spec Generation","text":"<p>Automatically generate and validate OpenAPI specs:</p> <pre><code># scripts/generate_openapi.py\nfrom fastapi.openapi.utils import get_openapi\nfrom src.main import app\nimport json\n\ndef generate_openapi_spec():\n    \"\"\"Generate OpenAPI specification from FastAPI app.\"\"\"\n    openapi_schema = get_openapi(\n        title=\"Crew Appraisals API\",\n        version=\"1.0.0\",\n        description=\"REST API for managing crew appraisals and performance reviews\",\n        routes=app.routes,\n    )\n\n    with open(\"openapi.json\", \"w\") as f:\n        json.dump(openapi_schema, f, indent=2)\n\n    print(\"OpenAPI specification generated: openapi.json\")\n\nif __name__ == \"__main__\":\n    generate_openapi_spec()\n</code></pre>"},{"location":"testing/contract/#contract-testing-in-cicd","title":"Contract Testing in CI/CD","text":"<pre><code># .github/workflows/contract-tests.yml\nname: Contract Tests\n\non:\n  pull_request:\n    branches: [main]\n  push:\n    branches: [main]\n\njobs:\n  contract-tests:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Install dependencies\n        run: |\n          poetry install\n\n      - name: Run contract tests\n        run: |\n          poetry run pytest tests/contract/ -v --tb=short\n\n      - name: Validate OpenAPI spec\n        run: |\n          poetry run python scripts/generate_openapi.py\n          poetry run swagger-codegen validate -i openapi.json\n</code></pre>"},{"location":"testing/contract/#contract-testing-tools","title":"Contract Testing Tools","text":""},{"location":"testing/contract/#recommended-tools","title":"Recommended Tools","text":"Tool Purpose Usage openapi-spec-validator Validate OpenAPI specs <code>validate_spec(spec_dict)</code> openapi-core Request/response validation <code>RequestValidator</code>, <code>ResponseValidator</code> jsonschema JSON schema validation <code>jsonschema.validate(data, schema)</code> schemathesis Property-based testing Automated API testing dredd API blueprint testing Contract testing framework"},{"location":"testing/contract/#installation","title":"Installation","text":"<pre><code># pyproject.toml\n[tool.poetry.group.test.dependencies]\nopenapi-spec-validator = \"^0.7.1\"\nopenapi-core = \"^0.18.0\"\njsonschema = \"^4.17.0\"\nschemathesis = \"^3.19.0\"\n</code></pre>"},{"location":"testing/contract/#best-practices","title":"Best Practices","text":""},{"location":"testing/contract/#1-keep-contracts-simple","title":"1. Keep Contracts Simple","text":"<ul> <li>Focus on interface contracts, not implementation details</li> <li>Use clear, consistent naming conventions</li> <li>Document expected behavior explicitly</li> </ul>"},{"location":"testing/contract/#2-version-your-contracts","title":"2. Version Your Contracts","text":"<ul> <li>Use semantic versioning for API contracts</li> <li>Maintain backward compatibility when possible</li> <li>Clearly document breaking changes</li> </ul>"},{"location":"testing/contract/#3-automate-contract-validation","title":"3. Automate Contract Validation","text":"<ul> <li>Run contract tests in CI/CD pipelines</li> <li>Generate contracts from code when possible</li> <li>Validate contracts against live APIs</li> </ul>"},{"location":"testing/contract/#4-test-edge-cases","title":"4. Test Edge Cases","text":"<ul> <li>Test all documented error scenarios</li> <li>Validate optional fields and nullable values</li> <li>Test boundary conditions (min/max values)</li> </ul>"},{"location":"testing/contract/#5-monitor-contract-changes","title":"5. Monitor Contract Changes","text":"<ul> <li>Track contract evolution over time</li> <li>Alert on breaking changes</li> <li>Review contract modifications in PRs</li> </ul> <p>Contract testing ensures that our API remains reliable and predictable, making it easier for frontend developers and external integrators to work with our system confidently.</p>"},{"location":"testing/tdd/","title":"Test-Driven Development (TDD)","text":"<p>Test-Driven Development is a software development methodology where tests are written before the actual implementation code. This approach ensures that every piece of code is tested and serves a specific purpose.</p>"},{"location":"testing/tdd/#the-red-green-refactor-cycle","title":"The Red-Green-Refactor Cycle","text":"<p>TDD follows a simple three-step cycle that repeats throughout development:</p> <pre><code>graph LR\n    A[\ud83d\udd34 RED&lt;br/&gt;Write failing test] --&gt; B[\ud83d\udfe2 GREEN&lt;br/&gt;Make test pass]\n    B --&gt; C[\ud83d\udd35 REFACTOR&lt;br/&gt;Improve code]\n    C --&gt; A</code></pre>"},{"location":"testing/tdd/#1-red-write-a-failing-test","title":"1. RED: Write a Failing Test","text":"<p>Start by writing a test that describes the desired behavior. The test should fail initially because the functionality doesn't exist yet.</p> <p>Key principles: - Write the simplest test that captures the requirement - Focus on the API/interface design - Don't worry about implementation details</p>"},{"location":"testing/tdd/#2-green-make-the-test-pass","title":"2. GREEN: Make the Test Pass","text":"<p>Write the minimal amount of code needed to make the test pass. Don't worry about perfect code at this stage.</p> <p>Key principles: - Write just enough code to make the test pass - Avoid over-engineering - Focus on getting to green quickly</p>"},{"location":"testing/tdd/#3-refactor-improve-the-code","title":"3. REFACTOR: Improve the Code","text":"<p>Once the test passes, improve the code quality while keeping all tests green.</p> <p>Key principles: - Eliminate duplication - Improve readability - Optimize performance if needed - Ensure all tests still pass</p>"},{"location":"testing/tdd/#tdd-workflow-example","title":"TDD Workflow Example","text":"<p>Let's walk through implementing a crew member validation feature using TDD.</p>"},{"location":"testing/tdd/#requirement","title":"Requirement","text":"<p>\"A crew member must have a valid email address and name. Email addresses must be unique within the system.\"</p>"},{"location":"testing/tdd/#step-1-red-write-the-first-failing-test","title":"Step 1: RED - Write the First Failing Test","text":"<pre><code># tests/unit/test_crew_member_model.py\nimport pytest\nfrom src.models.crew_member import CrewMember\nfrom src.exceptions import ValidationError\n\ndef test_crew_member_creation_with_valid_data():\n    \"\"\"Test that a crew member can be created with valid data.\"\"\"\n    # This test will fail because CrewMember doesn't exist yet\n    member = CrewMember(\n        name=\"John Doe\",\n        email=\"john.doe@example.com\"\n    )\n\n    assert member.name == \"John Doe\"\n    assert member.email == \"john.doe@example.com\"\n</code></pre> <p>Run the test: <pre><code>$ pytest tests/unit/test_crew_member_model.py::test_crew_member_creation_with_valid_data -v\n\n# Expected output: FAILED (ImportError: No module named 'src.models.crew_member')\n</code></pre></p>"},{"location":"testing/tdd/#step-2-green-make-the-test-pass","title":"Step 2: GREEN - Make the Test Pass","text":"<p>Create the minimal implementation to make the test pass:</p> <pre><code># src/models/crew_member.py\nclass CrewMember:\n    def __init__(self, name: str, email: str):\n        self.name = name\n        self.email = email\n</code></pre> <p>Run the test: <pre><code>$ pytest tests/unit/test_crew_member_model.py::test_crew_member_creation_with_valid_data -v\n\n# Expected output: PASSED\n</code></pre></p>"},{"location":"testing/tdd/#step-3-refactor-improve-the-code","title":"Step 3: REFACTOR - Improve the Code","text":"<p>The code is simple enough that no refactoring is needed yet. Let's continue with the next requirement.</p>"},{"location":"testing/tdd/#step-4-red-add-email-validation-test","title":"Step 4: RED - Add Email Validation Test","text":"<pre><code>def test_crew_member_creation_with_invalid_email_raises_error():\n    \"\"\"Test that creating a crew member with invalid email raises ValidationError.\"\"\"\n    with pytest.raises(ValidationError) as exc_info:\n        CrewMember(\n            name=\"John Doe\",\n            email=\"invalid-email\"\n        )\n\n    assert \"Invalid email format\" in str(exc_info.value)\n</code></pre> <p>Run the test: <pre><code>$ pytest tests/unit/test_crew_member_model.py::test_crew_member_creation_with_invalid_email_raises_error -v\n\n# Expected output: FAILED (ValidationError was not raised)\n</code></pre></p>"},{"location":"testing/tdd/#step-5-green-implement-email-validation","title":"Step 5: GREEN - Implement Email Validation","text":"<pre><code># src/models/crew_member.py\nimport re\nfrom src.exceptions import ValidationError\n\nclass CrewMember:\n    def __init__(self, name: str, email: str):\n        self._validate_email(email)\n        self.name = name\n        self.email = email\n\n    def _validate_email(self, email: str) -&gt; None:\n        \"\"\"Validate email format.\"\"\"\n        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n        if not re.match(pattern, email):\n            raise ValidationError(\"Invalid email format\")\n</code></pre> <pre><code># src/exceptions.py\nclass ValidationError(Exception):\n    \"\"\"Raised when data validation fails.\"\"\"\n    pass\n</code></pre> <p>Run the tests: <pre><code>$ pytest tests/unit/test_crew_member_model.py -v\n\n# Expected output: Both tests PASSED\n</code></pre></p>"},{"location":"testing/tdd/#step-6-refactor-improve-email-validation","title":"Step 6: REFACTOR - Improve Email Validation","text":"<p>Extract email validation to a separate utility:</p> <pre><code># src/utils/validators.py\nimport re\nfrom src.exceptions import ValidationError\n\ndef validate_email(email: str) -&gt; None:\n    \"\"\"Validate email format.\"\"\"\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    if not re.match(pattern, email):\n        raise ValidationError(\"Invalid email format\")\n</code></pre> <pre><code># src/models/crew_member.py\nfrom src.utils.validators import validate_email\n\nclass CrewMember:\n    def __init__(self, name: str, email: str):\n        validate_email(email)\n        self.name = name\n        self.email = email\n</code></pre> <p>Run the tests: <pre><code>$ pytest tests/unit/test_crew_member_model.py -v\n\n# Expected output: Both tests still PASSED\n</code></pre></p>"},{"location":"testing/tdd/#advanced-tdd-patterns","title":"Advanced TDD Patterns","text":""},{"location":"testing/tdd/#test-parameterization","title":"Test Parameterization","text":"<p>Use pytest's parameterize decorator to test multiple scenarios:</p> <pre><code>@pytest.mark.parametrize(\"invalid_email\", [\n    \"invalid-email\",\n    \"@example.com\",\n    \"test@\",\n    \"test.example.com\",\n    \"\"\n])\ndef test_crew_member_creation_with_various_invalid_emails_raises_error(invalid_email):\n    \"\"\"Test that various invalid email formats raise ValidationError.\"\"\"\n    with pytest.raises(ValidationError):\n        CrewMember(name=\"Test User\", email=invalid_email)\n</code></pre>"},{"location":"testing/tdd/#testing-async-code","title":"Testing Async Code","text":"<p>For async functions, use pytest-asyncio:</p> <pre><code>@pytest.mark.asyncio\nasync def test_save_crew_member_to_database():\n    \"\"\"Test saving crew member to database.\"\"\"\n    # Arrange\n    member = CrewMember(name=\"John Doe\", email=\"john@example.com\")\n\n    # Act\n    saved_member = await member.save()\n\n    # Assert\n    assert saved_member.id is not None\n    assert saved_member.created_at is not None\n</code></pre>"},{"location":"testing/tdd/#mocking-external-dependencies","title":"Mocking External Dependencies","text":"<p>Use unittest.mock or pytest fixtures to mock external services:</p> <pre><code>@pytest.mark.asyncio\nasync def test_send_welcome_email_calls_email_service(mock_email_service):\n    \"\"\"Test that creating a crew member sends a welcome email.\"\"\"\n    # Arrange\n    member = CrewMember(name=\"John Doe\", email=\"john@example.com\")\n\n    # Act\n    await member.send_welcome_email()\n\n    # Assert\n    mock_email_service.send_email.assert_called_once_with(\n        to=\"john@example.com\",\n        subject=\"Welcome to Crew Appraisals\",\n        template=\"welcome\"\n    )\n</code></pre>"},{"location":"testing/tdd/#tdd-best-practices","title":"TDD Best Practices","text":""},{"location":"testing/tdd/#dos","title":"Do's","text":"<ol> <li>Start Small: Begin with the simplest test case</li> <li>One Test at a Time: Focus on one failing test before moving to the next</li> <li>Test Behavior: Focus on what the code should do, not how it does it</li> <li>Descriptive Names: Use clear, descriptive test names</li> <li>Fast Tests: Keep tests fast to encourage frequent running</li> <li>Clean Code: Refactor both production and test code</li> </ol>"},{"location":"testing/tdd/#donts","title":"Don'ts","text":"<ol> <li>Don't Skip Tests: Avoid writing production code without tests</li> <li>Don't Write Multiple Failing Tests: Focus on one red test at a time</li> <li>Don't Over-Engineer: Write minimal code to pass tests</li> <li>Don't Ignore Refactoring: Always improve code after making tests pass</li> <li>Don't Test Implementation Details: Focus on public interfaces</li> </ol>"},{"location":"testing/tdd/#test-structure-arrange-act-assert-aaa","title":"Test Structure: Arrange-Act-Assert (AAA)","text":"<p>Structure your tests clearly:</p> <pre><code>def test_calculate_crew_member_performance_rating():\n    \"\"\"Test performance rating calculation.\"\"\"\n    # Arrange - Set up test data\n    member = CrewMember(name=\"John Doe\", email=\"john@example.com\")\n    appraisals = [\n        Appraisal(score=85, date=\"2024-01-01\"),\n        Appraisal(score=90, date=\"2024-02-01\"),\n        Appraisal(score=88, date=\"2024-03-01\")\n    ]\n\n    # Act - Execute the behavior\n    rating = member.calculate_performance_rating(appraisals)\n\n    # Assert - Verify the results\n    assert rating == 87.67  # Average of scores\n    assert member.last_calculated is not None\n</code></pre>"},{"location":"testing/tdd/#tdd-with-fastapi-endpoints","title":"TDD with FastAPI Endpoints","text":""},{"location":"testing/tdd/#testing-api-endpoints","title":"Testing API Endpoints","text":"<pre><code>@pytest.mark.asyncio\nasync def test_create_crew_member_endpoint():\n    \"\"\"Test POST /crew-members endpoint.\"\"\"\n    # Arrange\n    crew_data = {\n        \"name\": \"Jane Smith\",\n        \"email\": \"jane.smith@example.com\",\n        \"rank\": \"Able Seaman\"\n    }\n\n    # Act\n    async with AsyncClient(app=app, base_url=\"http://test\") as client:\n        response = await client.post(\"/api/v1/crew-members\", json=crew_data)\n\n    # Assert\n    assert response.status_code == 201\n    response_data = response.json()\n    assert response_data[\"name\"] == crew_data[\"name\"]\n    assert response_data[\"email\"] == crew_data[\"email\"]\n    assert \"id\" in response_data\n</code></pre>"},{"location":"testing/tdd/#database-integration-testing","title":"Database Integration Testing","text":"<pre><code>@pytest.mark.asyncio\nasync def test_crew_member_persistence(db_session):\n    \"\"\"Test that crew member is properly saved to database.\"\"\"\n    # Arrange\n    member_data = {\n        \"name\": \"Test User\",\n        \"email\": \"test@example.com\"\n    }\n\n    # Act\n    async with AsyncClient(app=app, base_url=\"http://test\") as client:\n        response = await client.post(\"/api/v1/crew-members\", json=member_data)\n\n    # Assert\n    assert response.status_code == 201\n\n    # Verify in database\n    member_id = response.json()[\"id\"]\n    stored_member = await db_session.get(CrewMember, member_id)\n    assert stored_member is not None\n    assert stored_member.email == member_data[\"email\"]\n</code></pre>"},{"location":"testing/tdd/#tdd-metrics-and-monitoring","title":"TDD Metrics and Monitoring","text":""},{"location":"testing/tdd/#code-coverage","title":"Code Coverage","text":"<p>Monitor test coverage to ensure comprehensive testing:</p> <pre><code># Generate coverage report\npytest --cov=src --cov-report=html --cov-report=term-missing\n\n# Set coverage thresholds\npytest --cov=src --cov-fail-under=95\n</code></pre>"},{"location":"testing/tdd/#test-performance","title":"Test Performance","text":"<p>Keep tests fast by monitoring execution times:</p> <pre><code># Show slowest tests\npytest --durations=10\n\n# Set test timeout\npytest --timeout=300\n</code></pre>"},{"location":"testing/tdd/#common-tdd-antipatterns","title":"Common TDD Antipatterns","text":""},{"location":"testing/tdd/#1-writing-tests-after-code","title":"1. Writing Tests After Code","text":"<pre><code># \u274c Wrong: Testing existing implementation\ndef test_existing_function():\n    result = existing_function(input_data)\n    assert result == expected_output  # Testing current behavior, not requirements\n</code></pre> <pre><code># \u2705 Right: Testing desired behavior first\ndef test_calculate_overtime_pay():\n    # Test describes what we want the function to do\n    overtime_pay = calculate_overtime_pay(hours=50, rate=25.0)\n    assert overtime_pay == 375.0  # 10 hours * 25 * 1.5\n</code></pre>"},{"location":"testing/tdd/#2-testing-implementation-details","title":"2. Testing Implementation Details","text":"<pre><code># \u274c Wrong: Testing how something is done\ndef test_crew_member_uses_bcrypt_for_password():\n    member = CrewMember(name=\"Test\", email=\"test@example.com\")\n    member.set_password(\"secret123\")\n    assert isinstance(member._password_hash, str)  # Testing internal implementation\n</code></pre> <pre><code># \u2705 Right: Testing behavior\ndef test_crew_member_password_authentication():\n    member = CrewMember(name=\"Test\", email=\"test@example.com\")\n    member.set_password(\"secret123\")\n\n    assert member.check_password(\"secret123\") is True\n    assert member.check_password(\"wrong_password\") is False\n</code></pre>"},{"location":"testing/tdd/#3-overly-complex-tests","title":"3. Overly Complex Tests","text":"<pre><code># \u274c Wrong: Testing multiple behaviors in one test\ndef test_crew_member_complete_workflow():\n    # Creates member, updates profile, adds appraisals, calculates rating, sends email...\n    # Too much in one test\n</code></pre> <pre><code># \u2705 Right: One behavior per test\ndef test_crew_member_creation():\n    member = CrewMember(name=\"Test\", email=\"test@example.com\")\n    assert member.name == \"Test\"\n\ndef test_crew_member_appraisal_addition():\n    member = CrewMember(name=\"Test\", email=\"test@example.com\")\n    member.add_appraisal(Appraisal(score=85))\n    assert len(member.appraisals) == 1\n</code></pre>"},{"location":"testing/tdd/#tdd-tools-and-ide-integration","title":"TDD Tools and IDE Integration","text":""},{"location":"testing/tdd/#pytest-configuration","title":"PyTest Configuration","text":"<p>Create <code>pytest.ini</code> for project-specific settings:</p> <pre><code>[tool:pytest]\ntestpaths = tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\naddopts =\n    --strict-markers\n    --strict-config\n    --verbose\n    --tb=short\nmarkers =\n    slow: marks tests as slow\n    integration: marks tests as integration tests\n    unit: marks tests as unit tests\n</code></pre>"},{"location":"testing/tdd/#vs-code-integration","title":"VS Code Integration","text":"<p>Configure <code>.vscode/settings.json</code> for TDD workflow:</p> <pre><code>{\n    \"python.testing.pytestEnabled\": true,\n    \"python.testing.unittestEnabled\": false,\n    \"python.testing.pytestArgs\": [\"tests\"],\n    \"python.testing.autoTestDiscoverOnSaveEnabled\": true\n}\n</code></pre>"},{"location":"testing/tdd/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Set up <code>.pre-commit-config.yaml</code> to run tests before commits:</p> <pre><code>repos:\n  - repo: local\n    hooks:\n      - id: tests\n        name: tests\n        entry: pytest\n        language: system\n        pass_filenames: false\n        always_run: true\n</code></pre>"},{"location":"testing/tdd/#getting-started-with-tdd","title":"Getting Started with TDD","text":""},{"location":"testing/tdd/#1-start-simple","title":"1. Start Simple","text":"<p>Begin with a simple function or class:</p> <pre><code>def test_add_two_numbers():\n    result = add(2, 3)\n    assert result == 5\n</code></pre>"},{"location":"testing/tdd/#2-practice-the-cycle","title":"2. Practice the Cycle","text":"<ul> <li>Write failing test (RED)</li> <li>Make it pass with minimal code (GREEN)</li> <li>Clean up the code (REFACTOR)</li> </ul>"},{"location":"testing/tdd/#3-gradually-increase-complexity","title":"3. Gradually Increase Complexity","text":"<p>Move from simple functions to complex business logic:</p> <pre><code># Simple\ndef test_calculate_basic_pay()\n\n# Complex\ndef test_calculate_total_compensation_with_overtime_and_bonuses()\n</code></pre>"},{"location":"testing/tdd/#4-learn-from-failures","title":"4. Learn from Failures","text":"<p>When tests fail, understand why: - Is the test wrong? - Is the requirement unclear? - Is the implementation incorrect?</p>"},{"location":"testing/tdd/#resources-and-further-reading","title":"Resources and Further Reading","text":"<ul> <li>Books: \"Test-Driven Development by Example\" by Kent Beck</li> <li>Documentation: pytest documentation</li> <li>Patterns: Testing patterns in Python</li> <li>Best Practices: Effective testing strategies</li> </ul> <p>Remember: TDD is not just about testing\u2014it's about designing better software through feedback-driven development.</p>"}]}