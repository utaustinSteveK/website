{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NetIntel-OCR","text":""},{"location":"#building-semantic-cmdb-with-ai-powered-document-intelligence","title":"Building Semantic CMDB with AI-Powered Document Intelligence","text":"<p>NetIntel-OCR transforms unstructured technical documentation into structured, searchable knowledge for building Semantic Configuration Management Databases (CMDB).</p>"},{"location":"#project-goal","title":"Project Goal","text":"<p>Create an intelligent document processing platform that extracts network architectures, security configurations, and operational workflows from enterprise documentation to populate a Semantic CMDB.</p>"},{"location":"#key-use-cases","title":"Key Use Cases","text":""},{"location":"#network-domain","title":"Network Domain","text":"<ul> <li>Architecture Discovery: Extract network topologies from design documents</li> <li>Configuration Mapping: Parse firewall rules and routing configurations</li> <li>Dependency Analysis: Identify component relationships and data flows</li> <li>Change Impact: Track architecture evolution across document versions</li> </ul>"},{"location":"#security-domain","title":"Security Domain","text":"<ul> <li>Zone Identification: Detect DMZ, trust boundaries, and security zones</li> <li>Compliance Mapping: Extract security controls and policy implementations</li> <li>Risk Assessment: Identify exposed services and attack surfaces</li> <li>Audit Trail: Document security architecture decisions and rationale</li> </ul>"},{"location":"#core-features","title":"Core Features","text":""},{"location":"#intelligent-detection","title":"\ud83c\udfaf Intelligent Detection","text":"<ul> <li>Network diagram recognition with 90%+ accuracy</li> <li>Flow chart and process diagram extraction</li> <li>Multi-diagram page processing</li> <li>Context-aware interpretation using surrounding text</li> </ul>"},{"location":"#mermaid-generation","title":"\ud83d\udd04 Mermaid Generation","text":"<ul> <li>Automatic conversion to Mermaid.js syntax</li> <li>Syntax validation and auto-correction</li> <li>Support for complex network topologies</li> <li>Preserves component relationships</li> </ul>"},{"location":"#context-extraction","title":"\ud83e\udde0 Context Extraction","text":"<ul> <li>Analyzes diagrams with document context</li> <li>Identifies critical components and data flows</li> <li>Provides security analysis and recommendations</li> <li>Generates architecture summaries</li> </ul>"},{"location":"#vector-search","title":"\ud83d\udd0d Vector Search","text":"<ul> <li>Semantic search across processed documents</li> <li>Milvus integration for scalable retrieval</li> <li>Component and relationship queries</li> <li>Cross-document knowledge linking</li> </ul>"},{"location":"#knowledge-graph-v0117","title":"\ud83d\udd78\ufe0f Knowledge Graph (v0.1.17)","text":"<ul> <li>Automatic entity and relationship extraction</li> <li>FalkorDB graph storage with PyKEEN embeddings</li> <li>8 embedding models (TransE, RotatE, ComplEx, etc.)</li> <li>Hybrid retrieval combining graph and vector search</li> <li>Query intent classification for optimal routing</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<pre><code>graph TB\n    PDF[PDF Documents] --&gt; OCR[OCR Engine]\n    OCR --&gt; Detection[Diagram Detection]\n    Detection --&gt; Network[Network Processor]\n    Detection --&gt; Flow[Flow Processor]\n    Network --&gt; Mermaid[Mermaid Generator]\n    Flow --&gt; Mermaid\n    Mermaid --&gt; Context[Context Extractor]\n    Context --&gt; KG[Knowledge Graph]\n    Context --&gt; Vector[Vector Store]\n    KG --&gt; FalkorDB[FalkorDB Storage]\n    KG --&gt; Embeddings[PyKEEN Embeddings]\n    Vector --&gt; CMDB[Semantic CMDB]\n    FalkorDB --&gt; CMDB\n    Embeddings --&gt; CMDB</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>NetIntel-OCR provides a CLI interface for processing technical documentation:</p> <pre><code># Process network architecture document\nnetintel-ocr --model Nanonets-OCR-s:latest \\\n             --network-model qwen2.5vl:7b \\\n             --debug cisco-sdwan-design-guide.pdf \\\n             --start 5 --end 10\n</code></pre> <p>See the Quick Start Guide for installation and basic usage.</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Quick Start Guide - Installation and first steps</li> <li>Knowledge Graph Guide - KG extraction and querying (v0.1.17)</li> <li>Deployment Guide - Docker and Kubernetes setup</li> <li>Customization Guide - Prompt engineering and tuning</li> <li>Vector Search Guide - Milvus integration and queries</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.10+</li> <li>Ollama for LLM inference</li> <li>8GB+ RAM for processing</li> <li>GPU recommended for faster inference</li> </ul>"},{"location":"#resources","title":"Resources","text":"<ul> <li>Documentation: https://visionml.net/docs</li> <li>PyPI Package: https://pypi.org/project/netintel-ocr/</li> <li>GitHub: https://github.com/VisionMLNet/NetIntelOCR</li> <li>Discord Community: https://discord.gg/netintel-ocr</li> </ul>"},{"location":"#license","title":"License","text":"<p>Enterprise license required for production use. Contact for pricing.</p>"},{"location":"api/","title":"API Integration Guide","text":""},{"location":"api/#rest-api-server","title":"REST API Server","text":"<p>NetIntel-OCR provides a REST API for programmatic document processing and integration with external systems.</p>"},{"location":"api/#starting-the-api-server","title":"Starting the API Server","text":"<pre><code># Start API server on port 8000\nnetintel-ocr --api\n\n# Custom port and host\nnetintel-ocr --api --port 8080 --host 0.0.0.0\n\n# With authentication\nnetintel-ocr --api --api-key YOUR_SECRET_KEY\n</code></pre>"},{"location":"api/#docker-api-mode","title":"Docker API Mode","text":"<pre><code>docker run -p 8000:8000 \\\n  -e API_KEY=your-secret-key \\\n  netintel-ocr:latest --api\n</code></pre>"},{"location":"api/#api-endpoints","title":"API Endpoints","text":""},{"location":"api/#health-check","title":"Health Check","text":"<pre><code>GET /health\n\nResponse:\n{\n  \"status\": \"healthy\",\n  \"version\": \"0.1.16.15\",\n  \"models_available\": [\"qwen2.5vl:7b\", \"Nanonets-OCR-s:latest\"],\n  \"milvus_connected\": true\n}\n</code></pre>"},{"location":"api/#process-document","title":"Process Document","text":"<pre><code>POST /process\nContent-Type: multipart/form-data\n\nParameters:\n- file: PDF file (required)\n- model: OCR model (optional)\n- network_model: Network diagram model (optional)\n- start_page: Starting page (optional)\n- end_page: Ending page (optional)\n- confidence_threshold: Detection threshold (optional)\n\nResponse:\n{\n  \"job_id\": \"uuid-12345\",\n  \"status\": \"processing\",\n  \"estimated_time\": 45\n}\n</code></pre>"},{"location":"api/#get-job-status","title":"Get Job Status","text":"<pre><code>GET /status/{job_id}\n\nResponse:\n{\n  \"job_id\": \"uuid-12345\",\n  \"status\": \"completed\",\n  \"progress\": 100,\n  \"pages_processed\": 10,\n  \"diagrams_found\": 3\n}\n</code></pre>"},{"location":"api/#get-results","title":"Get Results","text":"<pre><code>GET /results/{job_id}\n\nResponse:\n{\n  \"job_id\": \"uuid-12345\",\n  \"pages\": [\n    {\n      \"page_number\": 1,\n      \"type\": \"text\",\n      \"content\": \"...\"\n    },\n    {\n      \"page_number\": 2,\n      \"type\": \"network_diagram\",\n      \"mermaid\": \"graph TB...\",\n      \"components\": [...],\n      \"context\": {...}\n    }\n  ],\n  \"summary\": {...}\n}\n</code></pre>"},{"location":"api/#search-documents","title":"Search Documents","text":"<pre><code>POST /search\nContent-Type: application/json\n\n{\n  \"query\": \"firewall configuration\",\n  \"collection\": \"network_docs\",\n  \"limit\": 10,\n  \"filters\": {\n    \"document_type\": \"network\"\n  }\n}\n\nResponse:\n{\n  \"results\": [\n    {\n      \"document\": \"firewall-guide.pdf\",\n      \"page\": 5,\n      \"score\": 0.92,\n      \"content\": \"...\",\n      \"metadata\": {...}\n    }\n  ]\n}\n</code></pre>"},{"location":"api/#python-client","title":"Python Client","text":""},{"location":"api/#installation","title":"Installation","text":"<pre><code># Install client library\npip install netintel-ocr-client\n\n# Or install full package with client\npip install netintel-ocr[client]\n</code></pre> <p>Package Details</p> <p>Main package: https://pypi.org/project/netintel-ocr/</p> <p>Client library: https://pypi.org/project/netintel-ocr-client/</p>"},{"location":"api/#basic-usage","title":"Basic Usage","text":"<pre><code>from netintel_client import NetIntelClient\n\n# Initialize client\nclient = NetIntelClient(\n    host=\"http://localhost:8000\",\n    api_key=\"your-secret-key\"\n)\n\n# Process document\njob = client.process_document(\n    file_path=\"network-design.pdf\",\n    model=\"qwen2.5vl:7b\",\n    start_page=1,\n    end_page=10\n)\n\n# Wait for completion\nresult = client.wait_for_job(job.job_id)\n\n# Get results\npages = result.pages\ndiagrams = [p for p in pages if p.type == \"network_diagram\"]\n</code></pre>"},{"location":"api/#async-processing","title":"Async Processing","text":"<pre><code>import asyncio\nfrom netintel_client import AsyncNetIntelClient\n\nasync def process_documents():\n    client = AsyncNetIntelClient(\"http://localhost:8000\")\n\n    # Process multiple documents\n    jobs = []\n    for pdf in pdf_files:\n        job = await client.process_document(pdf)\n        jobs.append(job)\n\n    # Wait for all\n    results = await asyncio.gather(\n        *[client.wait_for_job(j.job_id) for j in jobs]\n    )\n\n    return results\n</code></pre>"},{"location":"api/#javascripttypescript-client","title":"JavaScript/TypeScript Client","text":""},{"location":"api/#installation_1","title":"Installation","text":"<pre><code>npm install netintel-ocr-client\n</code></pre>"},{"location":"api/#usage","title":"Usage","text":"<pre><code>const { NetIntelClient } = require('netintel-ocr-client');\n\nconst client = new NetIntelClient({\n  host: 'http://localhost:8000',\n  apiKey: 'your-secret-key'\n});\n\n// Process document\nconst job = await client.processDocument({\n  file: fileBuffer,\n  model: 'qwen2.5vl:7b'\n});\n\n// Get results\nconst result = await client.waitForJob(job.jobId);\nconsole.log(`Found ${result.diagramsFound} diagrams`);\n</code></pre>"},{"location":"api/#webhook-integration","title":"Webhook Integration","text":""},{"location":"api/#configure-webhooks","title":"Configure Webhooks","text":"<pre><code>POST /webhooks\nContent-Type: application/json\n\n{\n  \"url\": \"https://your-server.com/webhook\",\n  \"events\": [\"job.completed\", \"job.failed\"],\n  \"secret\": \"webhook-secret\"\n}\n</code></pre>"},{"location":"api/#webhook-payload","title":"Webhook Payload","text":"<pre><code>{\n  \"event\": \"job.completed\",\n  \"job_id\": \"uuid-12345\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"data\": {\n    \"pages_processed\": 10,\n    \"diagrams_found\": 3,\n    \"processing_time\": 45.2\n  }\n}\n</code></pre>"},{"location":"api/#rate-limiting","title":"Rate Limiting","text":"<p>Default limits: - 100 requests per minute per API key - 10 concurrent jobs per API key - 100MB max file size</p> <p>Configure custom limits:</p> <pre><code>netintel-ocr --api \\\n  --rate-limit 200 \\\n  --concurrent-jobs 20 \\\n  --max-file-size 500\n</code></pre>"},{"location":"api/#authentication","title":"Authentication","text":""},{"location":"api/#api-key-authentication","title":"API Key Authentication","text":"<pre><code># Set API key\nexport NETINTEL_API_KEY=your-secret-key\n\n# Or in request header\ncurl -H \"X-API-Key: your-secret-key\" \\\n  http://localhost:8000/process\n</code></pre>"},{"location":"api/#jwt-authentication","title":"JWT Authentication","text":"<pre><code># Get token\nPOST /auth/token\n{\n  \"username\": \"user\",\n  \"password\": \"pass\"\n}\n\n# Use token\ncurl -H \"Authorization: Bearer jwt-token\" \\\n  http://localhost:8000/process\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":""},{"location":"api/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"INVALID_MODEL\",\n    \"message\": \"Model 'unknown-model' not found\",\n    \"details\": {\n      \"available_models\": [\"qwen2.5vl:7b\", \"llava:13b\"]\n    }\n  },\n  \"request_id\": \"req-12345\"\n}\n</code></pre>"},{"location":"api/#common-error-codes","title":"Common Error Codes","text":"Code Description Solution <code>INVALID_FILE</code> PDF file corrupt or invalid Verify PDF file <code>MODEL_NOT_FOUND</code> Requested model unavailable Check available models <code>RATE_LIMITED</code> Too many requests Retry after delay <code>PROCESSING_FAILED</code> Internal processing error Check logs <code>TIMEOUT</code> Processing timeout Reduce page range"},{"location":"api/#monitoring","title":"Monitoring","text":""},{"location":"api/#metrics-endpoint","title":"Metrics Endpoint","text":"<pre><code>GET /metrics\n\nResponse (Prometheus format):\nnetintel_requests_total{method=\"POST\",endpoint=\"/process\"} 1234\nnetintel_processing_duration_seconds{quantile=\"0.99\"} 45.2\nnetintel_active_jobs 5\n</code></pre>"},{"location":"api/#logging","title":"Logging","text":"<pre><code># Enable debug logging\nclient = NetIntelClient(\n    host=\"http://localhost:8000\",\n    log_level=\"DEBUG\"\n)\n</code></pre>"},{"location":"api/#next-steps","title":"Next Steps","text":"<ul> <li>MCP Server Guide - Model Context Protocol integration</li> <li>Batch Processing - Process multiple documents</li> <li>Deployment Guide - Production setup</li> </ul>"},{"location":"batch/","title":"Batch Processing Guide","text":""},{"location":"batch/#overview","title":"Overview","text":"<p>NetIntel-OCR provides efficient batch processing capabilities for handling multiple documents with parallel processing, progress tracking, and centralized storage.</p>"},{"location":"batch/#basic-batch-processing","title":"Basic Batch Processing","text":""},{"location":"batch/#process-multiple-files","title":"Process Multiple Files","text":"<pre><code># Process all PDFs in directory\nnetintel-ocr --batch *.pdf\n\n# With specific model\nnetintel-ocr --batch --model qwen2.5vl:7b *.pdf\n\n# Recursive processing\nnetintel-ocr --batch --recursive /path/to/documents\n</code></pre>"},{"location":"batch/#parallel-processing","title":"Parallel Processing","text":"<pre><code># Process 4 documents simultaneously\nnetintel-ocr --batch --max-parallel 4 *.pdf\n\n# Auto-detect optimal parallelism\nnetintel-ocr --batch --auto-parallel *.pdf\n\n# GPU parallel processing\nnetintel-ocr --batch --gpu --max-parallel 2 *.pdf\n</code></pre>"},{"location":"batch/#advanced-batch-features","title":"Advanced Batch Features","text":""},{"location":"batch/#batch-ingestion","title":"Batch Ingestion","text":"<pre><code># Ingest to vector store\nnetintel-ocr --batch-ingest \\\n  --collection network_docs \\\n  --max-parallel 4 \\\n  *.pdf\n\n# With deduplication\nnetintel-ocr --batch-ingest \\\n  --deduplicate \\\n  --collection unified_docs \\\n  /path/to/documents/*.pdf\n</code></pre>"},{"location":"batch/#progress-tracking","title":"Progress Tracking","text":"<pre><code># Enable progress bar\nnetintel-ocr --batch --progress *.pdf\n\n# Save progress for resume\nnetintel-ocr --batch \\\n  --checkpoint batch-checkpoint.json \\\n  --resume-on-failure \\\n  *.pdf\n</code></pre>"},{"location":"batch/#output-organization","title":"Output Organization","text":"<pre><code># Organize by document type\nnetintel-ocr --batch \\\n  --output-structure type \\\n  --output-dir processed/ \\\n  *.pdf\n\n# Result:\n# processed/\n#   \u251c\u2500\u2500 network_diagrams/\n#   \u251c\u2500\u2500 flow_diagrams/\n#   \u2514\u2500\u2500 text_only/\n</code></pre>"},{"location":"batch/#batch-configuration","title":"Batch Configuration","text":""},{"location":"batch/#yaml-configuration","title":"YAML Configuration","text":"<pre><code># batch-config.yaml\nbatch:\n  max_parallel: 4\n  chunk_size: 10\n  resume_on_failure: true\n  checkpoint_file: batch-state.json\n\n  output:\n    structure: document  # or 'type', 'date'\n    dir: ./processed\n\n  models:\n    text: Nanonets-OCR-s:latest\n    network: qwen2.5vl:7b\n    flow: qwen2.5vl:7b\n\n  filters:\n    min_pages: 5\n    max_pages: 500\n    file_types: [pdf, png, jpg]\n\n  error_handling:\n    max_retries: 3\n    retry_delay: 5\n    skip_on_error: false\n</code></pre>"},{"location":"batch/#use-configuration","title":"Use Configuration","text":"<pre><code>netintel-ocr --batch --config batch-config.yaml *.pdf\n</code></pre>"},{"location":"batch/#centralized-database","title":"Centralized Database","text":""},{"location":"batch/#merge-to-central-store","title":"Merge to Central Store","text":"<pre><code># Create centralized database\nnetintel-ocr --merge-to-centralized \\\n  --source-dir ./processed \\\n  --central-db ./central/unified.db\n\n# With metadata\nnetintel-ocr --merge-to-centralized \\\n  --add-metadata \"project=network-refresh\" \\\n  --add-metadata \"date=2024-01-15\" \\\n  ./processed/* ./central/unified.db\n</code></pre>"},{"location":"batch/#query-centralized-database","title":"Query Centralized Database","text":"<pre><code># Search across all documents\nnetintel-ocr --query \\\n  --db ./central/unified.db \\\n  \"firewall configuration\"\n\n# Filter by metadata\nnetintel-ocr --query \\\n  --db ./central/unified.db \\\n  --filter \"project=network-refresh\" \\\n  \"DMZ architecture\"\n</code></pre>"},{"location":"batch/#cloud-storage-integration","title":"Cloud Storage Integration","text":""},{"location":"batch/#s3minio-support","title":"S3/MinIO Support","text":"<pre><code># Configure S3\nexport AWS_ACCESS_KEY_ID=your-key\nexport AWS_SECRET_ACCESS_KEY=your-secret\nexport S3_BUCKET=netintel-output\n\n# Process and upload to S3\nnetintel-ocr --batch \\\n  --output-s3 s3://netintel-output/processed/ \\\n  *.pdf\n\n# Process from S3\nnetintel-ocr --batch \\\n  --input-s3 s3://netintel-input/*.pdf \\\n  --output-s3 s3://netintel-output/\n</code></pre>"},{"location":"batch/#azure-blob-storage","title":"Azure Blob Storage","text":"<pre><code># Configure Azure\nexport AZURE_STORAGE_CONNECTION_STRING=your-connection-string\n\n# Process with Azure storage\nnetintel-ocr --batch \\\n  --storage-backend azure \\\n  --container processed-docs \\\n  *.pdf\n</code></pre>"},{"location":"batch/#performance-optimization","title":"Performance Optimization","text":""},{"location":"batch/#memory-management","title":"Memory Management","text":"<pre><code># Limit memory per process\nnetintel-ocr --batch \\\n  --max-memory 4GB \\\n  --max-parallel 2 \\\n  *.pdf\n\n# Enable swap for large documents\nnetintel-ocr --batch \\\n  --enable-swap \\\n  --swap-dir /tmp/netintel-swap \\\n  large-docs/*.pdf\n</code></pre>"},{"location":"batch/#cpugpu-optimization","title":"CPU/GPU Optimization","text":"<pre><code># CPU-only batch processing\nnetintel-ocr --batch \\\n  --cpu-only \\\n  --max-parallel $(nproc) \\\n  *.pdf\n\n# Mixed CPU/GPU processing\nnetintel-ocr --batch \\\n  --gpu-for-models \"llava,qwen2.5vl\" \\\n  --cpu-for-models \"Nanonets-OCR-s\" \\\n  *.pdf\n</code></pre>"},{"location":"batch/#caching-strategy","title":"Caching Strategy","text":"<pre><code># Enable aggressive caching\nnetintel-ocr --batch \\\n  --cache-models \\\n  --cache-embeddings \\\n  --cache-dir /tmp/netintel-cache \\\n  *.pdf\n\n# Share cache across runs\nexport NETINTEL_CACHE_DIR=/shared/cache\nnetintel-ocr --batch --use-cache *.pdf\n</code></pre>"},{"location":"batch/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"batch/#real-time-monitoring","title":"Real-time Monitoring","text":"<pre><code># Enable metrics server\nnetintel-ocr --batch \\\n  --metrics-port 9090 \\\n  --progress-webhook http://monitor/progress \\\n  *.pdf\n\n# View metrics\ncurl http://localhost:9090/metrics\n</code></pre>"},{"location":"batch/#detailed-logging","title":"Detailed Logging","text":"<pre><code># Per-document logs\nnetintel-ocr --batch \\\n  --log-level DEBUG \\\n  --log-per-document \\\n  --log-dir ./logs \\\n  *.pdf\n\n# Structured logging\nnetintel-ocr --batch \\\n  --log-format json \\\n  --log-file batch.jsonl \\\n  *.pdf\n</code></pre>"},{"location":"batch/#error-handling","title":"Error Handling","text":""},{"location":"batch/#retry-logic","title":"Retry Logic","text":"<pre><code># Automatic retry with backoff\nnetintel-ocr --batch \\\n  --max-retries 3 \\\n  --retry-backoff exponential \\\n  --retry-delay 5 \\\n  *.pdf\n</code></pre>"},{"location":"batch/#failed-document-handling","title":"Failed Document Handling","text":"<pre><code># Skip failed documents\nnetintel-ocr --batch \\\n  --skip-on-error \\\n  --failed-list failed.txt \\\n  *.pdf\n\n# Reprocess failed documents\nnetintel-ocr --batch \\\n  --input-list failed.txt \\\n  --max-retries 5\n</code></pre>"},{"location":"batch/#batch-scripts","title":"Batch Scripts","text":""},{"location":"batch/#shell-script-example","title":"Shell Script Example","text":"<pre><code>#!/bin/bash\n# batch-process.sh\n\nDOCS_DIR=\"/path/to/documents\"\nOUTPUT_DIR=\"/path/to/output\"\nFAILED_LIST=\"failed_docs.txt\"\n\n# Clear previous failures\n&gt; $FAILED_LIST\n\n# Process in chunks\nfind $DOCS_DIR -name \"*.pdf\" | while read -r file; do\n  netintel-ocr \\\n    --model qwen2.5vl:7b \\\n    --output-dir $OUTPUT_DIR \\\n    \"$file\" || echo \"$file\" &gt;&gt; $FAILED_LIST\ndone\n\n# Retry failed documents\nif [ -s $FAILED_LIST ]; then\n  echo \"Retrying failed documents...\"\n  while read -r file; do\n    netintel-ocr --model minicpm-v:latest \"$file\"\n  done &lt; $FAILED_LIST\nfi\n</code></pre>"},{"location":"batch/#python-script-example","title":"Python Script Example","text":"<pre><code># batch_processor.py\nimport os\nfrom pathlib import Path\nfrom netintel_ocr import BatchProcessor\n\nprocessor = BatchProcessor(\n    max_parallel=4,\n    model=\"qwen2.5vl:7b\",\n    output_dir=\"./processed\"\n)\n\n# Process all PDFs\npdf_files = Path(\"/documents\").glob(\"**/*.pdf\")\nresults = processor.process_batch(pdf_files)\n\n# Handle results\nfor result in results:\n    if result.success:\n        print(f\"\u2713 {result.file}: {result.diagrams_found} diagrams\")\n    else:\n        print(f\"\u2717 {result.file}: {result.error}\")\n\n# Generate summary\nprocessor.generate_summary(\"batch_summary.json\")\n</code></pre>"},{"location":"batch/#best-practices","title":"Best Practices","text":"<ol> <li>Chunk Large Batches: Process in groups of 50-100 documents</li> <li>Use Checkpoints: Enable resume for long-running batches</li> <li>Monitor Memory: Set limits to prevent OOM errors</li> <li>Deduplicate First: Remove duplicates before processing</li> <li>Test Small Sample: Validate settings on subset first</li> </ol>"},{"location":"batch/#next-steps","title":"Next Steps","text":"<ul> <li>Troubleshooting - Common batch issues</li> <li>Vector Search - Search processed batches</li> <li>API Integration - Batch processing via API</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#version-011615-latest-release","title":"Version 0.1.16.15 - Latest Release","text":"<p>Released: 2025-09-01</p>"},{"location":"changelog/#bug-fixes","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Fixed DEFAULT token parser error by replacing 'default' with 'DefaultZone'</li> <li>Enhanced connection handling to replace 'default' in arrow connections</li> <li>Improved keyword conflict resolution for Mermaid reserved words</li> </ul>"},{"location":"changelog/#version-011614","title":"Version 0.1.16.14","text":"<p>Released: 2025-09-01</p>"},{"location":"changelog/#bug-fixes_1","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Fixed flow diagram parse errors with node-subgraph concatenation patterns</li> <li>Enhanced Mermaid fixer to handle 'default' keyword issues in subgraphs</li> <li>Improved preprocessing to separate concatenated node and subgraph definitions</li> </ul>"},{"location":"changelog/#version-011613","title":"Version 0.1.16.13","text":"<p>Released: 2025-09-01</p>"},{"location":"changelog/#features","title":"\u2728 Features","text":"<ul> <li>Applied Mermaid validation fixes to flow diagrams</li> <li>Added context extraction to flow diagrams using surrounding text</li> <li>Enhanced flow processor with RobustMermaidValidator for auto-correction</li> </ul>"},{"location":"changelog/#version-011612","title":"Version 0.1.16.12","text":"<p>Released: 2025-09-01</p>"},{"location":"changelog/#features_1","title":"\u2728 Features","text":"<ul> <li>Added context extraction for diagrams using surrounding text paragraphs</li> <li>Enhanced validation to auto-correct LLM-generated Mermaid syntax issues</li> </ul>"},{"location":"changelog/#bug-fixes_2","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Fixed Mermaid diagram parsing errors with malformed subgraph/zone syntax</li> </ul>"},{"location":"changelog/#version-0116-major-release","title":"Version 0.1.16 - Major Release","text":"<p>Released: 2025-08-31</p>"},{"location":"changelog/#major-features","title":"\ud83c\udfaf Major Features","text":"<ul> <li>Unified Diagram Detection: Automatic detection for network/flow/hybrid diagrams</li> <li>Comprehensive Flow Processing: Full Mermaid generation for flow diagrams</li> <li>Context-Aware Analysis: Uses surrounding text (2 paragraphs before/after)</li> <li>Prompt Management System: Full customization without code changes</li> <li>Default Model Update: NetIntelOCR-7B-0925 as default vision model</li> </ul>"},{"location":"changelog/#new-capabilities","title":"\u2728 New Capabilities","text":"<ul> <li>Flow diagram element extraction and Mermaid generation</li> <li>Context extraction using document surrounding text</li> <li>Complete prompt import/export system</li> <li>Enhanced syntax validation and auto-correction</li> </ul>"},{"location":"changelog/#version-0115","title":"Version 0.1.15","text":"<p>Released: 2025-08-30</p>"},{"location":"changelog/#performance-improvements","title":"\ud83d\ude80 Performance Improvements","text":"<ul> <li>Milvus Integration: 20-60x faster search, 70% less memory usage</li> <li>Qwen3-8B Embeddings: 4096-dimensional vectors via Ollama</li> <li>Binary Vectors: Enhanced deduplication with SimHash</li> <li>Simplified Deployment: One-command initialization with scales</li> </ul>"},{"location":"changelog/#infrastructure","title":"\ud83d\udd27 Infrastructure","text":"<ul> <li>IVF_SQ8 indexing for CPU-optimized search</li> <li>Distributed architecture support</li> <li>Enhanced C++ deduplication core with AVX2 SIMD</li> </ul>"},{"location":"changelog/#version-0113","title":"Version 0.1.13","text":"<p>Released: 2025-08-25</p>"},{"location":"changelog/#new-features","title":"\u2728 New Features","text":"<ul> <li>REST API Server: Full API mode with <code>--api</code> flag</li> <li>MCP Server: Model Context Protocol support with <code>--mcp</code></li> <li>All-in-One Mode: Combined services with <code>--all-in-one</code></li> <li>Deployment Scales: Small/medium/large/enterprise configurations</li> <li>Kubernetes Support: Helm charts and manifests generation</li> </ul>"},{"location":"changelog/#version-0112","title":"Version 0.1.12","text":"<p>Released: 2025-08-20</p>"},{"location":"changelog/#major-features_1","title":"\ud83c\udfaf Major Features","text":"<ul> <li>Centralized Database: Unified LanceDB management</li> <li>Advanced Query Engine: Multi-field filtering and reranking</li> <li>Parallel Batch Processing: Progress tracking and resumability</li> <li>Cloud Storage: S3/MinIO integration</li> <li>Enhanced Embeddings: Multiple providers with intelligent caching</li> </ul>"},{"location":"changelog/#version-0110","title":"Version 0.1.10","text":"<p>Released: 2025-08-15</p>"},{"location":"changelog/#features_2","title":"\u2728 Features","text":"<ul> <li>Hybrid Detection: Automatic network/flow diagram classification</li> <li>Improved Accuracy: Enhanced component extraction algorithms</li> <li>Better Error Handling: Graceful fallbacks for processing failures</li> </ul>"},{"location":"changelog/#version-017","title":"Version 0.1.7","text":"<p>Released: 2025-08-10</p>"},{"location":"changelog/#major-features_2","title":"\ud83c\udfaf Major Features","text":"<ul> <li>Vector Database: Automatic LanceDB file generation</li> <li>RAG Optimization: Minimal metadata for optimal search</li> <li>Chunk Management: Intelligent document chunking</li> </ul>"},{"location":"changelog/#version-014","title":"Version 0.1.4","text":"<p>Released: 2025-08-01</p>"},{"location":"changelog/#new-features_1","title":"\u2728 New Features","text":"<ul> <li>Multi-Model Support: Different models for different tasks</li> <li>Model Optimization: Task-specific model selection</li> <li>Performance Modes: Fast/balanced/accurate processing</li> </ul>"},{"location":"changelog/#version-010","title":"Version 0.1.0","text":"<p>Released: 2025-07-01</p>"},{"location":"changelog/#initial-release","title":"\ud83c\udf89 Initial Release","text":"<ul> <li>Network diagram detection and extraction</li> <li>Mermaid.js generation</li> <li>PDF processing with OCR</li> <li>Basic CLI interface</li> <li>Ollama integration</li> </ul>"},{"location":"changelog/#upcoming-features","title":"Upcoming Features","text":""},{"location":"changelog/#version-020-planned","title":"Version 0.2.0 (Planned)","text":"<ul> <li>Web UI interface</li> <li>Real-time collaboration</li> <li>Custom model training</li> <li>Enterprise SSO integration</li> <li>Advanced analytics dashboard</li> </ul>"},{"location":"changelog/#version-030-planned","title":"Version 0.3.0 (Planned)","text":"<ul> <li>AutoML for model selection</li> <li>Federated learning support</li> <li>Multi-language support</li> <li>Graph database integration</li> <li>Compliance reporting</li> </ul>"},{"location":"changelog/#migration-guides","title":"Migration Guides","text":""},{"location":"changelog/#from-0115-to-0116","title":"From 0.1.15 to 0.1.16","text":"<ul> <li>Update default model to NetIntelOCR-7B-0925</li> <li>Export and update prompts using new management system</li> <li>Test flow diagram processing with new validator</li> </ul>"},{"location":"changelog/#from-0112-to-0115","title":"From 0.1.12 to 0.1.15","text":"<ul> <li>Migrate from LanceDB to Milvus</li> <li>Update embedding dimensions to 4096</li> <li>Regenerate vector indices</li> </ul>"},{"location":"changelog/#from-017-to-0112","title":"From 0.1.7 to 0.1.12","text":"<ul> <li>Update batch processing scripts</li> <li>Configure cloud storage backends</li> <li>Migrate to centralized database</li> </ul>"},{"location":"changelog/#deprecation-notices","title":"Deprecation Notices","text":""},{"location":"changelog/#deprecated-in-0116","title":"Deprecated in 0.1.16","text":"<ul> <li>Old flow diagram processor (use enhanced version)</li> <li>Manual prompt editing in code (use prompt management)</li> </ul>"},{"location":"changelog/#deprecated-in-0115","title":"Deprecated in 0.1.15","text":"<ul> <li>LanceDB backend (use Milvus)</li> <li>768-dimension embeddings (use 4096)</li> </ul>"},{"location":"changelog/#will-be-removed-in-020","title":"Will be removed in 0.2.0","text":"<ul> <li>Legacy CLI arguments</li> <li>Old configuration format</li> <li>Direct Ollama API calls</li> </ul>"},{"location":"changelog/#support","title":"Support","text":"<p>For issues and questions: - GitHub: https://github.com/VisionMLNet/NetIntelOCR/issues - Documentation: https://visionml.net/docs - PyPI: https://pypi.org/project/netintel-ocr/ - Discord: https://discord.gg/netintel-ocr</p>"},{"location":"customization/","title":"Customization Guide","text":""},{"location":"customization/#prompt-management","title":"Prompt Management","text":""},{"location":"customization/#export-current-prompts","title":"Export Current Prompts","text":"<pre><code># Export all prompts to YAML\nnetintel-ocr --export-prompts prompts.yaml\n\n# Export specific category\nnetintel-ocr --export-prompts network-prompts.yaml --category network\n</code></pre>"},{"location":"customization/#import-custom-prompts","title":"Import Custom Prompts","text":"<pre><code># Import modified prompts\nnetintel-ocr --import-prompts custom-prompts.yaml\n\n# Validate prompts\nnetintel-ocr --validate-prompts custom-prompts.yaml\n</code></pre>"},{"location":"customization/#prompt-structure","title":"Prompt Structure","text":"<pre><code>network_detection:\n  description: \"Detect network diagrams in images\"\n  prompt: |\n    Analyze this image for network architecture elements:\n    - Routers, switches, firewalls\n    - Network zones and segments\n    - Connection types and protocols\n\n    Return confidence score 0-1.\n\ncomponent_extraction:\n  description: \"Extract network components\"\n  prompt: |\n    Identify all network components:\n    {\n      \"components\": [...],\n      \"connections\": [...],\n      \"zones\": [...]\n    }\n</code></pre>"},{"location":"customization/#key-tuning-parameters","title":"Key Tuning Parameters","text":""},{"location":"customization/#1-detection-confidence-threshold","title":"1. Detection Confidence Threshold","text":"<pre><code># Default: 0.7\nnetintel-ocr --confidence-threshold 0.9 document.pdf\n\n# Lower for more detection (may include false positives)\nnetintel-ocr --confidence-threshold 0.5 document.pdf\n</code></pre>"},{"location":"customization/#2-model-temperature","title":"2. Model Temperature","text":"<pre><code># In prompts.yaml\nnetwork_extraction:\n  temperature: 0.3  # Lower = more deterministic\n  max_tokens: 4096\n  top_p: 0.9\n</code></pre>"},{"location":"customization/#3-context-window-size","title":"3. Context Window Size","text":"<pre><code># Surrounding text for context extraction\nnetintel-ocr --context-before 1000 --context-after 1000 document.pdf\n\n# Disable context for speed\nnetintel-ocr --no-context document.pdf\n</code></pre>"},{"location":"customization/#4-extraction-strategies","title":"4. Extraction Strategies","text":"<pre><code># Fast extraction (less accurate)\nnetintel-ocr --fast-extraction document.pdf\n\n# Comprehensive extraction (slower)\nnetintel-ocr --comprehensive document.pdf\n\n# Multi-pass extraction\nnetintel-ocr --multi-pass 3 document.pdf\n</code></pre>"},{"location":"customization/#5-output-verbosity","title":"5. Output Verbosity","text":"<pre><code># Minimal output\nnetintel-ocr --output minimal document.pdf\n\n# Include all metadata\nnetintel-ocr --output detailed document.pdf\n\n# Custom fields\nnetintel-ocr --include-fields \"components,security,recommendations\" document.pdf\n</code></pre>"},{"location":"customization/#6-mermaid-syntax-preferences","title":"6. Mermaid Syntax Preferences","text":"<pre><code># In config.yaml\nmermaid:\n  direction: TB  # Top-Bottom (or LR, RL, BT)\n  theme: default\n  node_shape: rectangle  # Or circle, diamond, hexagon\n  include_labels: true\n  simplify_connections: false\n</code></pre>"},{"location":"customization/#model-selection-tips","title":"Model Selection Tips","text":""},{"location":"customization/#vision-models-comparison","title":"Vision Models Comparison","text":"Model Speed Accuracy Memory Best For qwen2.5vl:7b Fast High 8GB General use llava:13b Medium Very High 16GB Complex diagrams minicpm-v Very Fast Medium 4GB Quick processing cogvlm Slow Highest 32GB Critical accuracy"},{"location":"customization/#selecting-models-by-document-type","title":"Selecting Models by Document Type","text":"<pre><code># Technical specifications\nnetintel-ocr --model Nanonets-OCR-s:latest \\\n             --network-model cogvlm:latest \\\n             technical-spec.pdf\n\n# Marketing materials (simpler diagrams)\nnetintel-ocr --model minicpm-v:latest \\\n             --network-model minicpm-v:latest \\\n             marketing-doc.pdf\n\n# Security documentation\nnetintel-ocr --model qwen2.5vl:7b \\\n             --security-focus \\\n             security-guide.pdf\n</code></pre>"},{"location":"customization/#custom-processing-pipelines","title":"Custom Processing Pipelines","text":""},{"location":"customization/#define-custom-pipeline","title":"Define Custom Pipeline","text":"<pre><code># custom_pipeline.py\nfrom netintel_ocr import Pipeline\n\npipeline = Pipeline()\npipeline.add_step(\"ocr\", model=\"Nanonets-OCR-s:latest\")\npipeline.add_step(\"detect\", confidence=0.8)\npipeline.add_step(\"extract\", strategy=\"comprehensive\")\npipeline.add_step(\"validate\", fix_errors=True)\npipeline.add_step(\"context\", window=2000)\n</code></pre>"},{"location":"customization/#use-custom-pipeline","title":"Use Custom Pipeline","text":"<pre><code>netintel-ocr --pipeline custom_pipeline.py document.pdf\n</code></pre>"},{"location":"customization/#advanced-prompt-engineering","title":"Advanced Prompt Engineering","text":""},{"location":"customization/#component-extraction-enhancement","title":"Component Extraction Enhancement","text":"<pre><code>component_extraction:\n  prompt: |\n    Extract network components with these specific details:\n    1. Component type (router/switch/firewall/server/endpoint)\n    2. Component name/label\n    3. IP addresses or network ranges\n    4. Security zone assignment\n    5. Criticality level (high/medium/low)\n\n    For each connection include:\n    - Source and destination components\n    - Protocol/port information\n    - Direction (unidirectional/bidirectional)\n    - Bandwidth or capacity if shown\n</code></pre>"},{"location":"customization/#security-analysis-focus","title":"Security Analysis Focus","text":"<pre><code>security_analysis:\n  prompt: |\n    Analyze security aspects:\n    - Identify trust boundaries and security zones\n    - Detect exposed services and entry points\n    - Map data flows crossing zone boundaries\n    - Identify potential attack vectors\n    - Suggest security improvements\n\n    Priority: Accuracy over speed\n</code></pre>"},{"location":"customization/#performance-optimization","title":"Performance Optimization","text":""},{"location":"customization/#batch-processing","title":"Batch Processing","text":"<pre><code># Process multiple files efficiently\nnetintel-ocr --batch \\\n             --max-parallel 4 \\\n             --cache-models \\\n             *.pdf\n</code></pre>"},{"location":"customization/#gpu-acceleration","title":"GPU Acceleration","text":"<pre><code># Enable GPU\nexport CUDA_VISIBLE_DEVICES=0\nnetintel-ocr --gpu document.pdf\n\n# Multi-GPU\nexport CUDA_VISIBLE_DEVICES=0,1\nnetintel-ocr --gpu --parallel-pages 2 document.pdf\n</code></pre>"},{"location":"customization/#caching","title":"Caching","text":"<pre><code># Enable result caching\nnetintel-ocr --cache-dir /tmp/netintel-cache document.pdf\n\n# Clear cache\nnetintel-ocr --clear-cache\n</code></pre>"},{"location":"customization/#validation-rules","title":"Validation Rules","text":""},{"location":"customization/#custom-validation","title":"Custom Validation","text":"<pre><code>validation_rules:\n  network:\n    - rule: \"All components must have unique IDs\"\n    - rule: \"Connections must reference existing components\"\n    - rule: \"Security zones must be properly labeled\"\n\n  mermaid:\n    - rule: \"No orphaned nodes\"\n    - rule: \"Valid Mermaid syntax\"\n    - rule: \"Consistent node naming\"\n</code></pre>"},{"location":"customization/#apply-validation","title":"Apply Validation","text":"<pre><code>netintel-ocr --validation-rules custom-rules.yaml document.pdf\n</code></pre>"},{"location":"customization/#additional-resources","title":"Additional Resources","text":"<ul> <li>Full Documentation: https://visionml.net/docs</li> <li>PyPI Package: https://pypi.org/project/netintel-ocr/</li> <li>Example Prompts: https://github.com/VisionMLNet/NetIntelOCR/tree/main/prompts</li> </ul>"},{"location":"customization/#next-steps","title":"Next Steps","text":"<ul> <li>Vector Search Guide - Configure semantic search</li> <li>Deployment Guide - Production setup</li> <li>Quick Start Guide - Basic usage</li> </ul>"},{"location":"deployment/","title":"Deployment Guide","text":"<p>Platform Requirements</p> <p>Linux Only - NetIntel-OCR is tested and supported only on Linux systems.</p> <ul> <li>Supported OS: Ubuntu 20.04/22.04, RHEL 8/9, Debian 11/12</li> <li>Python: 3.11.x or 3.12.x ONLY</li> <li>Architecture: x86_64 (ARM support planned)</li> </ul> <p>Windows and macOS deployments are not currently supported.</p>"},{"location":"deployment/#initialization","title":"Initialization","text":"<p>NetIntel-OCR provides automated deployment configuration:</p> <pre><code># Generate deployment configurations\nnetintel-ocr --init\n\n# Creates:\n# - docker-compose.yml\n# - kubernetes manifests\n# - .env configuration\n</code></pre>"},{"location":"deployment/#docker-deployment","title":"Docker Deployment","text":""},{"location":"deployment/#single-container","title":"Single Container","text":"<pre><code># Use Python 3.11 or 3.12 ONLY\nFROM python:3.11-slim-bullseye\n# OR: FROM python:3.12-slim-bookworm\n\nWORKDIR /app\n\n# Install system dependencies (Linux only)\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    g++ \\\n    python3-dev \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install NetIntel-OCR from PyPI\n# https://pypi.org/project/netintel-ocr/\nRUN pip install netintel-ocr\n\n# Configure Ollama endpoint\nENV OLLAMA_HOST=http://ollama:11434\n\nCMD [\"netintel-ocr\", \"--api\"]\n</code></pre> <p>Base Image Selection</p> <ul> <li>Use <code>python:3.11-slim-bullseye</code> for Debian 11 base</li> <li>Use <code>python:3.12-slim-bookworm</code> for Debian 12 base</li> <li>Alpine Linux images are not supported due to dependency issues</li> </ul>"},{"location":"deployment/#docker-compose","title":"Docker Compose","text":"<p>Generated <code>docker-compose.yml</code>:</p> <pre><code>version: '3.8'\n\nservices:\n  netintel-ocr:\n    image: netintel-ocr:latest\n    container_name: netintel-ocr\n    environment:\n      - OLLAMA_HOST=http://ollama:11434\n      - API_PORT=8000\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - ./input:/app/input\n      - ./output:/app/output\n      - ./config:/app/config\n    depends_on:\n      - ollama\n    restart: unless-stopped\n\n  ollama:\n    image: ollama/ollama:latest\n    container_name: ollama\n    ports:\n      - \"11434:11434\"\n    volumes:\n      - ollama_data:/root/.ollama\n    deploy:\n      resources:\n        reservations:\n          devices:\n            - driver: nvidia\n              count: 1\n              capabilities: [gpu]\n\n  milvus:\n    image: milvusdb/milvus:latest\n    container_name: milvus\n    ports:\n      - \"19530:19530\"\n      - \"9091:9091\"\n    volumes:\n      - milvus_data:/var/lib/milvus\n    environment:\n      - ETCD_ENDPOINTS=etcd:2379\n      - MINIO_ADDRESS=minio:9000\n\nvolumes:\n  ollama_data:\n  milvus_data:\n</code></pre>"},{"location":"deployment/#build-and-run","title":"Build and Run","text":"<pre><code># Verify Linux system\nuname -s  # Should output \"Linux\"\n\n# Verify Python version in container\ndocker run --rm python:3.11-slim-bullseye python --version\n# Output: Python 3.11.x\n\n# Build image\ndocker build -t netintel-ocr:latest .\n\n# Start services\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f netintel-ocr\n</code></pre> <p>Platform Compatibility</p> <p>Docker images built on Linux may not work correctly on Windows/Mac Docker Desktop due to architecture differences.</p>"},{"location":"deployment/#kubernetes-deployment","title":"Kubernetes Deployment","text":""},{"location":"deployment/#configmap","title":"ConfigMap","text":"<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: netintel-ocr-config\n  namespace: default\ndata:\n  OLLAMA_HOST: \"http://ollama-service:11434\"\n  API_PORT: \"8000\"\n  LOG_LEVEL: \"INFO\"\n</code></pre>"},{"location":"deployment/#deployment","title":"Deployment","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: netintel-ocr\n  namespace: default\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: netintel-ocr\n  template:\n    metadata:\n      labels:\n        app: netintel-ocr\n    spec:\n      containers:\n      - name: netintel-ocr\n        image: netintel-ocr:latest\n        ports:\n        - containerPort: 8000\n        envFrom:\n        - configMapRef:\n            name: netintel-ocr-config\n        volumeMounts:\n        - name: input\n          mountPath: /app/input\n        - name: output\n          mountPath: /app/output\n        resources:\n          requests:\n            memory: \"4Gi\"\n            cpu: \"2\"\n          limits:\n            memory: \"8Gi\"\n            cpu: \"4\"\n      volumes:\n      - name: input\n        persistentVolumeClaim:\n          claimName: netintel-input-pvc\n      - name: output\n        persistentVolumeClaim:\n          claimName: netintel-output-pvc\n</code></pre>"},{"location":"deployment/#service","title":"Service","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: netintel-ocr-service\n  namespace: default\nspec:\n  selector:\n    app: netintel-ocr\n  ports:\n  - protocol: TCP\n    port: 8000\n    targetPort: 8000\n  type: LoadBalancer\n</code></pre>"},{"location":"deployment/#horizontal-pod-autoscaler","title":"Horizontal Pod Autoscaler","text":"<pre><code>apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: netintel-ocr-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: netintel-ocr\n  minReplicas: 2\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n</code></pre>"},{"location":"deployment/#deploy-to-kubernetes","title":"Deploy to Kubernetes","text":"<pre><code># Apply configurations\nkubectl apply -f k8s/\n\n# Check deployment\nkubectl get pods -l app=netintel-ocr\n\n# View logs\nkubectl logs -f deployment/netintel-ocr\n\n# Scale deployment\nkubectl scale deployment netintel-ocr --replicas=5\n</code></pre>"},{"location":"deployment/#production-configuration","title":"Production Configuration","text":""},{"location":"deployment/#system-requirements","title":"System Requirements","text":"<p>Production Environment</p> <ul> <li>OS: Linux x86_64 (Ubuntu 20.04+ or RHEL 8+ recommended)</li> <li>Python: 3.11.x or 3.12.x (verified installation)</li> <li>Memory: 16GB minimum, 32GB recommended</li> <li>CPU: 8+ cores recommended</li> <li>Storage: SSD with 100GB+ available</li> </ul>"},{"location":"deployment/#environment-variables","title":"Environment Variables","text":"<pre><code># Python version check (REQUIRED)\nPYTHON_VERSION=$(python3 --version | cut -d' ' -f2)\n# Must be 3.11.x or 3.12.x\n\n# Required\nOLLAMA_HOST=http://ollama.internal:11434\nMILVUS_HOST=milvus.internal:19530\n\n# Optional\nAPI_PORT=8000\nLOG_LEVEL=INFO\nMAX_WORKERS=4\nTIMEOUT_SECONDS=300\nCACHE_DIR=/app/cache\n</code></pre>"},{"location":"deployment/#health-checks","title":"Health Checks","text":"<pre><code>livenessProbe:\n  httpGet:\n    path: /health\n    port: 8000\n  initialDelaySeconds: 30\n  periodSeconds: 10\n\nreadinessProbe:\n  httpGet:\n    path: /ready\n    port: 8000\n  initialDelaySeconds: 5\n  periodSeconds: 5\n</code></pre>"},{"location":"deployment/#monitoring","title":"Monitoring","text":"<pre><code># Prometheus metrics\n- port: 9090\n  name: metrics\n  annotations:\n    prometheus.io/scrape: \"true\"\n    prometheus.io/path: \"/metrics\"\n</code></pre>"},{"location":"deployment/#api-mode","title":"API Mode","text":""},{"location":"deployment/#start-api-server","title":"Start API Server","text":"<pre><code># Local\nnetintel-ocr --api --port 8000\n\n# Docker\ndocker run -p 8000:8000 netintel-ocr:latest --api\n</code></pre>"},{"location":"deployment/#api-endpoints","title":"API Endpoints","text":"<pre><code># Process document\ncurl -X POST http://localhost:8000/process \\\n  -F \"file=@document.pdf\" \\\n  -F \"model=qwen2.5vl:7b\"\n\n# Check status\ncurl http://localhost:8000/status/job-id\n\n# Get results\ncurl http://localhost:8000/results/job-id\n</code></pre>"},{"location":"deployment/#storage-configuration","title":"Storage Configuration","text":""},{"location":"deployment/#persistent-volumes","title":"Persistent Volumes","text":"<pre><code>apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: netintel-output-pvc\nspec:\n  accessModes:\n    - ReadWriteMany\n  storageClassName: nfs-storage\n  resources:\n    requests:\n      storage: 100Gi\n</code></pre>"},{"location":"deployment/#s3-integration","title":"S3 Integration","text":"<pre><code># Configure S3 backend\nexport AWS_ACCESS_KEY_ID=your-key\nexport AWS_SECRET_ACCESS_KEY=your-secret\nexport S3_BUCKET=netintel-output\nexport S3_REGION=us-east-1\n</code></pre>"},{"location":"deployment/#next-steps","title":"Next Steps","text":"<ul> <li>Customization Guide - Configure prompts and models</li> <li>Vector Search Guide - Set up Milvus integration</li> <li>Quick Start Guide - Basic usage examples</li> </ul>"},{"location":"knowledge-graph/","title":"Knowledge Graph Processing","text":""},{"location":"knowledge-graph/#overview","title":"Overview","text":"<p>NetIntel-OCR v0.1.17 introduces powerful Knowledge Graph (KG) capabilities that automatically extract and structure relationships from your network documentation. The system creates semantic graphs from network diagrams, flow charts, and technical text, enabling advanced querying and relationship analysis.</p> <p>New in v0.1.17</p> <p>Knowledge Graph processing is enabled by default in v0.1.17. No additional flags needed!</p>"},{"location":"knowledge-graph/#quick-start","title":"Quick Start","text":""},{"location":"knowledge-graph/#basic-usage","title":"Basic Usage","text":"<pre><code># Process with KG enabled (default)\nnetintel-ocr document.pdf\n\n# Explicitly disable KG if not needed\nnetintel-ocr --no-kg document.pdf\n</code></pre>"},{"location":"knowledge-graph/#what-gets-extracted","title":"What Gets Extracted","text":"<p>The Knowledge Graph system automatically identifies and extracts:</p> <ul> <li>Network Components: Routers, switches, firewalls, servers, load balancers</li> <li>Relationships: Connections, data flows, dependencies, configurations</li> <li>Attributes: IP addresses, VLANs, protocols, ports, bandwidths</li> <li>Topologies: Network paths, redundancy patterns, hierarchies</li> <li>Business Context: Services, applications, security zones</li> </ul>"},{"location":"knowledge-graph/#architecture","title":"Architecture","text":""},{"location":"knowledge-graph/#components","title":"Components","text":"<pre><code>graph LR\n    A[PDF Document] --&gt; B[OCR Engine]\n    B --&gt; C[KG Constructor]\n    C --&gt; D[FalkorDB]\n    C --&gt; E[PyKEEN Embeddings]\n    D --&gt; F[Graph Queries]\n    E --&gt; F\n    F --&gt; G[Hybrid Retrieval]</code></pre>"},{"location":"knowledge-graph/#storage-layers","title":"Storage Layers","text":"<ol> <li>FalkorDB: Graph database for storing entities and relationships</li> <li>Milvus: Vector database for text embeddings (4096D)</li> <li>KG Embeddings: 200D knowledge graph embeddings stored as properties</li> </ol>"},{"location":"knowledge-graph/#configuration","title":"Configuration","text":""},{"location":"knowledge-graph/#kg-model-selection","title":"KG Model Selection","text":"<p>Choose from 8 different embedding models based on your use case:</p> <pre><code># TransE - Fast, good for simple relationships\nnetintel-ocr --kg-model TransE document.pdf\n\n# RotatE - Best for complex relationships (default)\nnetintel-ocr --kg-model RotatE document.pdf\n\n# ComplEx - Good for symmetric relationships\nnetintel-ocr --kg-model ComplEx document.pdf\n\n# Available models: TransE, RotatE, ComplEx, DistMult, ConvE, TuckER, HolE, RESCAL\n</code></pre>"},{"location":"knowledge-graph/#training-parameters","title":"Training Parameters","text":"<pre><code># Customize training epochs (default: 100)\nnetintel-ocr --kg-epochs 200 document.pdf\n\n# Adjust batch size (default: 256)\nnetintel-ocr --kg-batch-size 512 document.pdf\n\n# Combined configuration\nnetintel-ocr \\\n  --kg-model RotatE \\\n  --kg-epochs 150 \\\n  --kg-batch-size 384 \\\n  document.pdf\n</code></pre>"},{"location":"knowledge-graph/#database-configuration","title":"Database Configuration","text":"<pre><code># Custom FalkorDB host/port\nnetintel-ocr \\\n  --falkordb-host 192.168.1.100 \\\n  --falkordb-port 6379 \\\n  document.pdf\n\n# Using environment variables\nexport FALKORDB_HOST=falkordb.local\nexport FALKORDB_PORT=6379\nnetintel-ocr document.pdf\n</code></pre>"},{"location":"knowledge-graph/#processing-modes","title":"Processing Modes","text":""},{"location":"knowledge-graph/#network-diagrams","title":"Network Diagrams","text":"<p>When processing network diagrams, the KG system:</p> <ol> <li>Identifies network components from visual elements</li> <li>Extracts connection relationships from lines/arrows</li> <li>Preserves spatial layout information</li> <li>Links related text annotations</li> </ol> <pre><code># Process network-only with KG\nnetintel-ocr --network-only document.pdf\n\n# Output includes:\n# - network_topology.json (graph structure)\n# - kg_embeddings.npy (learned embeddings)\n# - relationships.cypher (import queries)\n</code></pre>"},{"location":"knowledge-graph/#flow-diagrams","title":"Flow Diagrams","text":"<p>For flow diagrams and process charts:</p> <ol> <li>Extracts process steps as entities</li> <li>Maps flow direction as relationships</li> <li>Captures decision points and branches</li> <li>Associates metadata and conditions</li> </ol> <pre><code># Process with flow detection\nnetintel-ocr --flow-model qwen2.5vl:7b document.pdf\n</code></pre>"},{"location":"knowledge-graph/#hybrid-processing","title":"Hybrid Processing","text":"<p>Combines multiple extraction methods:</p> <pre><code># Full hybrid processing (default)\nnetintel-ocr document.pdf\n\n# This enables:\n# - Network diagram KG extraction\n# - Flow diagram relationship mapping\n# - Table structure preservation\n# - Text entity recognition\n</code></pre>"},{"location":"knowledge-graph/#querying-knowledge-graphs","title":"Querying Knowledge Graphs","text":""},{"location":"knowledge-graph/#using-the-cli","title":"Using the CLI","text":"<pre><code># Query entities\nnetintel-ocr kg query --entity \"Router-A\"\n\n# Find paths between components\nnetintel-ocr kg path --from \"Switch-1\" --to \"Firewall-Main\"\n\n# Analyze relationships\nnetintel-ocr kg relations --type \"connects_to\"\n</code></pre>"},{"location":"knowledge-graph/#query-types","title":"Query Types","text":"<p>The system supports 6 query types:</p> <ol> <li>Entity-Centric: Information about specific components</li> <li>Relational: Connection and dependency queries</li> <li>Topological: Path finding and network analysis</li> <li>Semantic: Content-based similarity search</li> <li>Analytical: Aggregations and statistics</li> <li>Exploratory: Pattern discovery</li> </ol>"},{"location":"knowledge-graph/#example-queries","title":"Example Queries","text":"<pre><code># Python API usage\nfrom netintel_ocr.kg import KnowledgeGraphQuery\n\nkg = KnowledgeGraphQuery(collection=\"network_docs\")\n\n# Find all connected components\ncomponents = kg.find_connected(\"Router-Core-1\")\n\n# Get network paths\npaths = kg.shortest_path(\n    source=\"DMZ-Switch\",\n    target=\"Internal-DB\",\n    max_hops=5\n)\n\n# Analyze redundancy\nredundancy = kg.analyze_redundancy(\"Service-WebApp\")\n</code></pre>"},{"location":"knowledge-graph/#batch-processing-with-kg","title":"Batch Processing with KG","text":""},{"location":"knowledge-graph/#process-multiple-documents","title":"Process Multiple Documents","text":"<pre><code># Batch process with KG (enabled by default)\nnetintel-ocr --batch *.pdf\n\n# Batch with custom KG settings\nnetintel-ocr --batch \\\n  --kg-model ComplEx \\\n  --kg-epochs 200 \\\n  --max-parallel 4 \\\n  *.pdf\n</code></pre>"},{"location":"knowledge-graph/#building-unified-knowledge-base","title":"Building Unified Knowledge Base","text":"<pre><code># Ingest to shared knowledge graph\nnetintel-ocr --batch-ingest \\\n  --collection enterprise_kg \\\n  --kg-merge-strategy union \\\n  /docs/**/*.pdf\n</code></pre>"},{"location":"knowledge-graph/#integration-with-rag","title":"Integration with RAG","text":""},{"location":"knowledge-graph/#enhanced-retrieval","title":"Enhanced Retrieval","text":"<p>The KG system enhances RAG (Retrieval Augmented Generation) with:</p> <ul> <li>Graph-aware context: Include related entities in context</li> <li>Path-based retrieval: Follow relationships for comprehensive answers</li> <li>Hybrid scoring: Combine vector similarity with graph distance</li> </ul> <pre><code># Enable enhanced RAG\nnetintel-ocr --rag-enhanced document.pdf\n\n# Query with RAG\nnetintel-ocr rag query \\\n  --question \"What are the dependencies of Service-A?\" \\\n  --use-kg \\\n  --context-hops 2\n</code></pre>"},{"location":"knowledge-graph/#retrieval-strategies","title":"Retrieval Strategies","text":"<pre><code># Vector-first (fast, good for content)\nnetintel-ocr --retrieval-strategy vector_first\n\n# Graph-first (accurate for relationships)\nnetintel-ocr --retrieval-strategy graph_first\n\n# Parallel (balanced approach)\nnetintel-ocr --retrieval-strategy parallel\n\n# Adaptive (query-dependent)\nnetintel-ocr --retrieval-strategy adaptive\n</code></pre>"},{"location":"knowledge-graph/#performance-optimization","title":"Performance Optimization","text":""},{"location":"knowledge-graph/#memory-management","title":"Memory Management","text":"<pre><code># Limit graph size for large documents\nnetintel-ocr \\\n  --kg-max-entities 10000 \\\n  --kg-max-relations 50000 \\\n  document.pdf\n\n# Stream processing for very large graphs\nnetintel-ocr \\\n  --kg-streaming \\\n  --kg-chunk-size 1000 \\\n  large_document.pdf\n</code></pre>"},{"location":"knowledge-graph/#gpu-acceleration","title":"GPU Acceleration","text":"<pre><code># Enable GPU for embeddings training\nnetintel-ocr \\\n  --kg-gpu \\\n  --kg-device cuda:0 \\\n  document.pdf\n\n# Multi-GPU training\nnetintel-ocr \\\n  --kg-gpu \\\n  --kg-device cuda:0,cuda:1 \\\n  --kg-distributed \\\n  document.pdf\n</code></pre>"},{"location":"knowledge-graph/#docker-deployment","title":"Docker Deployment","text":""},{"location":"knowledge-graph/#quick-start-with-docker-compose","title":"Quick Start with Docker Compose","text":"<pre><code># docker-compose.kg.yml\nversion: '3.8'\n\nservices:\n  falkordb:\n    image: falkordb/falkordb:latest\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - falkordb_data:/data\n\n  milvus:\n    image: milvusdb/milvus:latest\n    ports:\n      - \"19530:19530\"\n    volumes:\n      - milvus_data:/var/lib/milvus\n\n  netintel-ocr:\n    image: visionml/netintel-ocr:v0.1.17\n    environment:\n      - FALKORDB_HOST=falkordb\n      - MILVUS_HOST=milvus:19530\n    volumes:\n      - ./documents:/documents\n      - ./output:/output\n\nvolumes:\n  falkordb_data:\n  milvus_data:\n</code></pre> <p>Start the stack:</p> <pre><code>docker-compose -f docker-compose.kg.yml up -d\n</code></pre>"},{"location":"knowledge-graph/#kubernetes-deployment","title":"Kubernetes Deployment","text":""},{"location":"knowledge-graph/#helm-installation","title":"Helm Installation","text":"<pre><code># Add NetIntel-OCR helm repo\nhelm repo add netintel https://visionml.net/helm\nhelm repo update\n\n# Install with KG enabled\nhelm install netintel-ocr netintel/netintel-ocr \\\n  --set kg.enabled=true \\\n  --set falkordb.enabled=true \\\n  --set milvus.enabled=true\n</code></pre>"},{"location":"knowledge-graph/#custom-values","title":"Custom Values","text":"<pre><code># values-kg.yaml\nkg:\n  enabled: true\n  model: RotatE\n  epochs: 150\n  batchSize: 384\n\nfalkordb:\n  enabled: true\n  persistence:\n    size: 10Gi\n\nmilvus:\n  enabled: true\n  persistence:\n    size: 50Gi\n</code></pre>"},{"location":"knowledge-graph/#monitoring-analytics","title":"Monitoring &amp; Analytics","text":""},{"location":"knowledge-graph/#kg-statistics","title":"KG Statistics","text":"<pre><code># View graph statistics\nnetintel-ocr kg stats --collection network_docs\n\n# Output:\n# Entities: 1,247\n# Relationships: 3,892\n# Components: 156\n# Clusters: 12\n# Average degree: 6.2\n</code></pre>"},{"location":"knowledge-graph/#performance-metrics","title":"Performance Metrics","text":"<pre><code># Benchmark KG operations\nnetintel-ocr kg benchmark \\\n  --operations 1000 \\\n  --concurrent 10\n\n# Monitor training progress\nnetintel-ocr kg train \\\n  --monitor \\\n  --tensorboard-dir ./logs\n</code></pre>"},{"location":"knowledge-graph/#troubleshooting","title":"Troubleshooting","text":""},{"location":"knowledge-graph/#common-issues","title":"Common Issues","text":"<p>KG processing is slow: <pre><code># Reduce epochs for faster processing\nnetintel-ocr --kg-epochs 50 document.pdf\n\n# Or disable if not needed\nnetintel-ocr --no-kg document.pdf\n</code></pre></p> <p>Out of memory errors: <pre><code># Reduce batch size\nnetintel-ocr --kg-batch-size 128 document.pdf\n\n# Enable streaming mode\nnetintel-ocr --kg-streaming document.pdf\n</code></pre></p> <p>FalkorDB connection issues: <pre><code># Check FalkorDB status\nredis-cli -h localhost -p 6379 ping\n\n# Verify graph module\nredis-cli MODULE LIST\n</code></pre></p>"},{"location":"knowledge-graph/#debug-mode","title":"Debug Mode","text":"<pre><code># Enable debug output\nnetintel-ocr --debug --kg-verbose document.pdf\n\n# Save intermediate results\nnetintel-ocr \\\n  --kg-save-intermediate \\\n  --output-dir ./debug \\\n  document.pdf\n</code></pre>"},{"location":"knowledge-graph/#api-reference","title":"API Reference","text":""},{"location":"knowledge-graph/#python-api","title":"Python API","text":"<pre><code>from netintel_ocr.kg import KnowledgeGraphSystem\n\n# Initialize KG system\nkg_system = KnowledgeGraphSystem(\n    falkordb_host=\"localhost\",\n    falkordb_port=6379,\n    model=\"RotatE\",\n    epochs=100\n)\n\n# Process document\ngraph = kg_system.process_document(\"document.pdf\")\n\n# Query graph\nresults = kg_system.query(\n    query_type=\"entity_centric\",\n    entity=\"Router-A\"\n)\n\n# Export graph\nkg_system.export(\n    format=\"cypher\",\n    output=\"network_graph.cypher\"\n)\n</code></pre>"},{"location":"knowledge-graph/#rest-api","title":"REST API","text":"<pre><code># Process with KG\ncurl -X POST http://localhost:8000/process \\\n  -F \"file=@document.pdf\" \\\n  -F \"enable_kg=true\" \\\n  -F \"kg_model=RotatE\"\n\n# Query KG\ncurl -X GET http://localhost:8000/kg/query \\\n  -d \"entity=Router-A\" \\\n  -d \"hops=2\"\n</code></pre>"},{"location":"knowledge-graph/#best-practices","title":"Best Practices","text":"<ol> <li>Model Selection:</li> <li>Use <code>TransE</code> for simple, hierarchical networks</li> <li>Use <code>RotatE</code> (default) for complex topologies</li> <li> <p>Use <code>ComplEx</code> for bidirectional relationships</p> </li> <li> <p>Performance:</p> </li> <li>Start with 100 epochs, increase if needed</li> <li>Use GPU for documents &gt; 50 pages</li> <li> <p>Enable streaming for very large graphs</p> </li> <li> <p>Integration:</p> </li> <li>Always persist graphs to FalkorDB for reuse</li> <li>Combine with vector search for best results</li> <li>Use batch processing for document sets</li> </ol>"},{"location":"knowledge-graph/#migration-from-v0116","title":"Migration from v0.1.16","text":"<p>If upgrading from v0.1.16:</p> <ol> <li>KG is now enabled by default - no flags needed</li> <li>Dependencies are included - no separate install required</li> <li>Use <code>--no-kg</code> to disable if you want v0.1.16 behavior</li> </ol> <pre><code># v0.1.16 behavior (no KG)\nnetintel-ocr --no-kg document.pdf\n\n# v0.1.17 default (with KG)\nnetintel-ocr document.pdf\n</code></pre>"},{"location":"knowledge-graph/#additional-resources","title":"Additional Resources","text":"<ul> <li>KG Architecture Specification</li> <li>PyKEEN Documentation</li> <li>FalkorDB Documentation</li> <li>Example Notebooks</li> </ul>"},{"location":"knowledge-graph/#support","title":"Support","text":"<p>For KG-related issues:</p> <pre><code># Generate diagnostic report\nnetintel-ocr kg diagnose --output kg_diagnostic.json\n\n# Check compatibility\nnetintel-ocr kg check-requirements\n</code></pre> <p>Contact support with diagnostic output for faster resolution.</p>"},{"location":"mcp/","title":"MCP Server Guide","text":""},{"location":"mcp/#model-context-protocol-integration","title":"Model Context Protocol Integration","text":"<p>NetIntel-OCR supports the Model Context Protocol (MCP) for seamless integration with AI assistants and LLM applications.</p>"},{"location":"mcp/#starting-mcp-server","title":"Starting MCP Server","text":""},{"location":"mcp/#basic-setup","title":"Basic Setup","text":"<pre><code># Start MCP server\nnetintel-ocr --mcp\n\n# With custom configuration\nnetintel-ocr --mcp --mcp-port 3000\n</code></pre>"},{"location":"mcp/#configuration-file","title":"Configuration File","text":"<pre><code>{\n  \"mcp\": {\n    \"enabled\": true,\n    \"port\": 3000,\n    \"tools\": [\n      \"process_document\",\n      \"search_diagrams\",\n      \"extract_components\"\n    ],\n    \"auth\": {\n      \"type\": \"bearer\",\n      \"token\": \"mcp-secret-token\"\n    }\n  }\n}\n</code></pre>"},{"location":"mcp/#available-tools","title":"Available Tools","text":""},{"location":"mcp/#process_document","title":"process_document","text":"<p>Process PDF documents and extract network/flow diagrams.</p> <pre><code>{\n  \"tool\": \"process_document\",\n  \"parameters\": {\n    \"file_path\": \"/path/to/document.pdf\",\n    \"start_page\": 1,\n    \"end_page\": 10,\n    \"model\": \"qwen2.5vl:7b\"\n  }\n}\n</code></pre>"},{"location":"mcp/#search_diagrams","title":"search_diagrams","text":"<p>Search for specific network components or patterns.</p> <pre><code>{\n  \"tool\": \"search_diagrams\", \n  \"parameters\": {\n    \"query\": \"firewall DMZ configuration\",\n    \"limit\": 5,\n    \"filters\": {\n      \"type\": \"network_diagram\"\n    }\n  }\n}\n</code></pre>"},{"location":"mcp/#extract_components","title":"extract_components","text":"<p>Extract specific components from diagrams.</p> <pre><code>{\n  \"tool\": \"extract_components\",\n  \"parameters\": {\n    \"image_path\": \"/path/to/diagram.png\",\n    \"component_types\": [\"firewall\", \"router\", \"switch\"]\n  }\n}\n</code></pre>"},{"location":"mcp/#claude-desktop-integration","title":"Claude Desktop Integration","text":""},{"location":"mcp/#configuration","title":"Configuration","text":"<p>Add to Claude Desktop config (<code>~/.config/claude/config.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"netintel-ocr\": {\n      \"command\": \"netintel-ocr\",\n      \"args\": [\"--mcp\"],\n      \"env\": {\n        \"OLLAMA_HOST\": \"http://localhost:11434\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"mcp/#usage-in-claude","title":"Usage in Claude","text":"<pre><code>User: Process the network architecture document and find all firewall configurations.\n\nClaude: I'll process the document using NetIntel-OCR to extract network diagrams and identify firewall configurations.\n\n[Uses process_document tool]\n[Uses search_diagrams tool with \"firewall\" query]\n\nI found 3 network diagrams containing firewall configurations:\n1. Page 5: DMZ architecture with dual firewalls\n2. Page 12: Internal segmentation firewall\n3. Page 18: Cloud gateway firewall setup\n</code></pre>"},{"location":"mcp/#vs-code-integration","title":"VS Code Integration","text":""},{"location":"mcp/#extension-setup","title":"Extension Setup","text":"<pre><code>{\n  \"mcp.servers\": [\n    {\n      \"name\": \"netintel-ocr\",\n      \"command\": \"netintel-ocr --mcp\",\n      \"env\": {\n        \"OLLAMA_HOST\": \"http://localhost:11434\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"mcp/#commands","title":"Commands","text":"<ul> <li><code>MCP: Process Current File</code> - Process open PDF</li> <li><code>MCP: Search Diagrams</code> - Search across processed documents</li> <li><code>MCP: Extract Components</code> - Extract from selected image</li> </ul>"},{"location":"mcp/#programmatic-usage","title":"Programmatic Usage","text":""},{"location":"mcp/#python-mcp-client","title":"Python MCP Client","text":"<pre><code>from mcp_client import MCPClient\n\n# Connect to MCP server\nclient = MCPClient(\"localhost:3000\")\n\n# Use tools\nresult = await client.call_tool(\n    \"process_document\",\n    {\n        \"file_path\": \"network.pdf\",\n        \"model\": \"qwen2.5vl:7b\"\n    }\n)\n\n# Get network diagrams\ndiagrams = result['diagrams']\nfor diagram in diagrams:\n    print(f\"Page {diagram['page']}: {diagram['type']}\")\n    print(diagram['mermaid'])\n</code></pre>"},{"location":"mcp/#nodejs-mcp-client","title":"Node.js MCP Client","text":"<pre><code>const { MCPClient } = require('@modelcontextprotocol/client');\n\nconst client = new MCPClient({\n  url: 'http://localhost:3000'\n});\n\n// Process document\nconst result = await client.callTool('process_document', {\n  file_path: 'network.pdf'\n});\n\nconsole.log(`Found ${result.diagrams.length} diagrams`);\n</code></pre>"},{"location":"mcp/#tool-responses","title":"Tool Responses","text":""},{"location":"mcp/#structured-output","title":"Structured Output","text":"<p>All tools return structured JSON responses:</p> <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"diagrams\": [\n      {\n        \"page\": 5,\n        \"type\": \"network_topology\",\n        \"confidence\": 0.95,\n        \"mermaid\": \"graph TB...\",\n        \"components\": [...],\n        \"context\": {\n          \"summary\": \"DMZ network architecture\",\n          \"security_zones\": [\"DMZ\", \"Internal\", \"External\"]\n        }\n      }\n    ],\n    \"processing_time\": 12.5\n  }\n}\n</code></pre>"},{"location":"mcp/#error-handling","title":"Error Handling","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"MODEL_NOT_FOUND\",\n    \"message\": \"Model 'unknown' not available\",\n    \"suggestions\": [\"qwen2.5vl:7b\", \"llava:13b\"]\n  }\n}\n</code></pre>"},{"location":"mcp/#advanced-features","title":"Advanced Features","text":""},{"location":"mcp/#streaming-responses","title":"Streaming Responses","text":"<pre><code># Enable streaming for large documents\nasync for chunk in client.stream_tool(\n    \"process_document\",\n    {\"file_path\": \"large.pdf\", \"stream\": True}\n):\n    print(f\"Processing page {chunk['page']}\")\n</code></pre>"},{"location":"mcp/#context-management","title":"Context Management","text":"<pre><code># Maintain context across calls\ncontext = client.create_context()\n\n# First call\nawait context.call_tool(\"process_document\", {...})\n\n# Subsequent call uses previous context\nawait context.call_tool(\"search_diagrams\", {\n    \"query\": \"related to previous document\"\n})\n</code></pre>"},{"location":"mcp/#custom-tools","title":"Custom Tools","text":"<p>Register custom tools for specific workflows:</p> <pre><code>@mcp_server.register_tool\ndef analyze_security(params):\n    \"\"\"Analyze security aspects of network diagrams.\"\"\"\n    return {\n        \"vulnerabilities\": [...],\n        \"recommendations\": [...],\n        \"risk_score\": 7.5\n    }\n</code></pre>"},{"location":"mcp/#all-in-one-mode","title":"All-in-One Mode","text":"<p>Start with all services:</p> <pre><code># MCP + API + Vector Store\nnetintel-ocr --all-in-one\n\n# Services available:\n# - MCP Server: port 3000\n# - REST API: port 8000\n# - Milvus: port 19530\n</code></pre>"},{"location":"mcp/#security","title":"Security","text":""},{"location":"mcp/#authentication","title":"Authentication","text":"<pre><code># Token authentication\nnetintel-ocr --mcp --mcp-token YOUR_SECRET_TOKEN\n\n# mTLS authentication\nnetintel-ocr --mcp \\\n  --mcp-cert server.crt \\\n  --mcp-key server.key \\\n  --mcp-ca ca.crt\n</code></pre>"},{"location":"mcp/#access-control","title":"Access Control","text":"<pre><code>{\n  \"mcp\": {\n    \"acl\": {\n      \"process_document\": [\"admin\", \"user\"],\n      \"search_diagrams\": [\"admin\", \"user\", \"readonly\"],\n      \"extract_components\": [\"admin\"]\n    }\n  }\n}\n</code></pre>"},{"location":"mcp/#monitoring","title":"Monitoring","text":""},{"location":"mcp/#metrics","title":"Metrics","text":"<pre><code>GET http://localhost:3000/metrics\n\nmcp_requests_total{tool=\"process_document\"} 156\nmcp_request_duration_seconds{tool=\"process_document\",quantile=\"0.99\"} 12.5\nmcp_active_connections 3\n</code></pre>"},{"location":"mcp/#logging","title":"Logging","text":"<pre><code># Enable debug logging\nnetintel-ocr --mcp --mcp-log-level DEBUG\n\n# Log format\n2024-01-15 10:30:45 [MCP] Tool called: process_document\n2024-01-15 10:30:57 [MCP] Response sent: success=true, time=12.5s\n</code></pre>"},{"location":"mcp/#next-steps","title":"Next Steps","text":"<ul> <li>Multi-Model Guide - Optimize model selection</li> <li>API Integration - REST API reference</li> <li>Batch Processing - Process multiple documents</li> </ul>"},{"location":"minirag/","title":"MiniRAG - Enhanced Retrieval with Knowledge Graphs","text":""},{"location":"minirag/#overview","title":"Overview","text":"<p>MiniRAG is NetIntel-OCR's advanced Retrieval-Augmented Generation system that combines traditional vector search with Knowledge Graph context for more accurate, explainable, and context-aware answers. It leverages both structured graph data and unstructured text to provide comprehensive responses to complex queries.</p>"},{"location":"minirag/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           User Query                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n             \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      Query Intent Classifier            \u2502\n\u2502  (Determines optimal retrieval path)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n             \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u25bc                 \u25bc          \u25bc          \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 FalkorDB \u2502    \u2502  PyKEEN  \u2502  \u2502 Milvus  \u2502 \u2502  Ollama  \u2502\n\u2502  Graph   \u2502    \u2502Embeddings\u2502  \u2502 Vectors \u2502 \u2502   LLM    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502                 \u2502          \u2502          \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n             \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        Result Fusion (RRF)              \u2502\n\u2502   (Combines multiple retrieval paths)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n             \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      Context-Enhanced Response          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"minirag/#installation-and-setup","title":"Installation and Setup","text":""},{"location":"minirag/#prerequisites","title":"Prerequisites","text":"<pre><code># Ensure NetIntel-OCR v0.1.17+ is installed\npip install netintel-ocr&gt;=0.1.17\n\n# Start required services\ndocker-compose up -d falkordb milvus ollama\n\n# Verify MiniRAG components\nnetintel-ocr rag check\n\n# Output:\n# \u2705 FalkorDB: Connected\n# \u2705 Milvus: Connected  \n# \u2705 Ollama: Connected\n# \u2705 MiniRAG: Ready\n# \u2705 Available LLMs: llama3, mistral, qwen2.5\n</code></pre>"},{"location":"minirag/#initialize-minirag","title":"Initialize MiniRAG","text":"<pre><code># Basic initialization\nnetintel-ocr rag init \\\n  --collection network_docs \\\n  --llm-model llama3 \\\n  --embedding-model nomic-embed-text\n\n# Advanced initialization with custom settings\nnetintel-ocr rag init \\\n  --collection production_infrastructure \\\n  --llm-model gpt-4 \\\n  --embedding-model text-embedding-3-large \\\n  --chunk-size 512 \\\n  --chunk-overlap 50 \\\n  --temperature 0.7 \\\n  --max-tokens 2000\n</code></pre>"},{"location":"minirag/#basic-usage","title":"Basic Usage","text":""},{"location":"minirag/#simple-question-answering","title":"Simple Question Answering","text":"<pre><code># Ask a question about your processed documents\nnetintel-ocr rag query \\\n  --question \"What are the main components of our network architecture?\" \\\n  --collection network_docs\n\n# Output:\n# Question: What are the main components of our network architecture?\n#\n# Answer: Based on the analyzed documentation, your network architecture consists of:\n#\n# Core Infrastructure:\n# \u2022 2 Core Routers (Router-Core-01, Router-Core-02) in active-standby configuration\n# \u2022 4 Distribution Switches providing layer 3 routing between VLANs\n# \u2022 12 Access Switches for end-user connectivity\n#\n# Security Layer:\n# \u2022 3 Firewalls (FW-External, FW-DMZ, FW-Internal) implementing zone-based security\n# \u2022 2 IPS devices for intrusion prevention\n# \u2022 1 Web Application Firewall protecting public services\n#\n# Services:\n# \u2022 2 Load Balancers distributing traffic across application servers\n# \u2022 6 Application Servers running business services\n# \u2022 2 Database Clusters (Primary and DR) with Oracle RAC\n#\n# Sources: network-topology.pdf (pages 3-5), infrastructure-design.pdf (pages 12-14)\n# Confidence: 0.94\n</code></pre>"},{"location":"minirag/#query-with-context","title":"Query with Context","text":"<pre><code># Include surrounding context for better answers\nnetintel-ocr rag query \\\n  --question \"How does traffic flow from the internet to our database?\" \\\n  --include-context \\\n  --context-window 3 \\\n  --collection network_docs\n\n# Output includes:\n# - Direct answer with traffic flow path\n# - Network diagram visualization\n# - Security checkpoints along the path\n# - Relevant firewall rules\n# - Performance metrics for each hop\n</code></pre>"},{"location":"minirag/#query-modes","title":"Query Modes","text":""},{"location":"minirag/#1-graph-mode-structured-data-queries","title":"1. Graph Mode - Structured Data Queries","text":"<p>Best for queries about relationships, dependencies, and network topology.</p> <pre><code># Query using only Knowledge Graph\nnetintel-ocr rag query \\\n  --mode graph \\\n  --question \"List all devices in the DMZ zone\" \\\n  --collection security_infrastructure\n\n# Output:\n# Devices in DMZ Zone (from Knowledge Graph):\n# \n# Firewalls:\n# \u2022 FW-DMZ-01 (Primary)\n# \u2022 FW-DMZ-02 (Secondary)\n# \n# Servers:\n# \u2022 WEB-DMZ-01 (Public Web Server)\n# \u2022 WEB-DMZ-02 (Public Web Server)\n# \u2022 MAIL-DMZ-01 (Email Gateway)\n# \u2022 PROXY-DMZ-01 (Reverse Proxy)\n# \n# Network Devices:\n# \u2022 SW-DMZ-01 (DMZ Switch)\n# \u2022 LB-DMZ-01 (Load Balancer)\n# \n# Total: 8 devices\n# Graph traversal time: 12ms\n</code></pre>"},{"location":"minirag/#2-vector-mode-unstructured-text-queries","title":"2. Vector Mode - Unstructured Text Queries","text":"<p>Best for policy questions, procedures, and descriptive content.</p> <pre><code># Query using only vector search\nnetintel-ocr rag query \\\n  --mode vector \\\n  --question \"What are the password policy requirements?\" \\\n  --collection security_policies\n\n# Output:\n# Password Policy Requirements (from document search):\n# \n# According to the Security Policy document (v2.3):\n# \n# 1. Minimum Length: 12 characters\n# 2. Complexity Requirements:\n#    \u2022 At least one uppercase letter\n#    \u2022 At least one lowercase letter\n#    \u2022 At least one number\n#    \u2022 At least one special character\n# 3. Password History: Cannot reuse last 12 passwords\n# 4. Expiration: 90 days\n# 5. Account Lockout: 5 failed attempts\n# 6. Multi-Factor Authentication: Required for privileged accounts\n# \n# Source: security-policy.pdf (page 23)\n# Relevance Score: 0.96\n</code></pre>"},{"location":"minirag/#3-hybrid-mode-combined-intelligence","title":"3. Hybrid Mode - Combined Intelligence","text":"<p>Best for complex queries requiring both structured and unstructured data.</p> <pre><code># Query using hybrid retrieval (default)\nnetintel-ocr rag query \\\n  --mode hybrid \\\n  --question \"What would be the impact of upgrading the core router firmware?\" \\\n  --collection network_docs\n\n# Output:\n# Impact Analysis for Core Router Firmware Upgrade:\n# \n# From Knowledge Graph Analysis:\n# \u2022 Affected Devices: 47 directly connected systems\n# \u2022 Service Dependencies: 23 critical services rely on core router\n# \u2022 Redundancy: Core-Router-02 can handle traffic during upgrade\n# \u2022 Estimated Affected Users: 2,500\n# \n# From Documentation:\n# \u2022 Upgrade Window: 2-4 hours (per upgrade guide)\n# \u2022 Required Downtime: 15-30 minutes for failover\n# \u2022 Rollback Procedure: Available (documented in section 4.3)\n# \u2022 Known Issues: Memory leak fixed in new version (CVE-2024-1234)\n# \n# Risk Assessment: MEDIUM\n# Recommendation: Schedule during maintenance window with failover testing\n# \n# Sources: \n# - Knowledge Graph: 47 entities, 156 relationships analyzed\n# - Documents: upgrade-guide.pdf (p.12), network-sop.pdf (p.45)\n# Confidence: 0.91\n</code></pre>"},{"location":"minirag/#4-embedding-mode-similarity-queries","title":"4. Embedding Mode - Similarity Queries","text":"<p>Best for finding similar configurations or patterns.</p> <pre><code># Query using KG embeddings\nnetintel-ocr rag query \\\n  --mode embeddings \\\n  --question \"Find all firewalls with similar configurations to FW-PROD-01\" \\\n  --similarity-threshold 0.85 \\\n  --collection network_configs\n\n# Output:\n# Firewalls Similar to FW-PROD-01:\n# \n# 1. FW-PROD-02 (Similarity: 0.98)\n#    \u2022 Location: Data Center 1\n#    \u2022 Config Match: 98% identical rules\n#    \u2022 Differences: NAT pool ranges\n# \n# 2. FW-DR-01 (Similarity: 0.92)\n#    \u2022 Location: DR Site\n#    \u2022 Config Match: 85% identical rules\n#    \u2022 Differences: IP ranges, VLAN assignments\n# \n# 3. FW-PROD-03 (Similarity: 0.87)\n#    \u2022 Location: Data Center 2\n#    \u2022 Config Match: 82% identical rules\n#    \u2022 Differences: Additional DMZ rules\n# \n# Embedding Model: RotatE (200D)\n# Comparison Time: 34ms\n</code></pre>"},{"location":"minirag/#advanced-features","title":"Advanced Features","text":""},{"location":"minirag/#multi-hop-reasoning","title":"Multi-Hop Reasoning","text":"<pre><code># Complex reasoning across multiple relationships\nnetintel-ocr rag query \\\n  --question \"If the primary database fails, what services are affected and what's the recovery plan?\" \\\n  --reasoning-depth 4 \\\n  --include-alternatives \\\n  --collection infrastructure\n\n# Output:\n# Multi-Hop Analysis for Database Failure:\n# \n# Immediate Impact (1 hop):\n# \u2022 Billing Service \u2192 Down\n# \u2022 Customer Portal \u2192 Down\n# \u2022 Reporting System \u2192 Down\n# \n# Cascading Impact (2-3 hops):\n# \u2022 Payment Gateway \u2192 Degraded (cache available)\n# \u2022 Mobile App \u2192 Limited functionality\n# \u2022 API Services \u2192 6 endpoints affected\n# \n# Recovery Plan (from runbooks):\n# 1. Automatic failover to DR database (RTO: 5 min)\n# 2. If failover fails:\n#    a. Start manual recovery procedure\n#    b. Restore from backup (RPO: 1 hour)\n#    c. Replay transaction logs\n# 3. Notify stakeholders per escalation matrix\n# \n# Alternative Paths:\n# \u2022 Read-only mode using replica\n# \u2022 Cache-based operations for 2 hours\n# \u2022 Queue writes for later processing\n</code></pre>"},{"location":"minirag/#comparative-analysis","title":"Comparative Analysis","text":"<pre><code># Compare configurations or architectures\nnetintel-ocr rag compare \\\n  --entities \"FW-PROD-01,FW-DR-01\" \\\n  --aspects \"rules,performance,security\" \\\n  --collection network_configs\n\n# Output:\n# Comparative Analysis: FW-PROD-01 vs FW-DR-01\n# \n# \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n# \u2502 Aspect          \u2502 FW-PROD-01   \u2502 FW-DR-01     \u2502\n# \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n# \u2502 Total Rules     \u2502 1,234        \u2502 1,189        \u2502\n# \u2502 Unique Rules    \u2502 45           \u2502 0            \u2502\n# \u2502 Allow Rules     \u2502 234          \u2502 229          \u2502\n# \u2502 Deny Rules      \u2502 1,000        \u2502 960          \u2502\n# \u2502 NAT Rules       \u2502 67           \u2502 45           \u2502\n# \u2502 VPN Tunnels     \u2502 12           \u2502 12           \u2502\n# \u2502 Throughput      \u2502 10 Gbps      \u2502 10 Gbps      \u2502\n# \u2502 CPU Usage (avg) \u2502 45%          \u2502 12%          \u2502\n# \u2502 Memory Usage    \u2502 67%          \u2502 34%          \u2502\n# \u2502 Last Updated    \u2502 2024-01-10   \u2502 2024-01-08   \u2502\n# \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n# \n# Key Differences:\n# \u2022 Production has 45 additional rules for specific services\n# \u2022 DR has simplified NAT configuration\n# \u2022 Configuration sync lag: 2 days\n</code></pre>"},{"location":"minirag/#temporal-queries","title":"Temporal Queries","text":"<pre><code># Query with time context\nnetintel-ocr rag query \\\n  --question \"What changes were made to the network in the last 30 days?\" \\\n  --temporal \\\n  --lookback-days 30 \\\n  --include-changelog \\\n  --collection network_docs\n\n# Output:\n# Network Changes (Last 30 Days):\n# \n# Week 1 (Jan 1-7):\n# \u2022 Added VLAN 245 for new development team\n# \u2022 Updated firewall rules for cloud migration\n# \u2022 Replaced Switch-Access-12 (hardware failure)\n# \n# Week 2 (Jan 8-14):\n# \u2022 Implemented new QoS policies\n# \u2022 Added redundant link between DC1 and DC2\n# \u2022 Updated routing tables for new subnet\n# \n# Week 3 (Jan 15-21):\n# \u2022 Patched 15 devices for CVE-2024-1234\n# \u2022 Migrated 3 services to cloud\n# \u2022 Decommissioned legacy mail server\n# \n# Week 4 (Jan 22-28):\n# \u2022 Upgraded core router firmware\n# \u2022 Added new load balancer for web tier\n# \u2022 Implemented zero-trust policies in DMZ\n# \n# Total Changes: 23\n# Change Frequency: Increasing trend (+35%)\n</code></pre>"},{"location":"minirag/#compliance-and-security-queries","title":"Compliance and Security Queries","text":""},{"location":"minirag/#compliance-checking","title":"Compliance Checking","text":"<pre><code># Check compliance with specific framework\nnetintel-ocr rag compliance-check \\\n  --question \"Does our network segmentation meet PCI-DSS requirements?\" \\\n  --framework PCI-DSS-v4.0 \\\n  --include-evidence \\\n  --generate-report \\\n  --collection compliance_docs\n\n# Output:\n# PCI-DSS Network Segmentation Compliance Check:\n# \n# \u2705 Requirement 1.1: Network diagram documented\n#    Evidence: network-topology.pdf, last updated 2024-01-15\n# \n# \u2705 Requirement 1.2: Firewall configuration standards\n#    Evidence: 234 rules reviewed, all follow standard\n# \n# \u26a0\ufe0f Requirement 1.3: DMZ implementation\n#    Issue: Direct route found between DMZ and Internal\n#    Risk: Medium\n#    Remediation: Add deny rule on FW-Internal\n# \n# \u2705 Requirement 1.4: Personal firewall software\n#    Evidence: Endpoint protection policy enforced\n# \n# \u274c Requirement 1.5: Security policy review\n#    Issue: Policy last reviewed 13 months ago (requires annual)\n#    Risk: High\n#    Remediation: Schedule immediate policy review\n# \n# Overall Compliance: 78%\n# Critical Issues: 1\n# Warnings: 1\n# \n# Report saved to: pci_compliance_report_2024-01-30.pdf\n</code></pre>"},{"location":"minirag/#security-analysis","title":"Security Analysis","text":"<pre><code># Analyze security posture\nnetintel-ocr rag security-analysis \\\n  --question \"What are the potential attack vectors to our database?\" \\\n  --threat-model MITRE-ATT&amp;CK \\\n  --include-mitigations \\\n  --collection security_docs\n\n# Output:\n# Attack Vector Analysis for Database Access:\n# \n# Identified Attack Vectors:\n# \n# 1. External Network Path (High Risk)\n#    Path: Internet \u2192 Firewall \u2192 DMZ \u2192 App Server \u2192 Database\n#    MITRE Techniques: T1190 (Exploit Public-Facing Application)\n#    Current Mitigations:\n#    \u2022 WAF in place\n#    \u2022 IPS monitoring\n#    \u2022 Rate limiting enabled\n#    Gaps: No API gateway authentication\n# \n# 2. Lateral Movement (Medium Risk)\n#    Path: Compromised Workstation \u2192 Internal Network \u2192 Database\n#    MITRE Techniques: T1021 (Remote Services)\n#    Current Mitigations:\n#    \u2022 Network segmentation\n#    \u2022 MFA on privileged accounts\n#    Gaps: Some service accounts without MFA\n# \n# 3. Insider Threat (Medium Risk)\n#    Path: Direct database access via admin credentials\n#    MITRE Techniques: T1078 (Valid Accounts)\n#    Current Mitigations:\n#    \u2022 Audit logging\n#    \u2022 Privileged access management\n#    Gaps: No behavior analytics\n# \n# Recommended Actions:\n# 1. Implement API gateway with authentication\n# 2. Enable MFA for all service accounts\n# 3. Deploy user behavior analytics\n# 4. Regular penetration testing\n</code></pre>"},{"location":"minirag/#batch-processing","title":"Batch Processing","text":""},{"location":"minirag/#process-multiple-questions","title":"Process Multiple Questions","text":"<pre><code># Create batch query file\ncat &gt; queries.txt &lt;&lt; EOF\nWhat is our current network capacity?\nWhich systems have no redundancy?\nWhat are the critical single points of failure?\nHow many firewall rules allow any-to-any traffic?\nWhat is the backup retention policy?\nEOF\n\n# Run batch queries\nnetintel-ocr rag batch \\\n  --input queries.txt \\\n  --collection network_docs \\\n  --output results.json \\\n  --parallel 4 \\\n  --format json\n\n# View results\ncat results.json | jq '.queries[0]'\n# {\n#   \"question\": \"What is our current network capacity?\",\n#   \"answer\": \"Current network capacity: Core: 40Gbps (60% utilized)...\",\n#   \"confidence\": 0.92,\n#   \"sources\": [\"capacity-report.pdf\", \"network-metrics.xlsx\"],\n#   \"response_time_ms\": 234\n# }\n</code></pre>"},{"location":"minirag/#interactive-session","title":"Interactive Session","text":"<pre><code># Start interactive RAG session\nnetintel-ocr rag interactive \\\n  --collection network_docs \\\n  --history-file session.log \\\n  --context-memory 5\n\n# Interactive prompt appears:\n# MiniRAG Interactive Mode\n# Type 'help' for commands, 'exit' to quit\n# \n# rag&gt; what is our primary data center location?\n# Answer: The primary data center is located in Dallas, TX...\n# \n# rag&gt; how many servers are there?\n# Answer: Based on the context, there are 47 servers total...\n# \n# rag&gt; show graph\n# [Displays interactive network graph visualization]\n# \n# rag&gt; export session\n# Session exported to: rag_session_2024-01-30.md\n</code></pre>"},{"location":"minirag/#performance-optimization","title":"Performance Optimization","text":""},{"location":"minirag/#caching-configuration","title":"Caching Configuration","text":"<pre><code># Enable response caching\nnetintel-ocr rag config \\\n  --enable-cache \\\n  --cache-size 1000 \\\n  --cache-ttl 3600 \\\n  --collection network_docs\n\n# Query with cache\nnetintel-ocr rag query \\\n  --question \"What is the network topology?\" \\\n  --use-cache \\\n  --collection network_docs\n\n# Clear cache\nnetintel-ocr rag cache-clear --collection network_docs\n</code></pre>"},{"location":"minirag/#retrieval-tuning","title":"Retrieval Tuning","text":"<pre><code># Optimize retrieval parameters\nnetintel-ocr rag tune \\\n  --test-queries evaluation_set.txt \\\n  --optimize-for accuracy \\\n  --collection network_docs\n\n# Output:\n# Optimization Results:\n# \n# Best Parameters:\n# \u2022 Chunk Size: 512\n# \u2022 Chunk Overlap: 64\n# \u2022 Top-K: 8\n# \u2022 Temperature: 0.7\n# \u2022 Retrieval Strategy: hybrid\n# \u2022 Vector Weight: 0.4\n# \u2022 Graph Weight: 0.6\n# \n# Performance Improvement:\n# \u2022 Accuracy: 87% \u2192 94% (+7%)\n# \u2022 Latency: 380ms \u2192 290ms (-24%)\n# \u2022 Relevance: 0.81 \u2192 0.93 (+15%)\n</code></pre>"},{"location":"minirag/#monitoring-and-metrics","title":"Monitoring and Metrics","text":"<pre><code># View RAG performance metrics\nnetintel-ocr rag metrics \\\n  --period 7d \\\n  --collection network_docs\n\n# Output:\n# MiniRAG Performance Metrics (7 days):\n# \n# Query Statistics:\n# \u2022 Total Queries: 1,847\n# \u2022 Unique Questions: 423\n# \u2022 Avg Response Time: 312ms\n# \u2022 P95 Response Time: 780ms\n# \u2022 Cache Hit Rate: 67%\n# \n# Retrieval Performance:\n# \u2022 Graph Queries: 34% (avg 120ms)\n# \u2022 Vector Queries: 28% (avg 290ms)\n# \u2022 Hybrid Queries: 38% (avg 410ms)\n# \n# Accuracy Metrics:\n# \u2022 User Satisfaction: 92%\n# \u2022 Answer Relevance: 0.89\n# \u2022 Source Accuracy: 94%\n# \n# Top Query Categories:\n# 1. Configuration (34%)\n# 2. Troubleshooting (28%)\n# 3. Compliance (22%)\n# 4. Capacity Planning (16%)\n</code></pre>"},{"location":"minirag/#export-and-integration","title":"Export and Integration","text":""},{"location":"minirag/#export-conversations","title":"Export Conversations","text":"<pre><code># Export Q&amp;A as documentation\nnetintel-ocr rag export \\\n  --format markdown \\\n  --include-sources \\\n  --include-confidence \\\n  --output network_qa.md \\\n  --collection network_docs\n\n# Export as JSON for API integration\nnetintel-ocr rag export \\\n  --format json \\\n  --schema openapi \\\n  --output rag_api.json \\\n  --collection network_docs\n</code></pre>"},{"location":"minirag/#generate-knowledge-base","title":"Generate Knowledge Base","text":"<pre><code># Build comprehensive KB from queries\nnetintel-ocr rag build-kb \\\n  --min-confidence 0.8 \\\n  --categories \"network,security,operations\" \\\n  --format html \\\n  --output knowledge_base.html \\\n  --collection network_docs\n\n# Generate FAQ\nnetintel-ocr rag generate-faq \\\n  --top-questions 50 \\\n  --group-by-category \\\n  --output faq.md \\\n  --collection network_docs\n</code></pre>"},{"location":"minirag/#api-integration","title":"API Integration","text":""},{"location":"minirag/#rest-api-usage","title":"REST API Usage","text":"<pre><code>import requests\n\n# Query via API\nresponse = requests.post(\n    \"http://localhost:8000/rag/query\",\n    json={\n        \"question\": \"What is the database connection string?\",\n        \"collection\": \"network_docs\",\n        \"mode\": \"hybrid\",\n        \"include_sources\": True\n    }\n)\n\nresult = response.json()\nprint(f\"Answer: {result['answer']}\")\nprint(f\"Confidence: {result['confidence']}\")\nprint(f\"Sources: {result['sources']}\")\n</code></pre>"},{"location":"minirag/#python-sdk","title":"Python SDK","text":"<pre><code>from netintel_ocr.rag import MiniRAG\n\n# Initialize MiniRAG\nrag = MiniRAG(\n    collection=\"network_docs\",\n    llm_model=\"gpt-4\",\n    retrieval_strategy=\"adaptive\"\n)\n\n# Query\nresult = rag.query(\n    question=\"What are the backup procedures?\",\n    include_context=True,\n    max_tokens=500\n)\n\nprint(result.answer)\nprint(f\"Retrieved from: {result.sources}\")\nprint(f\"Confidence: {result.confidence}\")\n\n# Batch processing\nquestions = [\n    \"What is the network capacity?\",\n    \"How many servers do we have?\",\n    \"What is the DR strategy?\"\n]\n\nresults = rag.batch_query(questions)\nfor q, r in zip(questions, results):\n    print(f\"Q: {q}\")\n    print(f\"A: {r.answer}\\n\")\n</code></pre>"},{"location":"minirag/#troubleshooting","title":"Troubleshooting","text":""},{"location":"minirag/#common-issues","title":"Common Issues","text":"<pre><code># Debug slow queries\nnetintel-ocr rag debug \\\n  --question \"Your question here\" \\\n  --show-retrieval \\\n  --show-timing \\\n  --show-reasoning \\\n  --collection network_docs\n\n# Output:\n# Query Debug Information:\n# \n# 1. Query Classification (12ms)\n#    Type: entity_centric\n#    Strategy: graph-first\n# \n# 2. Graph Retrieval (45ms)\n#    Entities found: 12\n#    Relationships: 34\n# \n# 3. Vector Retrieval (89ms)\n#    Documents: 5\n#    Chunks: 15\n# \n# 4. Context Building (23ms)\n#    Context size: 2048 tokens\n# \n# 5. LLM Generation (234ms)\n#    Model: gpt-4\n#    Tokens: 450\n# \n# Total Time: 403ms\n# Bottleneck: LLM Generation (58%)\n</code></pre>"},{"location":"minirag/#improve-answer-quality","title":"Improve Answer Quality","text":"<pre><code># Analyze answer quality\nnetintel-ocr rag analyze \\\n  --question \"Your question\" \\\n  --answer \"Generated answer\" \\\n  --check-hallucination \\\n  --check-completeness \\\n  --collection network_docs\n\n# Re-index for better retrieval\nnetintel-ocr rag reindex \\\n  --optimize-embeddings \\\n  --update-graph \\\n  --collection network_docs\n</code></pre>"},{"location":"minirag/#best-practices","title":"Best Practices","text":"<ol> <li>Choose the Right Mode:</li> <li>Use <code>graph</code> mode for structural queries</li> <li>Use <code>vector</code> mode for policy/procedure questions  </li> <li>Use <code>hybrid</code> mode for complex analysis</li> <li> <p>Use <code>embeddings</code> mode for similarity searches</p> </li> <li> <p>Optimize for Your Use Case:</p> </li> <li>Tune chunk size based on document types</li> <li>Adjust temperature for creativity vs accuracy</li> <li>Use caching for frequently asked questions</li> <li> <p>Enable monitoring to track performance</p> </li> <li> <p>Maintain Quality:</p> </li> <li>Regularly update your knowledge graph</li> <li>Re-index after major document changes</li> <li>Monitor confidence scores</li> <li>Collect user feedback for improvements</li> </ol>"},{"location":"minirag/#command-reference","title":"Command Reference","text":"<pre><code># Essential MiniRAG commands\nnetintel-ocr rag init              # Initialize MiniRAG\nnetintel-ocr rag query             # Ask a question\nnetintel-ocr rag batch             # Process multiple questions\nnetintel-ocr rag interactive       # Start interactive session\nnetintel-ocr rag compare           # Compare entities\nnetintel-ocr rag compliance-check  # Check compliance\nnetintel-ocr rag metrics           # View performance metrics\nnetintel-ocr rag export            # Export Q&amp;A pairs\nnetintel-ocr rag debug             # Debug queries\nnetintel-ocr rag tune              # Optimize parameters\n</code></pre>"},{"location":"multi-model/","title":"Multi-Model Selection Guide","text":""},{"location":"multi-model/#overview","title":"Overview","text":"<p>NetIntel-OCR supports multiple vision-language models optimized for different tasks. Selecting the right model improves accuracy and performance.</p>"},{"location":"multi-model/#model-categories","title":"Model Categories","text":""},{"location":"multi-model/#ocr-optimized-models","title":"OCR-Optimized Models","text":"<p>Best for text extraction from documents.</p> Model Speed Accuracy Memory Use Case <code>Nanonets-OCR-s:latest</code> \u26a1\u26a1\u26a1 High 4GB Default OCR <code>moondream:latest</code> \u26a1\u26a1 Medium 3GB Fast processing <code>NetIntelOCR-7B-0925</code> \u26a1\u26a1 Very High 8GB Default (v0.1.16)"},{"location":"multi-model/#vision-language-models","title":"Vision-Language Models","text":"<p>Best for diagram understanding and component extraction.</p> Model Speed Accuracy Memory Use Case <code>qwen2.5vl:7b</code> \u26a1\u26a1 Very High 8GB Recommended <code>llava:13b</code> \u26a1 Highest 16GB Complex diagrams <code>cogvlm:latest</code> Slow Highest 32GB Critical accuracy <code>minicpm-v:latest</code> \u26a1\u26a1\u26a1 Medium 4GB Quick preview"},{"location":"multi-model/#lightweight-models","title":"Lightweight Models","text":"<p>Best for quick detection and simple diagrams.</p> Model Speed Accuracy Memory Use Case <code>bakllava:latest</code> \u26a1\u26a1\u26a1 Medium 4GB Fast detection <code>llava-phi3:latest</code> \u26a1\u26a1\u26a1 Medium 3GB Edge deployment <code>llama3.2-vision:11b</code> \u26a1 High 12GB Balanced"},{"location":"multi-model/#task-specific-recommendations","title":"Task-Specific Recommendations","text":""},{"location":"multi-model/#text-extraction","title":"Text Extraction","text":"<pre><code># Fast text extraction\nnetintel-ocr --model moondream:latest document.pdf\n\n# High accuracy OCR\nnetintel-ocr --model Nanonets-OCR-s:latest document.pdf\n\n# Default balanced approach\nnetintel-ocr --model NetIntelOCR-7B-0925 document.pdf\n</code></pre>"},{"location":"multi-model/#network-diagrams","title":"Network Diagrams","text":"<pre><code># Simple network topology\nnetintel-ocr --network-model minicpm-v:latest network.pdf\n\n# Complex architecture\nnetintel-ocr --network-model llava:13b architecture.pdf\n\n# Recommended for most cases\nnetintel-ocr --network-model qwen2.5vl:7b design.pdf\n</code></pre>"},{"location":"multi-model/#flow-diagrams","title":"Flow Diagrams","text":"<pre><code># Business process flows\nnetintel-ocr --flow-model qwen2.5vl:7b process.pdf\n\n# Complex decision trees\nnetintel-ocr --flow-model llava:13b workflow.pdf\n\n# Quick extraction\nnetintel-ocr --flow-model bakllava:latest simple-flow.pdf\n</code></pre>"},{"location":"multi-model/#model-selection-strategy","title":"Model Selection Strategy","text":""},{"location":"multi-model/#by-document-type","title":"By Document Type","text":""},{"location":"multi-model/#technical-specifications","title":"Technical Specifications","text":"<pre><code>netintel-ocr \\\n  --model Nanonets-OCR-s:latest \\\n  --network-model cogvlm:latest \\\n  --flow-model llava:13b \\\n  technical-spec.pdf\n</code></pre>"},{"location":"multi-model/#marketing-materials","title":"Marketing Materials","text":"<pre><code>netintel-ocr \\\n  --model moondream:latest \\\n  --network-model minicpm-v:latest \\\n  --flow-model bakllava:latest \\\n  brochure.pdf\n</code></pre>"},{"location":"multi-model/#security-documentation","title":"Security Documentation","text":"<pre><code>netintel-ocr \\\n  --model NetIntelOCR-7B-0925 \\\n  --network-model qwen2.5vl:7b \\\n  --security-focus \\\n  security-guide.pdf\n</code></pre>"},{"location":"multi-model/#by-resource-constraints","title":"By Resource Constraints","text":""},{"location":"multi-model/#limited-memory-4gb","title":"Limited Memory (4GB)","text":"<pre><code>netintel-ocr \\\n  --model moondream:latest \\\n  --network-model minicpm-v:latest \\\n  --low-memory \\\n  document.pdf\n</code></pre>"},{"location":"multi-model/#gpu-available","title":"GPU Available","text":"<pre><code>netintel-ocr \\\n  --model NetIntelOCR-7B-0925 \\\n  --network-model llava:13b \\\n  --gpu \\\n  document.pdf\n</code></pre>"},{"location":"multi-model/#cpu-only","title":"CPU Only","text":"<pre><code>netintel-ocr \\\n  --model Nanonets-OCR-s:latest \\\n  --network-model bakllava:latest \\\n  --cpu-optimized \\\n  document.pdf\n</code></pre>"},{"location":"multi-model/#model-configuration","title":"Model Configuration","text":""},{"location":"multi-model/#default-models","title":"Default Models","text":"<p>Set default models in configuration:</p> <pre><code># config.yaml\nmodels:\n  text_extraction: NetIntelOCR-7B-0925\n  network_detection: qwen2.5vl:7b\n  flow_detection: qwen2.5vl:7b\n  component_extraction: qwen2.5vl:7b\n\nfallbacks:\n  text_extraction: Nanonets-OCR-s:latest\n  network_detection: minicpm-v:latest\n</code></pre>"},{"location":"multi-model/#model-specific-parameters","title":"Model-Specific Parameters","text":"<pre><code>model_configs:\n  qwen2.5vl:\n    temperature: 0.3\n    max_tokens: 4096\n    top_p: 0.9\n\n  llava:\n    temperature: 0.5\n    max_tokens: 8192\n    num_predict: 2048\n\n  NetIntelOCR-7B-0925:\n    temperature: 0.2\n    repeat_penalty: 1.1\n</code></pre>"},{"location":"multi-model/#performance-optimization","title":"Performance Optimization","text":""},{"location":"multi-model/#batch-processing","title":"Batch Processing","text":"<pre><code># Use fast models for batch\nnetintel-ocr --batch \\\n  --model moondream:latest \\\n  --network-model minicpm-v:latest \\\n  *.pdf\n</code></pre>"},{"location":"multi-model/#multi-pass-strategy","title":"Multi-Pass Strategy","text":"<pre><code># First pass: Quick detection\nnetintel-ocr --detect-only \\\n  --network-model bakllava:latest \\\n  document.pdf\n\n# Second pass: Detailed extraction on detected pages\nnetintel-ocr --pages 5,12,18 \\\n  --network-model llava:13b \\\n  document.pdf\n</code></pre>"},{"location":"multi-model/#model-caching","title":"Model Caching","text":"<pre><code># Preload models\nnetintel-ocr --preload-models \\\n  \"qwen2.5vl:7b,Nanonets-OCR-s:latest\"\n\n# Keep models in memory\nnetintel-ocr --keep-models-loaded \\\n  --model-cache-ttl 3600 \\\n  document.pdf\n</code></pre>"},{"location":"multi-model/#model-benchmarks","title":"Model Benchmarks","text":""},{"location":"multi-model/#processing-speed-pagesminute","title":"Processing Speed (pages/minute)","text":"Task Nanonets qwen2.5vl llava minicpm-v Text Only 12 8 4 15 Simple Diagram 8 6 3 10 Complex Diagram 4 4 2 6"},{"location":"multi-model/#accuracy-scores-f1","title":"Accuracy Scores (F1)","text":"Task Nanonets qwen2.5vl llava minicpm-v Text OCR 0.95 0.92 0.94 0.85 Component Detection 0.82 0.91 0.94 0.78 Connection Tracing 0.75 0.88 0.92 0.72"},{"location":"multi-model/#custom-model-integration","title":"Custom Model Integration","text":""},{"location":"multi-model/#add-custom-model","title":"Add Custom Model","text":"<pre><code># Download and configure\nollama pull your-custom-model:latest\n\n# Register with NetIntel-OCR\nnetintel-ocr --register-model \\\n  --name custom-model \\\n  --type vision-language \\\n  --capabilities \"network,flow,text\"\n</code></pre>"},{"location":"multi-model/#model-evaluation","title":"Model Evaluation","text":"<pre><code># Test model performance\nnetintel-ocr --evaluate-model custom-model:latest \\\n  --test-set /path/to/test/documents \\\n  --metrics \"accuracy,speed,memory\"\n</code></pre>"},{"location":"multi-model/#troubleshooting-models","title":"Troubleshooting Models","text":""},{"location":"multi-model/#model-not-found","title":"Model Not Found","text":"<pre><code># List available models\nollama list\n\n# Pull missing model\nollama pull qwen2.5vl:7b\n</code></pre>"},{"location":"multi-model/#out-of-memory","title":"Out of Memory","text":"<pre><code># Use smaller model\nnetintel-ocr --network-model minicpm-v:latest document.pdf\n\n# Reduce context size\nnetintel-ocr --max-context 2048 document.pdf\n</code></pre>"},{"location":"multi-model/#slow-processing","title":"Slow Processing","text":"<pre><code># Use faster model\nnetintel-ocr --network-model bakllava:latest document.pdf\n\n# Enable GPU\nnetintel-ocr --gpu document.pdf\n\n# Reduce quality for speed\nnetintel-ocr --fast-mode document.pdf\n</code></pre>"},{"location":"multi-model/#next-steps","title":"Next Steps","text":"<ul> <li>Customization Guide - Fine-tune model parameters</li> <li>Performance Guide - Optimize for large batches</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"quickstart-kg/","title":"Knowledge Graph Quick Start","text":"<p>Get started with NetIntel-OCR's Knowledge Graph capabilities in 5 minutes.</p>"},{"location":"quickstart-kg/#prerequisites","title":"Prerequisites","text":"<pre><code># Install NetIntel-OCR (KG included by default in v0.1.17+)\npip install netintel-ocr\n\n# Start required services with Docker\ndocker run -d --name falkordb -p 6379:6379 falkordb/falkordb\ndocker run -d --name milvus -p 19530:19530 milvusdb/milvus:latest\n\n# Verify everything is ready\nnetintel-ocr kg check-requirements\n</code></pre>"},{"location":"quickstart-kg/#basic-workflow","title":"Basic Workflow","text":""},{"location":"quickstart-kg/#1-process-your-first-document","title":"1. Process Your First Document","text":"<pre><code># Process a PDF with Knowledge Graph extraction (enabled by default)\nnetintel-ocr document.pdf\n\n# The output folder will contain:\n# - Extracted text and diagrams\n# - kg_entities.json - Extracted entities\n# - kg_relations.cypher - Graph relationships\n</code></pre>"},{"location":"quickstart-kg/#2-view-what-was-extracted","title":"2. View What Was Extracted","text":"<pre><code># See graph statistics\nnetintel-ocr kg stats\n\n# Output:\n# Entities: 47\n# Relationships: 156\n# Types: Router(5), Switch(12), Firewall(3), Server(15)...\n</code></pre>"},{"location":"quickstart-kg/#3-query-your-knowledge-graph","title":"3. Query Your Knowledge Graph","text":"<pre><code># Find dependencies\nnetintel-ocr kg query \\\n  --type dependencies \\\n  --entity \"Database-Server\"\n\n# Find paths between components\nnetintel-ocr kg query \\\n  --type path \\\n  --from \"Internet\" \\\n  --to \"Database\"\n\n# Search by properties\nnetintel-ocr kg search \\\n  --property \"type=firewall\"\n</code></pre>"},{"location":"quickstart-kg/#essential-commands","title":"Essential Commands","text":""},{"location":"quickstart-kg/#processing-documents","title":"Processing Documents","text":"<pre><code># Process with specific KG model (default: RotatE)\nnetintel-ocr --kg-model RotatE document.pdf\n\n# Process multiple documents into one KG\nnetintel-ocr --batch --collection my_network *.pdf\n\n# Disable KG if not needed (faster processing)\nnetintel-ocr --no-kg document.pdf\n</code></pre>"},{"location":"quickstart-kg/#querying","title":"Querying","text":"<pre><code># Basic entity query\nnetintel-ocr kg query --entity \"Router-Core-01\"\n\n# Find all connections\nnetintel-ocr kg query --type connections --entity \"Switch-01\"\n\n# Complex graph query with Cypher\nnetintel-ocr kg query \\\n  --cypher \"MATCH (n:Firewall)-[r]-(m) RETURN n,r,m\"\n</code></pre>"},{"location":"quickstart-kg/#analysis","title":"Analysis","text":"<pre><code># Find single points of failure\nnetintel-ocr kg analyze --type spof\n\n# Check compliance\nnetintel-ocr kg compliance --framework PCI-DSS\n\n# Find similar configurations\nnetintel-ocr kg find-similar --entity \"FW-01\" --threshold 0.85\n</code></pre>"},{"location":"quickstart-kg/#using-minirag-qa-system","title":"Using MiniRAG (Q&amp;A System)","text":"<pre><code># Ask questions about your documents\nnetintel-ocr rag query \\\n  --question \"What are the database dependencies?\" \\\n  --collection my_network\n\n# Get compliance answers\nnetintel-ocr rag query \\\n  --question \"Does our network meet PCI requirements?\" \\\n  --compliance-framework PCI-DSS\n</code></pre>"},{"location":"quickstart-kg/#export-your-graph","title":"Export Your Graph","text":"<pre><code># Export for visualization\nnetintel-ocr kg export --format json --output graph.json\n\n# Export for Neo4j\nnetintel-ocr kg export --format cypher --output graph.cypher\n\n# Generate visualization\nnetintel-ocr kg visualize --output network.html\n</code></pre>"},{"location":"quickstart-kg/#common-use-cases","title":"Common Use Cases","text":""},{"location":"quickstart-kg/#network-documentation-analysis","title":"Network Documentation Analysis","text":"<pre><code># Process network architecture PDFs\nnetintel-ocr network-architecture.pdf\nnetintel-ocr kg stats  # See what was extracted\nnetintel-ocr kg query --type dependencies --entity \"Core-Router\"\n</code></pre>"},{"location":"quickstart-kg/#security-compliance-check","title":"Security Compliance Check","text":"<pre><code># Process security policies\nnetintel-ocr security-policies.pdf\nnetintel-ocr kg compliance --framework PCI-DSS\nnetintel-ocr kg analyze --type access-paths\n</code></pre>"},{"location":"quickstart-kg/#incident-response","title":"Incident Response","text":"<pre><code># Find impact of component failure\nnetintel-ocr kg impact --entity \"Database-01\" --failure-type complete\nnetintel-ocr rag query --question \"What's the recovery procedure?\"\n</code></pre>"},{"location":"quickstart-kg/#configuration-options","title":"Configuration Options","text":"Option Description Default <code>--kg-model</code> TransE, RotatE, ComplEx, etc. RotatE <code>--kg-epochs</code> Training iterations 100 <code>--collection</code> KG collection name default <code>--no-kg</code> Disable KG extraction False"},{"location":"quickstart-kg/#available-kg-models","title":"Available KG Models","text":"<ul> <li>RotatE (default) - Best for complex relationships</li> <li>TransE - Fast, good for hierarchical data</li> <li>ComplEx - Good for bidirectional relationships</li> </ul>"},{"location":"quickstart-kg/#troubleshooting","title":"Troubleshooting","text":"<pre><code># If KG extraction is slow\nnetintel-ocr --kg-model TransE --kg-epochs 50 document.pdf\n\n# If out of memory\nnetintel-ocr --kg-batch-size 128 document.pdf\n\n# Debug mode\nnetintel-ocr --debug --kg-verbose document.pdf\n</code></pre>"},{"location":"quickstart-kg/#next-steps","title":"Next Steps","text":"<ul> <li>MiniRAG Guide - Advanced Q&amp;A capabilities</li> <li>Knowledge Graph Guide - Full features</li> <li>Use Cases - Real-world examples</li> </ul> <p>Quick Reference Card</p> <pre><code># Process\nnetintel-ocr document.pdf\n\n# Query\nnetintel-ocr kg query --entity \"System-Name\"\n\n# Analyze\nnetintel-ocr kg analyze --type spof\n\n# Ask Questions\nnetintel-ocr rag query --question \"Your question here\"\n\n# Export\nnetintel-ocr kg export --format json --output graph.json\n</code></pre>"},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>New in v0.1.17: Knowledge Graph</p> <p>NetIntel-OCR now includes automatic Knowledge Graph extraction! Entities and relationships are automatically extracted from your documents and stored in FalkorDB. This feature is enabled by default - use <code>--no-kg</code> to disable if not needed.</p> <p>Learn more about Knowledge Graph features \u2192</p>"},{"location":"quickstart/#installation","title":"Installation","text":""},{"location":"quickstart/#system-requirements","title":"System Requirements","text":"<p>Operating System Support</p> <p>Linux Only - NetIntel-OCR is currently tested and supported only on Linux distributions.</p> <p>Windows and macOS support is planned for future releases but not currently available.</p> <p>Python Version</p> <p>Python 3.11 or 3.12 Required - NetIntel-OCR is tested and supported only on Python 3.11 and 3.12.</p> <p>Other Python versions may work but are not officially supported.</p>"},{"location":"quickstart/#verified-configurations","title":"Verified Configurations","text":"<ul> <li>OS: Ubuntu 20.04/22.04, RHEL 8/9, Debian 11/12</li> <li>Python: 3.11.x or 3.12.x</li> <li>RAM: 8GB minimum (16GB recommended)</li> <li>Storage: 10GB for models + processing space</li> <li>Ollama: Version 0.1.0 or higher</li> </ul>"},{"location":"quickstart/#python-setup","title":"Python Setup","text":"<pre><code># Check Python version (must be 3.11 or 3.12)\npython3 --version\n\n# Install Python 3.11 on Ubuntu/Debian\nsudo apt update\nsudo apt install python3.11 python3.11-venv python3.11-dev\n\n# Or install Python 3.12\nsudo apt install python3.12 python3.12-venv python3.12-dev\n\n# Create virtual environment with Python 3.11\npython3.11 -m venv venv\nsource venv/bin/activate\n\n# Or with Python 3.12\npython3.12 -m venv venv\nsource venv/bin/activate\n</code></pre>"},{"location":"quickstart/#install-netintel-ocr","title":"Install NetIntel-OCR","text":"<pre><code># Ensure you're using Python 3.11 or 3.12\npython --version  # Should show 3.11.x or 3.12.x\n\n# Install latest version from PyPI (includes KG support)\npip install netintel-ocr\n\n# Or install specific version\npip install netintel-ocr==0.1.17\n\n# Verify installation\nnetintel-ocr --version\n</code></pre> <p>Package Information</p> <p>NetIntel-OCR is available on PyPI: https://pypi.org/project/netintel-ocr/</p> <p>Check for latest versions and release notes on the PyPI page.</p>"},{"location":"quickstart/#install-ollama-models","title":"Install Ollama Models","text":"<p>NetIntel-OCR requires vision-capable models for diagram processing:</p> <pre><code># Pull recommended models\nollama pull qwen2.5vl:7b        # For network diagrams\nollama pull Nanonets-OCR-s:latest  # For OCR processing\n\n# Optional: Pull alternative models\nollama pull llava:13b            # Alternative vision model\nollama pull minicpm-v:latest     # Lightweight option\n</code></pre>"},{"location":"quickstart/#configuration","title":"Configuration","text":""},{"location":"quickstart/#setting-ollama-host","title":"Setting Ollama Host","text":"<p>For remote Ollama servers:</p> <pre><code># Set environment variable\nexport OLLAMA_HOST=\"http://192.168.1.100:11434\"\n\n# Or use config file\nnetintel-ocr --init\n</code></pre>"},{"location":"quickstart/#model-selection","title":"Model Selection","text":"<p>Specify models for different processing tasks:</p> Parameter Purpose Recommended Model <code>--model</code> OCR and text extraction Nanonets-OCR-s:latest <code>--network-model</code> Network diagram analysis qwen2.5vl:7b <code>--flow-model</code> Flow chart processing qwen2.5vl:7b"},{"location":"quickstart/#basic-usage","title":"Basic Usage","text":""},{"location":"quickstart/#process-a-pdf-document","title":"Process a PDF Document","text":"<pre><code># Process entire document (KG enabled by default in v0.1.17)\nnetintel-ocr document.pdf\n\n# Process without Knowledge Graph extraction\nnetintel-ocr --no-kg document.pdf\n\n# Process specific pages\nnetintel-ocr --start 5 --end 10 document.pdf\n\n# Enable debug output\nnetintel-ocr --debug document.pdf\n</code></pre>"},{"location":"quickstart/#example-network-architecture-document","title":"Example: Network Architecture Document","text":"<pre><code>netintel-ocr \\\n  --model Nanonets-OCR-s:latest \\\n  --network-model qwen2.5vl:7b \\\n  --debug \\\n  cisco-sdwan-design-guide.pdf \\\n  --start 5 --end 10\n</code></pre> <p>Output structure: <pre><code>output/\n\u251c\u2500\u2500 cisco-sdwan-design-guide/\n\u2502   \u251c\u2500\u2500 page_005.md          # Extracted text\n\u2502   \u251c\u2500\u2500 page_006_network.md  # Network diagram with Mermaid\n\u2502   \u251c\u2500\u2500 page_007.md          # Regular page\n\u2502   \u251c\u2500\u2500 summary.json         # Processing summary\n\u2502   \u251c\u2500\u2500 kg_entities.json     # Extracted entities (v0.1.17)\n\u2502   \u251c\u2500\u2500 kg_relations.cypher  # Graph relationships (v0.1.17)\n\u2502   \u2514\u2500\u2500 kg_embeddings.npy    # Learned embeddings (v0.1.17)\n</code></pre></p>"},{"location":"quickstart/#output-formats","title":"Output Formats","text":""},{"location":"quickstart/#markdown-files","title":"Markdown Files","text":"<p>Each page generates a markdown file containing: - Extracted text content - Mermaid diagrams for network/flow charts - Context analysis and interpretations - Component and connection listings</p>"},{"location":"quickstart/#mermaid-diagrams","title":"Mermaid Diagrams","text":"<p>Network diagrams are converted to Mermaid syntax:</p> <pre><code>graph TB\n    Router[\"Core Router\"]\n    Switch1[\"Access Switch 1\"]\n    Switch2[\"Access Switch 2\"]\n\n    Router --&gt; Switch1\n    Router --&gt; Switch2</code></pre>"},{"location":"quickstart/#summary-json","title":"Summary JSON","text":"<p>Processing statistics and metadata:</p> <pre><code>{\n  \"total_pages\": 10,\n  \"network_diagrams\": 3,\n  \"flow_diagrams\": 2,\n  \"processing_time\": 45.2,\n  \"models_used\": {\n    \"ocr\": \"Nanonets-OCR-s:latest\",\n    \"network\": \"qwen2.5vl:7b\",\n    \"kg\": \"RotatE\"\n  },\n  \"knowledge_graph\": {\n    \"entities\": 247,\n    \"relationships\": 892,\n    \"embeddings_dim\": 200,\n    \"training_epochs\": 100\n  }\n}\n</code></pre>"},{"location":"quickstart/#working-with-knowledge-graphs","title":"Working with Knowledge Graphs","text":"<p>New in v0.1.17</p> <p>Knowledge Graph extraction is enabled by default. Use <code>--no-kg</code> to disable if not needed.</p>"},{"location":"quickstart/#basic-kg-processing","title":"Basic KG Processing","text":"<pre><code># Process document with KG extraction (default)\nnetintel-ocr document.pdf\n\n# Process with specific KG model\nnetintel-ocr --kg-model RotatE document.pdf\n\n# Disable KG if not needed\nnetintel-ocr --no-kg document.pdf\n</code></pre>"},{"location":"quickstart/#check-kg-requirements","title":"Check KG Requirements","text":"<pre><code># Verify KG services are running\nnetintel-ocr kg check-requirements\n\n# Output:\n# \u2705 FalkorDB: Connected (localhost:6379)\n# \u2705 Milvus: Connected (localhost:19530)\n# \u2705 PyKEEN: Installed (8 models available)\n# \u2705 Ollama: Connected (localhost:11434)\n</code></pre>"},{"location":"quickstart/#start-required-services","title":"Start Required Services","text":"<pre><code># Using Docker Compose\ndocker-compose up -d falkordb milvus\n\n# Or individually\ndocker run -d --name falkordb -p 6379:6379 falkordb/falkordb\ndocker run -d --name milvus -p 19530:19530 milvusdb/milvus:latest\n</code></pre>"},{"location":"quickstart/#process-and-build-knowledge-graph","title":"Process and Build Knowledge Graph","text":"<pre><code># Process network diagram with KG\nnetintel-ocr \\\n  --network-model qwen2.5vl:7b \\\n  --kg-model RotatE \\\n  --kg-epochs 100 \\\n  network-architecture.pdf\n\n# View extracted entities and relationships\nnetintel-ocr kg stats --collection default\n\n# Output:\n# Entities: 247\n# Relationships: 892\n# Entity Types: 8 (Router, Switch, Firewall, Server...)\n# Embeddings: 200D RotatE vectors\n</code></pre>"},{"location":"quickstart/#query-knowledge-graph","title":"Query Knowledge Graph","text":"<pre><code># Find dependencies of a component\nnetintel-ocr kg query \\\n  --type dependencies \\\n  --entity \"CoreRouter-01\" \\\n  --max-depth 3\n\n# Find all paths between components\nnetintel-ocr kg query \\\n  --type path \\\n  --from \"DMZ-Switch\" \\\n  --to \"Database-Server\"\n\n# Search by relationship type\nnetintel-ocr kg query \\\n  --type relationship \\\n  --relation \"connects_to\" \\\n  --limit 20\n</code></pre>"},{"location":"quickstart/#batch-processing-with-kg","title":"Batch Processing with KG","text":"<pre><code># Process multiple documents into single KG\nnetintel-ocr --batch \\\n  --kg-model ComplEx \\\n  --collection network_docs \\\n  --max-parallel 4 \\\n  *.pdf\n\n# Merge KGs from different sources\nnetintel-ocr kg merge \\\n  --source collection1 \\\n  --source collection2 \\\n  --target merged_kg\n</code></pre>"},{"location":"quickstart/#export-knowledge-graph","title":"Export Knowledge Graph","text":"<pre><code># Export as Cypher queries (for Neo4j)\nnetintel-ocr kg export \\\n  --format cypher \\\n  --output network_graph.cypher\n\n# Export as JSON\nnetintel-ocr kg export \\\n  --format json \\\n  --output network_graph.json\n\n# Export embeddings\nnetintel-ocr kg export \\\n  --format embeddings \\\n  --output kg_embeddings.npy\n</code></pre>"},{"location":"quickstart/#advanced-kg-queries","title":"Advanced KG Queries","text":"<pre><code># Use Cypher directly\nnetintel-ocr kg query \\\n  --cypher \"MATCH (n:Router)-[:CONNECTS_TO]-(m:Switch) \n            WHERE n.location = 'DataCenter-1' \n            RETURN n.name, m.name\"\n\n# Find similar components using embeddings\nnetintel-ocr kg find-similar \\\n  --entity \"Firewall-DMZ-01\" \\\n  --threshold 0.85 \\\n  --limit 10\n\n# Analyze network topology\nnetintel-ocr kg analyze \\\n  --analysis-type \"single-points-of-failure\" \\\n  --output spof_analysis.json\n</code></pre>"},{"location":"quickstart/#kg-configuration-options","title":"KG Configuration Options","text":"<pre><code># Available KG models and their use cases\nnetintel-ocr kg list-models\n\n# Output:\n# TransE    - Simple, fast, good for hierarchical relations\n# RotatE    - Complex relations, best overall (default)\n# ComplEx   - Symmetric relations, bidirectional\n# DistMult  - Simple symmetric relations\n# ConvE     - Convolutional, good for many relations\n# TuckER    - Tensor decomposition, high accuracy\n# HolE      - Holographic embeddings, circular correlation\n# RESCAL    - Matrix factorization, full expressiveness\n\n# Customize KG training\nnetintel-ocr \\\n  --kg-model RotatE \\\n  --kg-epochs 200 \\        # More epochs for better accuracy\n  --kg-batch-size 512 \\    # Larger batch for faster training\n  --kg-embedding-dim 300 \\ # Higher dimensions for complex graphs\n  document.pdf\n</code></pre>"},{"location":"quickstart/#compliance-and-security-checks","title":"Compliance and Security Checks","text":"<pre><code># Run compliance check using KG\nnetintel-ocr kg compliance \\\n  --framework PCI-DSS \\\n  --collection security_docs\n\n# Check access paths\nnetintel-ocr kg trace-access \\\n  --from \"Internet\" \\\n  --to \"Database\" \\\n  --show-all-paths\n\n# Find configuration drift\nnetintel-ocr kg drift-check \\\n  --baseline \"standard-config\" \\\n  --device \"Firewall-01\"\n</code></pre>"},{"location":"quickstart/#real-time-kg-updates","title":"Real-time KG Updates","text":"<pre><code># Monitor directory for new documents\nnetintel-ocr kg monitor \\\n  --watch-dir /docs/network \\\n  --collection live_kg \\\n  --update-interval 300\n\n# Stream KG changes\nnetintel-ocr kg stream \\\n  --collection live_kg \\\n  --format json | tee kg_updates.jsonl\n</code></pre>"},{"location":"quickstart/#common-use-cases","title":"Common Use Cases","text":""},{"location":"quickstart/#extract-network-topologies","title":"Extract Network Topologies","text":"<pre><code>netintel-ocr \\\n  --network-only \\\n  --network-model qwen2.5vl:7b \\\n  network-design.pdf\n</code></pre>"},{"location":"quickstart/#process-security-documentation","title":"Process Security Documentation","text":"<pre><code>netintel-ocr \\\n  --include-context \\\n  --extract-security \\\n  firewall-config.pdf\n</code></pre>"},{"location":"quickstart/#batch-processing","title":"Batch Processing","text":"<pre><code># Process multiple documents\nfor pdf in *.pdf; do\n  netintel-ocr --output-dir processed/ \"$pdf\"\ndone\n</code></pre>"},{"location":"quickstart/#troubleshooting","title":"Troubleshooting","text":""},{"location":"quickstart/#model-not-found","title":"Model Not Found","text":"<pre><code># Check available models\nollama list\n\n# Pull missing model\nollama pull qwen2.5vl:7b\n</code></pre>"},{"location":"quickstart/#connection-issues","title":"Connection Issues","text":"<pre><code># Test Ollama connection\ncurl http://localhost:11434/api/tags\n\n# Check environment\necho $OLLAMA_HOST\n</code></pre>"},{"location":"quickstart/#performance-optimization","title":"Performance Optimization","text":"<pre><code># Use faster model for testing\nnetintel-ocr --network-model minicpm-v:latest document.pdf\n\n# Limit pages for large documents\nnetintel-ocr --start 1 --end 20 large-document.pdf\n\n# Disable context extraction for speed\nnetintel-ocr --no-context document.pdf\n</code></pre>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Deployment Guide - Set up production environment</li> <li>Customization Guide - Tune prompts and extraction</li> <li>Vector Search Guide - Enable semantic search</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>Platform Requirements</p> <p>Linux Only - NetIntel-OCR runs only on Linux systems.</p> <p>Python 3.11 or 3.12 Only - Other versions are not supported.</p> <p>If you're on Windows/Mac or using a different Python version, these are likely the cause of your issues.</p>"},{"location":"troubleshooting/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"troubleshooting/#platform-issues","title":"Platform Issues","text":""},{"location":"troubleshooting/#wrong-operating-system","title":"Wrong Operating System","text":"<p><pre><code>ERROR: Unsupported platform detected\nERROR: Module compilation failed\nERROR: Binary wheel not available\n</code></pre> Solution: <pre><code># Check your OS (must be Linux)\nuname -s\n# Expected: Linux\n\n# NetIntel-OCR requires Linux. Options:\n# 1. Use WSL2 on Windows\n# 2. Use a Linux VM\n# 3. Use a Linux container\n# 4. Deploy to a Linux server\n</code></pre></p>"},{"location":"troubleshooting/#wrong-python-version","title":"Wrong Python Version","text":"<p><pre><code>ERROR: Python 3.11 or 3.12 required\nERROR: Unsupported Python version\nERROR: Module 'netintel_ocr' has no attribute...\n</code></pre> Solution: <pre><code># Check Python version (MUST be 3.11.x or 3.12.x)\npython --version\n\n# Install Python 3.11 on Ubuntu/Debian\nsudo apt update &amp;&amp; sudo apt install python3.11 python3.11-venv python3.11-dev\n\n# Install Python 3.12 on Ubuntu/Debian  \nsudo apt install python3.12 python3.12-venv python3.12-dev\n\n# Create virtual environment with correct version\npython3.11 -m venv venv\nsource venv/bin/activate\n\n# Verify version in virtual environment\npython --version  # Must show 3.11.x or 3.12.x\n</code></pre></p>"},{"location":"troubleshooting/#missing-dependencies","title":"Missing Dependencies","text":"<p><pre><code>ERROR: No module named 'pymupdf'\nERROR: ImportError: libGL.so.1: cannot open shared object file\n</code></pre> Solution: <pre><code># Install Linux system dependencies first\nsudo apt-get update\nsudo apt-get install -y \\\n    python3.11-dev \\  # or python3.12-dev\n    gcc g++ \\\n    libgl1-mesa-glx \\\n    libglib2.0-0 \\\n    libsm6 libxext6 libxrender-dev \\\n    libgomp1\n\n# Then reinstall with all dependencies\npip install --upgrade netintel-ocr[all]\n\n# Or install missing module\npip install pymupdf pillow opencv-python-headless\n</code></pre></p>"},{"location":"troubleshooting/#c-extension-build-failure","title":"C++ Extension Build Failure","text":"<p><pre><code>ERROR: Failed building wheel for netintel-ocr\nERROR: Microsoft Visual C++ 14.0 is required (Windows error)\n</code></pre> Solution: <pre><code># This is a Windows error - NetIntel-OCR only supports Linux\n# Switch to a Linux environment\n\n# On Linux, install build tools:\nsudo apt-get install build-essential python3.11-dev\n# or\nsudo yum install gcc gcc-c++ python3.11-devel\n</code></pre></p>"},{"location":"troubleshooting/#ollama-connection-issues","title":"Ollama Connection Issues","text":""},{"location":"troubleshooting/#ollama-not-running","title":"Ollama Not Running","text":"<p><pre><code>ERROR: Connection refused to localhost:11434\n</code></pre> Solution: <pre><code># Start Ollama\nollama serve\n\n# Check if running\ncurl http://localhost:11434/api/tags\n\n# Start in background\nnohup ollama serve &gt; ollama.log 2&gt;&amp;1 &amp;\n</code></pre></p>"},{"location":"troubleshooting/#remote-ollama-host","title":"Remote Ollama Host","text":"<p><pre><code>ERROR: Cannot connect to Ollama\n</code></pre> Solution: <pre><code># Set environment variable\nexport OLLAMA_HOST=http://192.168.1.100:11434\n\n# Or use CLI parameter\nnetintel-ocr --ollama-host http://192.168.1.100:11434 document.pdf\n\n# Test connection\ncurl $OLLAMA_HOST/api/tags\n</code></pre></p>"},{"location":"troubleshooting/#model-issues","title":"Model Issues","text":""},{"location":"troubleshooting/#model-not-found","title":"Model Not Found","text":"<p><pre><code>ERROR: Model 'qwen2.5vl:7b' not found\n</code></pre> Solution: <pre><code># List available models\nollama list\n\n# Pull missing model\nollama pull qwen2.5vl:7b\n\n# Use available model\nnetintel-ocr --network-model llava:latest document.pdf\n</code></pre></p>"},{"location":"troubleshooting/#out-of-memory","title":"Out of Memory","text":"<p><pre><code>ERROR: Out of memory (OOM)\n</code></pre> Solution: <pre><code># Use smaller model\nnetintel-ocr --network-model minicpm-v:latest document.pdf\n\n# Limit context size\nnetintel-ocr --max-context 2048 document.pdf\n\n# Process fewer pages\nnetintel-ocr --start 1 --end 10 document.pdf\n\n# Free memory\nollama stop all\n</code></pre></p>"},{"location":"troubleshooting/#processing-errors","title":"Processing Errors","text":""},{"location":"troubleshooting/#pdf-read-error","title":"PDF Read Error","text":"<p><pre><code>ERROR: Cannot read PDF file\n</code></pre> Solution: <pre><code># Check file exists and is valid\nfile document.pdf\npdfinfo document.pdf\n\n# Try repairing PDF\nqpdf --replace-input document.pdf\n\n# Convert with ghostscript\ngs -sDEVICE=pdfwrite -o fixed.pdf document.pdf\n</code></pre></p>"},{"location":"troubleshooting/#timeout-during-processing","title":"Timeout During Processing","text":"<p><pre><code>ERROR: Processing timeout after 300 seconds\n</code></pre> Solution: <pre><code># Increase timeout\nnetintel-ocr --timeout 600 document.pdf\n\n# Use faster model\nnetintel-ocr --network-model bakllava:latest document.pdf\n\n# Process in smaller chunks\nnetintel-ocr --start 1 --end 20 document.pdf\nnetintel-ocr --start 21 --end 40 document.pdf\n</code></pre></p>"},{"location":"troubleshooting/#mermaid-parse-error","title":"Mermaid Parse Error","text":"<p><pre><code>ERROR: Parse error on line 3\n</code></pre> Solution: <pre><code># Enable auto-fix\nnetintel-ocr --fix-mermaid document.pdf\n\n# Use robust validator\nnetintel-ocr --validate-mermaid document.pdf\n\n# Disable Mermaid generation\nnetintel-ocr --no-mermaid document.pdf\n</code></pre></p>"},{"location":"troubleshooting/#vector-store-issues","title":"Vector Store Issues","text":""},{"location":"troubleshooting/#milvus-connection-failed","title":"Milvus Connection Failed","text":"<p><pre><code>ERROR: Cannot connect to Milvus at localhost:19530\n</code></pre> Solution: <pre><code># Start Milvus\ndocker run -d --name milvus \\\n  -p 19530:19530 \\\n  milvusdb/milvus:latest\n\n# Check connection\npython -c \"from pymilvus import connections; connections.connect()\"\n\n# Use different host\nnetintel-ocr --milvus-host milvus.server:19530 document.pdf\n</code></pre></p>"},{"location":"troubleshooting/#collection-already-exists","title":"Collection Already Exists","text":"<p><pre><code>ERROR: Collection 'network_docs' already exists\n</code></pre> Solution: <pre><code># Drop existing collection\nnetintel-ocr --drop-collection network_docs\n\n# Or use different collection\nnetintel-ocr --collection network_docs_v2 document.pdf\n\n# Append to existing\nnetintel-ocr --append-collection network_docs document.pdf\n</code></pre></p>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#slow-processing","title":"Slow Processing","text":"<p>Symptoms: Processing takes &gt;30s per page</p> <p>Solutions: <pre><code># Use faster models\nnetintel-ocr --fast-mode document.pdf\n\n# Enable GPU\nnetintel-ocr --gpu document.pdf\n\n# Disable context extraction\nnetintel-ocr --no-context document.pdf\n\n# Use cached models\nnetintel-ocr --cache-models document.pdf\n</code></pre></p>"},{"location":"troubleshooting/#high-memory-usage","title":"High Memory Usage","text":"<p>Symptoms: System becomes unresponsive</p> <p>Solutions: <pre><code># Limit memory usage\nnetintel-ocr --max-memory 4GB document.pdf\n\n# Process sequentially\nnetintel-ocr --no-parallel document.pdf\n\n# Clear cache\nnetintel-ocr --clear-cache\nrm -rf ~/.cache/netintel-ocr\n</code></pre></p>"},{"location":"troubleshooting/#output-issues","title":"Output Issues","text":""},{"location":"troubleshooting/#missing-output-files","title":"Missing Output Files","text":"<p><pre><code>No output files generated\n</code></pre> Solution: <pre><code># Check output directory\nls -la output/\n\n# Specify output directory\nnetintel-ocr --output-dir ./my-output document.pdf\n\n# Check permissions\nchmod 755 output/\nchmod 644 document.pdf\n</code></pre></p>"},{"location":"troubleshooting/#corrupted-mermaid-diagrams","title":"Corrupted Mermaid Diagrams","text":"<p>Symptoms: Mermaid diagrams don't render</p> <p>Solution: <pre><code># Validate Mermaid syntax\nnetintel-ocr --validate-only output/page_005_network.md\n\n# Re-process with fixes\nnetintel-ocr --fix-mermaid --pages 5 document.pdf\n\n# Use different Mermaid version\nnetintel-ocr --mermaid-version 10.0.0 document.pdf\n</code></pre></p>"},{"location":"troubleshooting/#environment-verification","title":"Environment Verification","text":""},{"location":"troubleshooting/#check-system-compatibility","title":"Check System Compatibility","text":"<pre><code># Full system check\necho \"OS: $(uname -s)\"  # Must be Linux\necho \"Arch: $(uname -m)\"  # Should be x86_64\necho \"Python: $(python3 --version)\"  # Must be 3.11.x or 3.12.x\necho \"Distro: $(lsb_release -d 2&gt;/dev/null || cat /etc/os-release | grep PRETTY_NAME)\"\n\n# Expected output:\n# OS: Linux\n# Arch: x86_64  \n# Python: Python 3.11.x (or 3.12.x)\n# Distro: Ubuntu 20.04/22.04 or similar\n</code></pre>"},{"location":"troubleshooting/#python-environment-check","title":"Python Environment Check","text":"<pre><code># Verify Python installation\nwhich python3.11 python3.12 2&gt;/dev/null\n\n# Check available Python versions\nls -la /usr/bin/python3*\n\n# Verify pip version matches Python\npip --version  # Should show (python 3.11) or (python 3.12)\n\n# Check virtual environment\npython -c \"import sys; print(f'Python: {sys.version}')\"\npython -c \"import platform; print(f'Platform: {platform.platform()}')\"\n</code></pre>"},{"location":"troubleshooting/#debugging-commands","title":"Debugging Commands","text":""},{"location":"troubleshooting/#enable-debug-mode","title":"Enable Debug Mode","text":"<pre><code># Full debug output (Linux only)\nnetintel-ocr --debug document.pdf\n\n# Debug specific component\nnetintel-ocr --debug-component network_detection document.pdf\n\n# Save debug logs\nnetintel-ocr --debug --log-file debug.log document.pdf\n</code></pre>"},{"location":"troubleshooting/#test-components","title":"Test Components","text":"<pre><code># Test OCR only\nnetintel-ocr --test-ocr document.pdf\n\n# Test diagram detection only\nnetintel-ocr --test-detection document.pdf\n\n# Dry run without processing\nnetintel-ocr --dry-run document.pdf\n</code></pre>"},{"location":"troubleshooting/#health-checks","title":"Health Checks","text":"<pre><code># System health check\nnetintel-ocr --health-check\n\n# Model availability\nnetintel-ocr --check-models\n\n# Storage status\nnetintel-ocr --check-storage\n</code></pre>"},{"location":"troubleshooting/#log-analysis","title":"Log Analysis","text":""},{"location":"troubleshooting/#common-log-patterns","title":"Common Log Patterns","text":"<pre><code># Find errors in logs\ngrep ERROR netintel.log\n\n# Find timeout issues\ngrep -i timeout netintel.log\n\n# Find model issues\ngrep -E \"(model|ollama)\" netintel.log\n\n# Find memory issues\ngrep -E \"(memory|OOM|RAM)\" netintel.log\n</code></pre>"},{"location":"troubleshooting/#log-levels","title":"Log Levels","text":"<pre><code># Verbose logging\nnetintel-ocr --log-level DEBUG document.pdf\n\n# Only errors\nnetintel-ocr --log-level ERROR document.pdf\n\n# Structured JSON logs\nnetintel-ocr --log-format json document.pdf\n</code></pre>"},{"location":"troubleshooting/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"troubleshooting/#resume-failed-processing","title":"Resume Failed Processing","text":"<pre><code># Save checkpoint\nnetintel-ocr --checkpoint state.json document.pdf\n\n# Resume from checkpoint\nnetintel-ocr --resume state.json document.pdf\n</code></pre>"},{"location":"troubleshooting/#rebuild-vector-index","title":"Rebuild Vector Index","text":"<pre><code># Rebuild corrupted index\nnetintel-ocr --rebuild-index network_docs\n\n# Verify index integrity\nnetintel-ocr --verify-index network_docs\n</code></pre>"},{"location":"troubleshooting/#reset-configuration","title":"Reset Configuration","text":"<pre><code># Reset to defaults\nnetintel-ocr --reset-config\n\n# Regenerate config\nnetintel-ocr --init --force\n</code></pre>"},{"location":"troubleshooting/#platform-specific-issues","title":"Platform-Specific Issues","text":""},{"location":"troubleshooting/#wsl2-windows-subsystem-for-linux","title":"WSL2 (Windows Subsystem for Linux)","text":"<pre><code># If trying to run on Windows via WSL2\n# Ensure WSL2 is properly configured\nwsl --status\nwsl --list --verbose\n\n# Install Ubuntu 22.04 in WSL2\nwsl --install -d Ubuntu-22.04\n\n# Inside WSL2, install Python 3.11\nsudo apt update\nsudo apt install python3.11 python3.11-venv python3.11-dev\n\n# Install NetIntel-OCR in WSL2 environment\npython3.11 -m pip install netintel-ocr\n</code></pre>"},{"location":"troubleshooting/#docker-on-non-linux-systems","title":"Docker on Non-Linux Systems","text":"<pre><code># Running via Docker on Windows/Mac\n# Note: Performance may be degraded\n\n# Use Linux container mode\ndocker run --platform linux/amd64 \\\n  -v $(pwd):/data \\\n  netintel-ocr:latest document.pdf\n\n# Build for Linux platform\ndocker buildx build --platform linux/amd64 -t netintel-ocr:latest .\n</code></pre>"},{"location":"troubleshooting/#common-linux-distribution-issues","title":"Common Linux Distribution Issues","text":""},{"location":"troubleshooting/#ubuntudebian","title":"Ubuntu/Debian","text":"<pre><code># Missing Python 3.11/3.12\nsudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt update\nsudo apt install python3.11-full\n</code></pre>"},{"location":"troubleshooting/#rhelcentosrocky-linux","title":"RHEL/CentOS/Rocky Linux","text":"<pre><code># Enable EPEL and install Python 3.11\nsudo dnf install epel-release\nsudo dnf install python3.11 python3.11-devel\n</code></pre>"},{"location":"troubleshooting/#arch-linux","title":"Arch Linux","text":"<pre><code># Python versions available in standard repos\nsudo pacman -S python  # Usually latest version\n</code></pre>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"troubleshooting/#generate-diagnostic-report","title":"Generate Diagnostic Report","text":"<pre><code># Full system diagnostic (Linux only)\nnetintel-ocr --diagnostic-report &gt; report.txt\n\n# Include system info\necho \"=== System Info ===\" &gt;&gt; report.txt\nuname -a &gt;&gt; report.txt\npython --version &gt;&gt; report.txt\nlsb_release -a 2&gt;/dev/null &gt;&gt; report.txt\n</code></pre>"},{"location":"troubleshooting/#community-support","title":"Community Support","text":"<ul> <li>GitHub Issues: https://github.com/VisionMLNet/NetIntelOCR/issues</li> <li>PyPI Package: https://pypi.org/project/netintel-ocr/</li> <li>Documentation: https://visionml.net/docs</li> <li>Discord: https://discord.gg/netintel-ocr</li> </ul>"},{"location":"troubleshooting/#include-in-bug-reports","title":"Include in Bug Reports","text":"<ol> <li>Operating System: <code>uname -a</code> (MUST be Linux)</li> <li>Python version: <code>python --version</code> (MUST be 3.11.x or 3.12.x)</li> <li>NetIntel-OCR version: <code>netintel-ocr --version</code></li> <li>Linux distribution: <code>cat /etc/os-release</code></li> <li>Ollama models: <code>ollama list</code></li> <li>Error messages and logs</li> <li>Installation method (pip, Docker, source)</li> <li>Sample PDF (if possible)</li> </ol>"},{"location":"troubleshooting/#next-steps","title":"Next Steps","text":"<ul> <li>Multi-Model Guide - Optimize model selection</li> <li>Performance Guide - Improve processing speed</li> <li>API Integration - Programmatic troubleshooting</li> </ul>"},{"location":"use-cases/","title":"Knowledge Graph Use Cases","text":"<p>Technical workflows demonstrating NetIntel-OCR v0.1.17's Knowledge Graph capabilities through real-world scenarios.</p>"},{"location":"use-cases/#available-use-cases","title":"Available Use Cases","text":""},{"location":"use-cases/#network-infrastructure-migration","title":"\ud83d\udcca Network Infrastructure Migration","text":"<p>Transform complex network documentation into actionable migration plans with dependency analysis and risk assessment.</p> <p>Key Capabilities: - Dependency mapping across 3,847 components - Hidden connection discovery - Migration wave planning - Cloud compatibility validation - Risk assessment and validation</p> <p>Metrics: - Analysis time: 3 months \u2192 2 days - Accuracy: 94% vs 67% manual - Hidden dependencies found: 23</p>"},{"location":"use-cases/#security-compliance-audit","title":"\ud83d\udd12 Security Compliance Audit","text":"<p>Automate PCI-DSS, SOC2, and security compliance validation with configuration drift detection and automated remediation.</p> <p>Key Capabilities: - Multi-framework compliance checking - Configuration drift analysis - Access path tracing - Automated remediation scripts - Zero-trust validation</p> <p>Metrics: - Audit time: 3 weeks \u2192 2 days - Compliance score: 78% \u2192 92% - Violations detected: 96% accuracy</p>"},{"location":"use-cases/#intelligent-incident-response","title":"\ud83d\udea8 Intelligent Incident Response","text":"<p>Real-time incident correlation with automated runbook execution and root cause analysis.</p> <p>Key Capabilities: - Multi-source alert correlation - Automated runbook matching - Root cause analysis - Pattern recognition - Prevention recommendations</p> <p>Metrics: - MTTR: 45 min \u2192 15 min (67% reduction) - Auto-resolution: 78.7% of incidents - Revenue protected: $3.2M annually</p>"},{"location":"use-cases/#performance-comparison","title":"Performance Comparison","text":""},{"location":"use-cases/#query-performance-across-use-cases","title":"Query Performance Across Use Cases","text":"Operation Traditional Vector Only Graph Only KG Embeddings Hybrid KG Dependency Analysis 2.3s 450ms 120ms 85ms 180ms Compliance Check 5.1s 780ms 230ms 140ms 290ms Incident Correlation 8.7s 920ms 340ms 190ms 410ms Accuracy 62% 71% 83% 87% 94%"},{"location":"use-cases/#storage-efficiency","title":"Storage Efficiency","text":"<pre><code>Traditional Approach:\n  Separate databases: 15.3 GB\n  Redundant data: 4.7 GB\n  Total: 20 GB\n\nNetIntel-OCR KG:\n  FalkorDB: 3.2 GB\n  Milvus: 8.1 GB\n  Total: 11.3 GB\n  Savings: 43.5%\n</code></pre>"},{"location":"use-cases/#technical-architecture","title":"Technical Architecture","text":""},{"location":"use-cases/#knowledge-graph-stack","title":"Knowledge Graph Stack","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         PDF Documents               \u2502\n\u2502  (Network, Security, Operations)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n             \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      NetIntel-OCR v0.1.17          \u2502\n\u2502  \u2022 Diagram Detection                \u2502\n\u2502  \u2022 Table Extraction                 \u2502\n\u2502  \u2022 Entity Recognition               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n             \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u25bc                 \u25bc          \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502FalkorDB \u2502    \u2502  PyKEEN  \u2502  \u2502 Milvus  \u2502\n\u2502 Graph   \u2502    \u2502Embeddings\u2502  \u2502 Vectors \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502                 \u2502          \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n             \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       Hybrid Retrieval              \u2502\n\u2502  \u2022 Query Classification             \u2502\n\u2502  \u2022 Strategy Selection               \u2502\n\u2502  \u2022 Result Fusion                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"use-cases/#getting-started","title":"Getting Started","text":""},{"location":"use-cases/#prerequisites","title":"Prerequisites","text":"<pre><code># Install NetIntel-OCR\npip install netintel-ocr==0.1.17\n\n# Start required services\ndocker-compose up -d falkordb milvus ollama\n\n# Verify installation\nnetintel-ocr kg check-requirements\n</code></pre>"},{"location":"use-cases/#quick-commands","title":"Quick Commands","text":"<pre><code># Process documents with KG\nnetintel-ocr --batch --kg-model RotatE documents/*.pdf\n\n# Query knowledge graph\nnetintel-ocr kg query --entity \"System-Name\" --max-depth 3\n\n# Run compliance check\nnetintel-ocr kg compliance --framework PCI-DSS-v4.0\n\n# Correlate incident\nnetintel-ocr kg correlate --incident alert.json\n</code></pre>"},{"location":"use-cases/#choosing-the-right-use-case","title":"Choosing the Right Use Case","text":""},{"location":"use-cases/#when-to-use-each-approach","title":"When to Use Each Approach","text":"Scenario Recommended Use Case Key Benefits Cloud migration planning Migration Dependency mapping, risk assessment Compliance audit Compliance Automated validation, remediation Service outage Incident Response Fast correlation, runbook automation Network redesign Migration Impact analysis, validation Security assessment Compliance Vulnerability detection, drift analysis Performance issues Incident Response Pattern recognition, RCA"},{"location":"use-cases/#advanced-features","title":"Advanced Features","text":""},{"location":"use-cases/#knowledge-graph-capabilities","title":"Knowledge Graph Capabilities","text":"<ul> <li>Entity Extraction: Automatic identification of network components, services, and relationships</li> <li>Embedding Training: 8 PyKEEN models for different relationship types</li> <li>Hybrid Retrieval: Combines graph traversal, vector similarity, and KG embeddings</li> <li>Query Routing: Automatic selection of optimal retrieval strategy</li> <li>Real-time Updates: Continuous learning from new documents</li> </ul>"},{"location":"use-cases/#integration-options","title":"Integration Options","text":"<ul> <li>REST API: HTTP endpoints for all operations</li> <li>Python SDK: Native Python library for custom workflows</li> <li>CLI Tools: Command-line interface for automation</li> <li>Docker/K8s: Container deployment for scalability</li> </ul>"},{"location":"use-cases/#support-and-resources","title":"Support and Resources","text":"<ul> <li>Documentation: Knowledge Graph Guide</li> <li>Quick Start: Getting Started</li> <li>API Reference: API Documentation</li> <li>Troubleshooting: Support Guide</li> </ul> <p>Select a use case above to explore detailed technical workflows and command examples.</p>"},{"location":"usecase-compliance/","title":"Security Compliance Audit &amp; Remediation","text":""},{"location":"usecase-compliance/#scenario-overview","title":"Scenario Overview","text":"<p>Organization: Financial services company processing payments Challenge: Validate PCI-DSS and SOC2 compliance Infrastructure: 200+ firewalls, complex network segmentation Requirements: Quarterly audits, configuration drift detection  </p>"},{"location":"usecase-compliance/#technical-workflow","title":"Technical Workflow","text":""},{"location":"usecase-compliance/#step-1-security-audit-setup","title":"Step 1: Security Audit Setup","text":"<pre><code># Initialize security audit project\nmkdir -p security-audit/{docs,analysis,remediation}\ncd security-audit\n\n# Configure NetIntel-OCR for security analysis\ncat &gt; kg_config.yaml &lt;&lt; EOF\ncollection: security_audit\nkg_model: ComplEx  # Better for bidirectional relationships\nkg_epochs: 150\ncompliance_frameworks:\n  - PCI-DSS-v4.0\n  - SOC2-Type2\n  - ISO-27001\nsecurity_zones:\n  - DMZ\n  - CDE  # Cardholder Data Environment\n  - Internal\n  - Management\nEOF\n\n# Start with security-focused configuration\nnetintel-ocr kg init --config kg_config.yaml\n</code></pre>"},{"location":"usecase-compliance/#step-2-process-security-documentation","title":"Step 2: Process Security Documentation","text":"<pre><code># Process network segmentation diagrams\nnetintel-ocr \\\n  --network-model qwen2.5vl:7b \\\n  --kg-model ComplEx \\\n  --extract-security-zones \\\n  --extract-firewall-rules \\\n  docs/network-segmentation.pdf \\\n  --output analysis/\n\n# Process firewall configurations (multiple vendors)\nfor config in docs/configs/*.pdf; do\n  netintel-ocr \\\n    --extract-tables \\\n    --table-method advanced \\\n    --kg-store-configs \\\n    \"$config\" \\\n    --output \"analysis/$(basename $config .pdf)/\"\ndone\n\n# Process security policies\nnetintel-ocr --batch \\\n  --text-only \\\n  --kg-extract-policies \\\n  docs/policies/*.pdf \\\n  --output analysis/policies/\n\n# Verify extraction\nnetintel-ocr kg stats --collection security_audit --type security\n\n# Output:\n# Security Entities:\n#   Firewalls: 234\n#   Rules: 8,456\n#   Zones: 12\n#   VLANs: 47\n#   Access Policies: 156\n#   Encryption Standards: 23\n</code></pre>"},{"location":"usecase-compliance/#step-3-pci-dss-compliance-validation","title":"Step 3: PCI-DSS Compliance Validation","text":"<pre><code># Run PCI-DSS compliance check\nnetintel-ocr kg compliance \\\n  --framework PCI-DSS-v4.0 \\\n  --collection security_audit \\\n  --output analysis/pci_compliance.json\n\n# Check network segmentation (PCI Requirement 1.3)\nnetintel-ocr kg query \\\n  --cypher \"MATCH (cde:Zone {name: 'CDE'})-[r]-(other:Zone) \n            WHERE NOT exists(r.firewall) \n            RETURN cde, r, other\" \\\n  --output analysis/segmentation_violations.json\n\n# Analyze firewall rules for compliance\nnetintel-ocr kg analyze-rules \\\n  --collection security_audit \\\n  --check-inbound-cde \\\n  --check-outbound-cde \\\n  --check-any-any-rules \\\n  --output analysis/firewall_audit.json\n\n# Generate compliance score\nnetintel-ocr kg compliance-score \\\n  --framework PCI-DSS-v4.0 \\\n  --collection security_audit\n\n# Output:\n# PCI-DSS Compliance Score: 78%\n# \n# Critical Violations: 3\n# - Direct connection between CDE and Internet (Req 1.3.1)\n# - Missing network segmentation controls (Req 1.3.4)\n# - Unencrypted management protocols (Req 2.3)\n# \n# High Risk: 8\n# Medium Risk: 15\n# Low Risk: 42\n</code></pre>"},{"location":"usecase-compliance/#step-4-configuration-drift-detection","title":"Step 4: Configuration Drift Detection","text":"<pre><code># Define baseline configuration\nnetintel-ocr kg set-baseline \\\n  --collection security_audit \\\n  --firewall \"FW-Template-PCI\" \\\n  --save-as pci_baseline\n\n# Find similar configurations using KG embeddings\nnetintel-ocr kg find-similar \\\n  --collection security_audit \\\n  --reference \"FW-Template-PCI\" \\\n  --similarity-threshold 0.85 \\\n  --output analysis/similar_configs.json\n\n# Detect configuration drift\nnetintel-ocr kg drift-analysis \\\n  --collection security_audit \\\n  --baseline pci_baseline \\\n  --output analysis/config_drift.json\n\n# Show drift summary\ncat analysis/config_drift.json | jq '.drift_summary'\n\n# Output:\n# {\n#   \"total_devices\": 234,\n#   \"compliant\": 187,\n#   \"drift_detected\": 47,\n#   \"critical_drift\": 12,\n#   \"parameters_changed\": {\n#     \"acl_rules\": 23,\n#     \"nat_policies\": 15,\n#     \"logging_config\": 34,\n#     \"timeout_values\": 18\n#   }\n# }\n\n# Generate drift report for each firewall\nfor fw in $(cat analysis/config_drift.json | jq -r '.drifted_devices[].name'); do\n  netintel-ocr kg drift-details \\\n    --device \"$fw\" \\\n    --baseline pci_baseline \\\n    --output \"analysis/drift/$fw.txt\"\ndone\n</code></pre>"},{"location":"usecase-compliance/#step-5-access-path-analysis","title":"Step 5: Access Path Analysis","text":"<pre><code># Trace all paths to sensitive data\nnetintel-ocr kg trace-access \\\n  --collection security_audit \\\n  --target-type database \\\n  --classification sensitive \\\n  --max-hops 5 \\\n  --include-authentication \\\n  --output analysis/access_paths.json\n\n# Find unauthorized access paths\nnetintel-ocr kg find-violations \\\n  --collection security_audit \\\n  --violation-type unauthorized-access \\\n  --output analysis/unauthorized_access.json\n\n# Analyze zero-trust compliance\nnetintel-ocr kg zero-trust-audit \\\n  --collection security_audit \\\n  --check-authentication \\\n  --check-encryption \\\n  --check-segmentation \\\n  --output analysis/zero_trust_audit.json\n\n# Generate access matrix\nnetintel-ocr kg access-matrix \\\n  --collection security_audit \\\n  --format csv \\\n  --output analysis/access_matrix.csv\n\n# View critical findings\ngrep -E \"CRITICAL|HIGH\" analysis/zero_trust_audit.json | head -20\n</code></pre>"},{"location":"usecase-compliance/#step-6-automated-remediation","title":"Step 6: Automated Remediation","text":"<pre><code># Generate remediation scripts for violations\nnetintel-ocr kg remediate \\\n  --collection security_audit \\\n  --violations analysis/pci_compliance.json \\\n  --platform cisco-ios \\\n  --output remediation/\n\n# List generated scripts\nls -la remediation/\n# fix_segmentation_FW-DMZ-01.ios\n# fix_segmentation_FW-DMZ-02.ios\n# block_direct_cde_access.ios\n# enable_encryption_protocols.ios\n\n# Preview remediation for specific device\ncat remediation/fix_segmentation_FW-DMZ-01.ios\n\n# Output:\n# ! Remediation script for FW-DMZ-01\n# ! Generated: 2024-01-15 14:23:45\n# ! PCI-DSS Requirement: 1.3.1\n# \n# configure terminal\n# !\n# ! Block direct access from Internet to CDE\n# access-list 101 deny ip any 10.10.10.0 0.0.0.255\n# access-list 101 permit ip any any\n# !\n# interface GigabitEthernet0/0\n#   ip access-group 101 in\n# !\n# ! Enable logging for audit\n# logging buffered 65536\n# logging trap informational\n# !\n# end\n# write memory\n\n# Validate remediation scripts\nnetintel-ocr kg validate-scripts \\\n  --scripts remediation/*.ios \\\n  --check-syntax \\\n  --check-conflicts \\\n  --simulate\n\n# Apply scripts (with approval workflow)\nfor script in remediation/*.ios; do\n  echo \"Reviewing: $script\"\n  netintel-ocr kg apply-script \\\n    --script \"$script\" \\\n    --dry-run \\\n    --output \"remediation/dry-run/$(basename $script .ios).log\"\ndone\n</code></pre>"},{"location":"usecase-compliance/#advanced-compliance-queries","title":"Advanced Compliance Queries","text":""},{"location":"usecase-compliance/#finding-policy-violations","title":"Finding Policy Violations","text":"<pre><code># Query for specific PCI requirements\nnetintel-ocr kg query \\\n  --cypher \"MATCH (fw:Firewall)-[:HAS_RULE]-&gt;(r:Rule)\n            WHERE r.source = 'any' AND r.destination = 'any'\n            RETURN fw.name as firewall, count(r) as any_any_rules\n            ORDER BY any_any_rules DESC\" \\\n  --output analysis/any_any_rules.json\n\n# Find unencrypted protocols\nnetintel-ocr kg query \\\n  --cypher \"MATCH (s:Service)\n            WHERE s.protocol IN ['telnet', 'ftp', 'http']\n            AND s.zone = 'CDE'\n            RETURN s.name, s.protocol, s.port\" \\\n  --output analysis/unencrypted_services.json\n</code></pre>"},{"location":"usecase-compliance/#configuration-comparison","title":"Configuration Comparison","text":"<pre><code># Compare configurations between environments\nnetintel-ocr kg compare-configs \\\n  --device1 \"FW-PROD-01\" \\\n  --device2 \"FW-DR-01\" \\\n  --output analysis/prod_dr_comparison.json\n\n# Find outliers in configuration\nnetintel-ocr kg find-outliers \\\n  --collection security_audit \\\n  --device-type firewall \\\n  --threshold 2.5  # standard deviations\n  --output analysis/config_outliers.json\n</code></pre>"},{"location":"usecase-compliance/#compliance-trending","title":"Compliance Trending","text":"<pre><code># Track compliance over time\nnetintel-ocr kg compliance-trend \\\n  --collection security_audit \\\n  --framework PCI-DSS-v4.0 \\\n  --period 90d \\\n  --output analysis/compliance_trend.json\n\n# Generate improvement metrics\ncat analysis/compliance_trend.json | jq '.monthly[] | {month: .period, score: .compliance_score, violations: .violation_count}'\n\n# Output:\n# {\"month\": \"2024-01\", \"score\": 67, \"violations\": 89}\n# {\"month\": \"2024-02\", \"score\": 74, \"violations\": 62}\n# {\"month\": \"2024-03\", \"score\": 78, \"violations\": 47}\n</code></pre>"},{"location":"usecase-compliance/#reporting-and-evidence","title":"Reporting and Evidence","text":"<pre><code># Generate compliance dashboard data\nnetintel-ocr kg dashboard \\\n  --collection security_audit \\\n  --metrics compliance,risk,drift \\\n  --output analysis/dashboard.json\n\n# Generate detailed compliance report\nnetintel-ocr kg report \\\n  --collection security_audit \\\n  --report-type compliance \\\n  --framework PCI-DSS-v4.0 \\\n  --include-evidence \\\n  --format pdf \\\n  --output analysis/PCI_Compliance_Report.pdf\n\n# Generate remediation timeline\nnetintel-ocr kg timeline \\\n  --collection security_audit \\\n  --remediation-scripts remediation/*.ios \\\n  --output analysis/remediation_timeline.json\n\n# Create audit evidence package\nnetintel-ocr kg evidence-package \\\n  --collection security_audit \\\n  --framework PCI-DSS-v4.0 \\\n  --include-screenshots \\\n  --include-configs \\\n  --include-logs \\\n  --output analysis/audit_evidence.zip\n</code></pre>"},{"location":"usecase-compliance/#performance-metrics","title":"Performance Metrics","text":"<pre><code># Measure compliance check performance\nnetintel-ocr kg benchmark \\\n  --collection security_audit \\\n  --operation compliance-check \\\n  --frameworks \"PCI-DSS,SOC2,ISO27001\" \\\n  --output analysis/compliance_performance.json\n\n# Results:\n# {\n#   \"PCI-DSS\": {\n#     \"check_time_ms\": 4500,\n#     \"rules_evaluated\": 156,\n#     \"violations_found\": 47\n#   },\n#   \"SOC2\": {\n#     \"check_time_ms\": 3200,\n#     \"controls_evaluated\": 89,\n#     \"violations_found\": 23\n#   }\n# }\n</code></pre>"},{"location":"usecase-compliance/#key-findings","title":"Key Findings","text":""},{"location":"usecase-compliance/#compliance-status","title":"Compliance Status","text":"<ul> <li>PCI-DSS Score: 78% (target: 95%)</li> <li>Critical violations: 3 requiring immediate action</li> <li>Configuration drift: 47 devices (20%)</li> <li>Unauthorized access paths: 12 discovered</li> </ul>"},{"location":"usecase-compliance/#security-insights","title":"Security Insights","text":"<ul> <li>Firewall rules analyzed: 8,456</li> <li>Any-any rules found: 23 (critical risk)</li> <li>Unencrypted protocols: 15 in sensitive zones</li> <li>Missing segmentation: 5 network segments</li> </ul>"},{"location":"usecase-compliance/#remediation-impact","title":"Remediation Impact","text":"<ul> <li>Scripts generated: 156 automated fixes</li> <li>Estimated remediation time: 2 days (vs 3 weeks manual)</li> <li>Risk reduction: 67% after remediation</li> <li>Compliance improvement: 78% \u2192 92% projected</li> </ul>"},{"location":"usecase-compliance/#commands-reference","title":"Commands Reference","text":"<pre><code># Essential compliance commands\nnetintel-ocr kg compliance --framework PCI-DSS-v4.0 --output audit.json\nnetintel-ocr kg drift-analysis --baseline [name] --output drift.json\nnetintel-ocr kg remediate --violations audit.json --platform cisco-ios\nnetintel-ocr kg zero-trust-audit --collection [name] --output zt_audit.json\nnetintel-ocr kg evidence-package --framework PCI-DSS --output evidence.zip\n</code></pre>"},{"location":"usecase-incident/","title":"Intelligent Incident Response","text":""},{"location":"usecase-incident/#scenario-overview","title":"Scenario Overview","text":"<p>Organization: Cloud service provider with global infrastructure Challenge: 15-minute SLA for incident resolution Scale: 15 regions, 100+ data centers, mixed vendor equipment Complexity: Cascading failures, complex service dependencies  </p>"},{"location":"usecase-incident/#technical-workflow","title":"Technical Workflow","text":""},{"location":"usecase-incident/#step-1-initialize-incident-response-system","title":"Step 1: Initialize Incident Response System","text":"<pre><code># Setup incident response environment\nmkdir -p incident-response/{runbooks,topology,logs,analysis}\ncd incident-response\n\n# Configure real-time monitoring integration\ncat &gt; incident_config.yaml &lt;&lt; EOF\ncollection: incident_response\nrealtime: true\nalert_sources:\n  - pagerduty:\n      api_key: ${PAGERDUTY_API_KEY}\n  - datadog:\n      api_key: ${DATADOG_API_KEY}\n  - splunk:\n      endpoint: https://splunk.internal:8089\nrunbook_dir: runbooks/\ntopology_dir: topology/\nkg_model: RotatE\nkg_update_interval: 300  # seconds\nEOF\n\n# Initialize KG with incident response focus\nnetintel-ocr kg init --config incident_config.yaml --mode incident-response\n</code></pre>"},{"location":"usecase-incident/#step-2-ingest-operational-documentation","title":"Step 2: Ingest Operational Documentation","text":"<pre><code># Process network topology documents\nnetintel-ocr --batch \\\n  --kg-model RotatE \\\n  --extract-service-dependencies \\\n  --extract-redundancy-paths \\\n  topology/*.pdf \\\n  --output analysis/topology/\n\n# Process runbook library\nfor runbook in runbooks/*.pdf; do\n  netintel-ocr \\\n    --extract-procedures \\\n    --kg-store-runbooks \\\n    \"$runbook\" \\\n    --output \"analysis/runbooks/$(basename $runbook .pdf)/\"\ndone\n\n# Build service dependency graph\nnetintel-ocr kg build-dependencies \\\n  --collection incident_response \\\n  --include-cascading-effects \\\n  --output analysis/service_dependencies.json\n\n# Index runbooks for fast retrieval\nnetintel-ocr kg index-runbooks \\\n  --collection incident_response \\\n  --runbook-dir analysis/runbooks/\n</code></pre>"},{"location":"usecase-incident/#step-3-real-time-incident-correlation","title":"Step 3: Real-time Incident Correlation","text":"<pre><code># Start incident correlation service\nnetintel-ocr kg monitor \\\n  --collection incident_response \\\n  --config incident_config.yaml \\\n  --daemon &amp;\n\n# Simulate incident (or wait for real alert)\ncat &gt; test_incident.json &lt;&lt; EOF\n{\n  \"id\": \"INC-2024-1847\",\n  \"severity\": \"P1\",\n  \"timestamp\": \"2024-01-15T14:23:00Z\",\n  \"alerts\": [\n    {\"source\": \"datadog\", \"metric\": \"mysql.connections\", \"value\": 0},\n    {\"source\": \"pagerduty\", \"service\": \"customer-api\", \"status\": \"down\"},\n    {\"source\": \"splunk\", \"log\": \"Connection timeout to 10.10.10.5:3306\"}\n  ]\n}\nEOF\n\n# Correlate incident\nnetintel-ocr kg correlate \\\n  --incident test_incident.json \\\n  --collection incident_response \\\n  --output analysis/correlation_INC-2024-1847.json\n\n# View correlation results\ncat analysis/correlation_INC-2024-1847.json | jq '.root_cause'\n\n# Output:\n# {\n#   \"component\": \"Core-Switch-USE1-A\",\n#   \"confidence\": 0.873,\n#   \"evidence\": [\n#     \"Network path disruption detected\",\n#     \"Multiple dependent services affected\",\n#     \"Historical pattern match: 89%\"\n#   ],\n#   \"impact_radius\": {\n#     \"services\": 12,\n#     \"customers\": 12847,\n#     \"revenue_per_hour\": 45000\n#   }\n# }\n</code></pre>"},{"location":"usecase-incident/#step-4-automated-runbook-execution","title":"Step 4: Automated Runbook Execution","text":"<pre><code># Find relevant runbooks\nnetintel-ocr kg find-runbooks \\\n  --incident analysis/correlation_INC-2024-1847.json \\\n  --collection incident_response \\\n  --min-relevance 0.7 \\\n  --output analysis/relevant_runbooks.json\n\n# Select and prepare runbook\nRUNBOOK_ID=$(cat analysis/relevant_runbooks.json | jq -r '.[0].id')\n\nnetintel-ocr kg prepare-runbook \\\n  --runbook-id \"$RUNBOOK_ID\" \\\n  --incident analysis/correlation_INC-2024-1847.json \\\n  --output analysis/runbook_execution.sh\n\n# Execute runbook with monitoring\nnetintel-ocr kg execute-runbook \\\n  --script analysis/runbook_execution.sh \\\n  --mode interactive \\\n  --log analysis/execution.log &amp;\n\n# Monitor execution progress\ntail -f analysis/execution.log\n\n# Output:\n# [14:24:15] Starting runbook: Network Switch Recovery\n# [14:24:16] Step 1/8: Verify switch status via SNMP\n# [14:24:18] Result: Switch unreachable\n# [14:24:18] Step 2/8: Attempt remote reboot via OOB\n# [14:24:22] Result: Reboot initiated\n# [14:24:22] Step 3/8: Wait for switch to come online (timeout: 120s)\n# [14:25:43] Result: Switch online\n# [14:25:43] Step 4/8: Verify port status\n# [14:25:45] Result: All ports active\n# [14:25:45] Step 5/8: Test connectivity to dependent services\n# [14:25:48] Result: Connectivity restored\n# [14:25:48] Runbook completed successfully\n# [14:25:48] Total execution time: 93 seconds\n</code></pre>"},{"location":"usecase-incident/#step-5-root-cause-analysis","title":"Step 5: Root Cause Analysis","text":"<pre><code># Perform deep RCA\nnetintel-ocr kg rca \\\n  --incident analysis/correlation_INC-2024-1847.json \\\n  --collection incident_response \\\n  --lookback 7d \\\n  --include-changes \\\n  --include-patterns \\\n  --output analysis/rca_INC-2024-1847.json\n\n# Generate timeline\nnetintel-ocr kg timeline \\\n  --incident analysis/correlation_INC-2024-1847.json \\\n  --window 1h \\\n  --output analysis/incident_timeline.json\n\n# View timeline\ncat analysis/incident_timeline.json | jq '.events[] | {time: .timestamp, event: .description, severity: .severity}'\n\n# Output:\n# {\"time\": \"14:15:00\", \"event\": \"Config change on Core-Switch-USE1-A\", \"severity\": \"info\"}\n# {\"time\": \"14:20:00\", \"event\": \"Memory utilization spike to 95%\", \"severity\": \"warning\"}\n# {\"time\": \"14:22:30\", \"event\": \"Switch CPU lockup detected\", \"severity\": \"critical\"}\n# {\"time\": \"14:23:00\", \"event\": \"Network connectivity lost\", \"severity\": \"critical\"}\n# {\"time\": \"14:23:05\", \"event\": \"Cascading service failures begin\", \"severity\": \"critical\"}\n\n# Find similar past incidents\nnetintel-ocr kg find-similar-incidents \\\n  --incident analysis/correlation_INC-2024-1847.json \\\n  --collection incident_response \\\n  --min-similarity 0.7 \\\n  --limit 5 \\\n  --output analysis/similar_incidents.json\n\n# Learn from past resolutions\ncat analysis/similar_incidents.json | jq '.[] | {id: .incident_id, similarity: .similarity_score, resolution: .resolution_summary, mttr: .mttr_minutes}'\n</code></pre>"},{"location":"usecase-incident/#step-6-prevention-and-optimization","title":"Step 6: Prevention and Optimization","text":"<pre><code># Generate prevention recommendations\nnetintel-ocr kg prevent \\\n  --rca analysis/rca_INC-2024-1847.json \\\n  --collection incident_response \\\n  --output analysis/prevention_recommendations.json\n\n# View recommendations\ncat analysis/prevention_recommendations.json | jq '.recommendations[] | {priority: .priority, action: .action, risk_reduction: .risk_reduction_percent}'\n\n# Output:\n# {\"priority\": \"HIGH\", \"action\": \"Upgrade switch firmware to 15.2.7\", \"risk_reduction\": 67}\n# {\"priority\": \"HIGH\", \"action\": \"Implement memory monitoring threshold at 85%\", \"risk_reduction\": 45}\n# {\"priority\": \"MEDIUM\", \"action\": \"Add redundant switch for failover\", \"risk_reduction\": 89}\n\n# Generate configuration changes\nnetintel-ocr kg generate-prevention \\\n  --recommendations analysis/prevention_recommendations.json \\\n  --platform cisco-ios \\\n  --output prevention/\n\n# Update runbooks based on incident\nnetintel-ocr kg update-runbooks \\\n  --incident analysis/correlation_INC-2024-1847.json \\\n  --lessons-learned analysis/rca_INC-2024-1847.json \\\n  --collection incident_response\n\n# Calculate metrics improvement\nnetintel-ocr kg metrics \\\n  --collection incident_response \\\n  --period 30d \\\n  --compare-previous \\\n  --output analysis/metrics_improvement.json\n\ncat analysis/metrics_improvement.json | jq '.summary'\n\n# Output:\n# {\n#   \"mttr\": {\n#     \"previous\": 45,\n#     \"current\": 15,\n#     \"improvement_percent\": 67\n#   },\n#   \"incidents\": {\n#     \"total\": 47,\n#     \"auto_resolved\": 37,\n#     \"automation_rate\": 78.7\n#   },\n#   \"accuracy\": {\n#     \"root_cause_first_try\": 89,\n#     \"runbook_relevance\": 92\n#   },\n#   \"business_impact\": {\n#     \"downtime_prevented_hours\": 340,\n#     \"revenue_protected\": 3200000\n#   }\n# }\n</code></pre>"},{"location":"usecase-incident/#advanced-incident-analysis","title":"Advanced Incident Analysis","text":""},{"location":"usecase-incident/#pattern-recognition","title":"Pattern Recognition","text":"<pre><code># Identify incident patterns\nnetintel-ocr kg pattern-analysis \\\n  --collection incident_response \\\n  --period 90d \\\n  --min-occurrences 3 \\\n  --output analysis/incident_patterns.json\n\n# Find recurring issues\ncat analysis/incident_patterns.json | jq '.patterns[] | select(.recurrence &gt; 5)'\n\n# Predict next incident\nnetintel-ocr kg predict \\\n  --collection incident_response \\\n  --model time-series \\\n  --horizon 7d \\\n  --output analysis/predictions.json\n</code></pre>"},{"location":"usecase-incident/#service-impact-modeling","title":"Service Impact Modeling","text":"<pre><code># Model cascading failures\nnetintel-ocr kg cascade-model \\\n  --component \"Database-Primary\" \\\n  --failure-type \"complete\" \\\n  --time-window 30m \\\n  --output analysis/cascade_impact.json\n\n# Calculate business impact\nnetintel-ocr kg business-impact \\\n  --cascade-model analysis/cascade_impact.json \\\n  --customer-data /data/customers.csv \\\n  --revenue-model /data/revenue.json \\\n  --output analysis/business_impact.json\n\n# View impact summary\ncat analysis/business_impact.json | jq '.summary'\n# {\n#   \"affected_customers\": 45000,\n#   \"revenue_at_risk\": 2300000,\n#   \"sla_violations\": 234,\n#   \"reputation_score_impact\": -12\n# }\n</code></pre>"},{"location":"usecase-incident/#runbook-optimization","title":"Runbook Optimization","text":"<pre><code># Analyze runbook effectiveness\nnetintel-ocr kg runbook-analytics \\\n  --collection incident_response \\\n  --period 180d \\\n  --output analysis/runbook_effectiveness.json\n\n# Find ineffective steps\ncat analysis/runbook_effectiveness.json | jq '.runbooks[] | select(.success_rate &lt; 0.7)'\n\n# Optimize runbook order\nnetintel-ocr kg optimize-runbooks \\\n  --collection incident_response \\\n  --optimization-goal \"minimize_mttr\" \\\n  --output analysis/optimized_runbooks.json\n\n# Test optimized runbooks\nnetintel-ocr kg simulate-incidents \\\n  --runbooks analysis/optimized_runbooks.json \\\n  --scenarios 100 \\\n  --output analysis/simulation_results.json\n</code></pre>"},{"location":"usecase-incident/#real-time-monitoring","title":"Real-time Monitoring","text":"<pre><code># Start real-time dashboard\nnetintel-ocr kg dashboard \\\n  --collection incident_response \\\n  --mode realtime \\\n  --port 8080 &amp;\n\n# Monitor active incidents\nwatch -n 5 'netintel-ocr kg active-incidents --format table'\n\n# Stream correlation events\nnetintel-ocr kg stream \\\n  --collection incident_response \\\n  --event-types \"correlation,resolution,escalation\" \\\n  --output-format json | tee -a logs/event_stream.jsonl\n\n# Alert on critical patterns\nnetintel-ocr kg alert \\\n  --collection incident_response \\\n  --condition \"cascade_risk &gt; 0.8\" \\\n  --action \"notify:slack,create:incident\" \\\n  --config alert_config.yaml\n</code></pre>"},{"location":"usecase-incident/#performance-metrics","title":"Performance Metrics","text":"<pre><code># Measure correlation accuracy\nnetintel-ocr kg benchmark \\\n  --collection incident_response \\\n  --operation correlation \\\n  --test-incidents test_data/incidents/*.json \\\n  --output analysis/correlation_accuracy.json\n\n# Results:\n# {\n#   \"total_incidents\": 100,\n#   \"correct_root_cause\": 89,\n#   \"accuracy\": 0.89,\n#   \"avg_correlation_time_ms\": 340,\n#   \"p99_correlation_time_ms\": 780\n# }\n\n# Measure runbook execution time\nnetintel-ocr kg benchmark \\\n  --collection incident_response \\\n  --operation runbook-execution \\\n  --runbooks analysis/runbooks/*.json \\\n  --output analysis/runbook_performance.json\n</code></pre>"},{"location":"usecase-incident/#key-metrics","title":"Key Metrics","text":""},{"location":"usecase-incident/#response-performance","title":"Response Performance","text":"<ul> <li>MTTR: 45 min \u2192 15 min (67% reduction)</li> <li>First-call resolution: 78% (from 34%)</li> <li>Escalation rate: 45% reduction</li> <li>False positives: 8% (from 23%)</li> </ul>"},{"location":"usecase-incident/#automation-impact","title":"Automation Impact","text":"<ul> <li>Runbooks automated: 156 procedures</li> <li>Auto-resolution rate: 78.7%</li> <li>Manual interventions: 22% of incidents</li> <li>Time saved: 340 hours/year</li> </ul>"},{"location":"usecase-incident/#business-value","title":"Business Value","text":"<ul> <li>Revenue protected: $3.2M annually</li> <li>SLA compliance: 98.5% (from 87%)</li> <li>Customer impact: 67% fewer affected</li> <li>NPS improvement: +25 points</li> </ul>"},{"location":"usecase-incident/#commands-reference","title":"Commands Reference","text":"<pre><code># Essential incident response commands\nnetintel-ocr kg correlate --incident incident.json --output correlation.json\nnetintel-ocr kg find-runbooks --incident correlation.json --min-relevance 0.7\nnetintel-ocr kg execute-runbook --script runbook.sh --mode interactive\nnetintel-ocr kg rca --incident correlation.json --lookback 7d\nnetintel-ocr kg prevent --rca rca.json --output recommendations.json\n</code></pre>"},{"location":"usecase-migration/","title":"Network Infrastructure Migration Planning","text":""},{"location":"usecase-migration/#scenario-overview","title":"Scenario Overview","text":"<p>Organization: Telecommunications provider with 50 data centers Challenge: Migrate to cloud infrastructure with zero unplanned downtime Documentation: 523 network PDFs, 1,200+ configuration files Complexity: Unknown dependencies between legacy and modern systems  </p>"},{"location":"usecase-migration/#technical-workflow","title":"Technical Workflow","text":""},{"location":"usecase-migration/#step-1-environment-setup","title":"Step 1: Environment Setup","text":"<pre><code># Install NetIntel-OCR with KG support (included by default in v0.1.17)\npip install netintel-ocr==0.1.17\n\n# Start required services\ndocker-compose up -d falkordb milvus ollama\n\n# Verify services\nnetintel-ocr kg check-requirements\n\n# Expected output:\n# \u2705 FalkorDB: Connected (localhost:6379)\n# \u2705 Milvus: Connected (localhost:19530)\n# \u2705 Ollama: Connected (localhost:11434)\n# \u2705 PyKEEN: Installed (8 models available)\n</code></pre>"},{"location":"usecase-migration/#step-2-process-infrastructure-documentation","title":"Step 2: Process Infrastructure Documentation","text":"<pre><code># Create project directory\nmkdir -p telecom-migration/{input,output,analysis}\ncd telecom-migration\n\n# Copy all documentation to input directory\ncp /shared/docs/network/*.pdf input/\ncp /shared/docs/configs/*.pdf input/\ncp /shared/docs/architecture/*.pdf input/\n\n# Process all PDFs with Knowledge Graph extraction\nnetintel-ocr --batch \\\n  --kg-model RotatE \\\n  --kg-epochs 200 \\\n  --kg-batch-size 512 \\\n  --max-parallel 8 \\\n  --output output/ \\\n  --collection telecom_migration \\\n  input/*.pdf\n\n# Monitor processing progress\ntail -f output/processing.log\n\n# Expected output:\n# [2024-01-15 10:23:45] Processing: network-datacenter-east.pdf\n# [2024-01-15 10:23:47] Detected network diagram on page 3\n# [2024-01-15 10:23:48] Extracted 47 entities, 156 relationships\n# [2024-01-15 10:23:50] Stored in FalkorDB graph\n# ...\n# [2024-01-15 11:45:23] Completed: 523 documents processed\n# [2024-01-15 11:45:23] Total entities: 3,847\n# [2024-01-15 11:45:23] Total relationships: 12,493\n</code></pre>"},{"location":"usecase-migration/#step-3-train-knowledge-graph-embeddings","title":"Step 3: Train Knowledge Graph Embeddings","text":"<pre><code># Train KG embeddings on extracted graph\nnetintel-ocr kg train \\\n  --collection telecom_migration \\\n  --model RotatE \\\n  --epochs 200 \\\n  --embedding-dim 200 \\\n  --batch-size 512 \\\n  --gpu cuda:0 \\\n  --save-path output/kg_embeddings\n\n# Monitor training metrics\ntensorboard --logdir output/kg_embeddings/logs\n\n# Verify embeddings\nnetintel-ocr kg stats --collection telecom_migration\n\n# Output:\n# Knowledge Graph Statistics:\n#   Entities: 3,847\n#   Relationships: 12,493\n#   Entity Types: 15\n#   Relation Types: 23\n#   Embeddings: 200D vectors\n#   Model Performance:\n#     MRR: 0.89\n#     Hits@10: 0.94\n#     Training Loss: 0.0234\n</code></pre>"},{"location":"usecase-migration/#step-4-dependency-analysis","title":"Step 4: Dependency Analysis","text":"<pre><code># Find all dependencies of critical systems\nnetintel-ocr kg query \\\n  --collection telecom_migration \\\n  --type dependencies \\\n  --entity \"BillingSystem-PROD\" \\\n  --max-depth 3 \\\n  --output-format json &gt; analysis/billing_dependencies.json\n\n# Analyze the dependencies\ncat analysis/billing_dependencies.json | jq '.dependencies[] | select(.criticality &gt; 8)'\n\n# Output:\n# {\n#   \"name\": \"Oracle-RAC-01\",\n#   \"type\": \"database\",\n#   \"criticality\": 10,\n#   \"path\": [\"BillingSystem-PROD\", \"DB-Cluster\", \"Oracle-RAC-01\"],\n#   \"migration_impact\": \"high\",\n#   \"downtime_required\": \"4 hours\"\n# }\n\n# Find all single points of failure\nnetintel-ocr kg analyze \\\n  --collection telecom_migration \\\n  --analysis-type single-points-of-failure \\\n  --output analysis/spof.json\n\n# Generate migration waves based on dependencies\nnetintel-ocr kg migration-plan \\\n  --collection telecom_migration \\\n  --target-architecture cloud-native \\\n  --max-downtime 4h \\\n  --output analysis/migration_waves.json\n\n# View migration waves\ncat analysis/migration_waves.json | jq '.waves[] | {number: .wave_number, components: .components | length, risk: .risk_level}'\n\n# Output:\n# {\"number\": 1, \"components\": 23, \"risk\": \"low\"}\n# {\"number\": 2, \"components\": 45, \"risk\": \"low\"}\n# {\"number\": 3, \"components\": 67, \"risk\": \"medium\"}\n# {\"number\": 4, \"components\": 89, \"risk\": \"medium\"}\n# {\"number\": 5, \"components\": 112, \"risk\": \"high\"}\n# {\"number\": 6, \"components\": 34, \"risk\": \"critical\"}\n</code></pre>"},{"location":"usecase-migration/#step-5-cloud-compatibility-check","title":"Step 5: Cloud Compatibility Check","text":"<pre><code># Check cloud compatibility for all components\nnetintel-ocr kg cloud-check \\\n  --collection telecom_migration \\\n  --provider aws \\\n  --region us-east-1 \\\n  --output analysis/cloud_compatibility.json\n\n# Find incompatible configurations\ncat analysis/cloud_compatibility.json | jq '.incompatible[] | {component: .name, reason: .incompatibility_reason}'\n\n# Generate configuration migration scripts\nnetintel-ocr kg generate-configs \\\n  --collection telecom_migration \\\n  --source-format cisco-ios \\\n  --target-format aws-vpc \\\n  --output analysis/config_scripts/\n\n# List generated scripts\nls -la analysis/config_scripts/\n# vpc_setup.tf\n# security_groups.tf\n# route_tables.tf\n# network_acls.tf\n</code></pre>"},{"location":"usecase-migration/#step-6-generate-migration-report","title":"Step 6: Generate Migration Report","text":"<pre><code># Generate comprehensive migration report\nnetintel-ocr kg report \\\n  --collection telecom_migration \\\n  --report-type migration \\\n  --include-dependencies \\\n  --include-risks \\\n  --include-timeline \\\n  --format pdf \\\n  --output analysis/migration_report.pdf\n\n# Generate executive summary\nnetintel-ocr kg report \\\n  --collection telecom_migration \\\n  --report-type executive-summary \\\n  --format markdown \\\n  --output analysis/executive_summary.md\n\n# View key metrics\ngrep -E \"Dependencies Found|Hidden Connections|Migration Waves|Estimated Duration|Risk Score\" analysis/executive_summary.md\n\n# Output:\n# Dependencies Found: 12,493\n# Hidden Connections: 23 (undocumented)\n# Migration Waves: 6\n# Estimated Duration: 8 weeks\n# Risk Score: Medium (6.2/10)\n</code></pre>"},{"location":"usecase-migration/#validation-and-testing","title":"Validation and Testing","text":"<pre><code># Validate migration plan completeness\nnetintel-ocr kg validate \\\n  --collection telecom_migration \\\n  --validation-type migration-completeness\n\n# Output:\n# \u2705 All components included in migration plan\n# \u2705 No circular dependencies detected\n# \u2705 All critical paths identified\n# \u2705 Rollback procedures defined\n# \u26a0\ufe0f  3 components need manual verification\n\n# Compare with manual analysis (if available)\nnetintel-ocr kg compare \\\n  --collection telecom_migration \\\n  --manual-analysis /shared/docs/manual_dependencies.xlsx \\\n  --output analysis/comparison.json\n\n# Results:\n# Accuracy: 94% (vs 67% manual)\n# Additional findings: 23 connections not in manual analysis\n# Time saved: 3 months \u2192 2 days\n</code></pre>"},{"location":"usecase-migration/#advanced-graph-queries","title":"Advanced Graph Queries","text":""},{"location":"usecase-migration/#finding-hidden-dependencies","title":"Finding Hidden Dependencies","text":"<pre><code># Use Cypher to find undocumented connections\nnetintel-ocr kg query \\\n  --cypher \"MATCH p=(a:Component)-[*2..4]-(b:Component) \n            WHERE NOT (a)-[:DOCUMENTED_CONNECTION]-(b) \n            AND a.criticality &gt; 7 \n            AND b.criticality &gt; 7 \n            RETURN p LIMIT 20\" \\\n  --output analysis/hidden_paths.json\n</code></pre>"},{"location":"usecase-migration/#impact-analysis","title":"Impact Analysis","text":"<pre><code># What happens if this component fails?\nnetintel-ocr kg impact \\\n  --component \"Core-Router-DC1\" \\\n  --cascade-depth 5 \\\n  --include-services \\\n  --include-customers \\\n  --output analysis/router_impact.json\n\n# View affected services\ncat analysis/router_impact.json | jq '.affected_services[] | {name: .service, customers: .customer_count, revenue_impact: .hourly_revenue}'\n</code></pre>"},{"location":"usecase-migration/#migration-risk-assessment","title":"Migration Risk Assessment","text":"<pre><code># Calculate risk score for each wave\nfor i in {1..6}; do\n  netintel-ocr kg risk-score \\\n    --collection telecom_migration \\\n    --wave $i \\\n    --factors \"complexity,dependencies,criticality,testing\" \\\n    --output \"analysis/wave_${i}_risk.json\"\ndone\n\n# Aggregate risk report\nnetintel-ocr kg aggregate-risk \\\n  --risk-files \"analysis/wave_*_risk.json\" \\\n  --output analysis/total_migration_risk.json\n</code></pre>"},{"location":"usecase-migration/#performance-metrics","title":"Performance Metrics","text":"<pre><code># Measure KG query performance\nnetintel-ocr kg benchmark \\\n  --collection telecom_migration \\\n  --query-file benchmarks/migration_queries.txt \\\n  --iterations 100 \\\n  --output analysis/performance.json\n\n# Results:\n# {\n#   \"dependency_traversal\": {\n#     \"avg_ms\": 120,\n#     \"p99_ms\": 230,\n#     \"max_depth_tested\": 5\n#   },\n#   \"embedding_similarity\": {\n#     \"avg_ms\": 85,\n#     \"p99_ms\": 140,\n#     \"vectors_compared\": 3847\n#   },\n#   \"hybrid_query\": {\n#     \"avg_ms\": 180,\n#     \"p99_ms\": 290,\n#     \"accuracy\": 0.94\n#   }\n# }\n</code></pre>"},{"location":"usecase-migration/#key-findings","title":"Key Findings","text":""},{"location":"usecase-migration/#graph-statistics","title":"Graph Statistics","text":"<ul> <li>Entities extracted: 3,847 network components</li> <li>Relationships mapped: 12,493 connections</li> <li>Hidden dependencies found: 23 critical paths</li> <li>Single points of failure: 5 components</li> </ul>"},{"location":"usecase-migration/#migration-insights","title":"Migration Insights","text":"<ul> <li>Migration waves: 6 phases minimizing disruption</li> <li>Risk assessment: Medium overall (6.2/10)</li> <li>Estimated duration: 8 weeks</li> <li>Rollback points: Defined for each wave</li> </ul>"},{"location":"usecase-migration/#performance-gains","title":"Performance Gains","text":"<ul> <li>Analysis time: 3 months \u2192 2 days</li> <li>Accuracy: 94% vs 67% manual</li> <li>Cost savings: Reduced consultant requirements</li> <li>Risk reduction: Identified issues before migration</li> </ul>"},{"location":"usecase-migration/#commands-reference","title":"Commands Reference","text":"<pre><code># Essential migration commands\nnetintel-ocr kg migration-plan --collection [name] --output plan.json\nnetintel-ocr kg find-dependencies --entity [name] --max-depth 3\nnetintel-ocr kg cloud-check --provider aws --output compatibility.json\nnetintel-ocr kg validate --validation-type migration-completeness\nnetintel-ocr kg risk-score --wave [number] --output risk.json\n</code></pre>"},{"location":"vector-search/","title":"Vector Search Guide","text":""},{"location":"vector-search/#overview","title":"Overview","text":"<p>NetIntel-OCR integrates with Milvus to enable semantic search across processed documents, network components, and architectural patterns.</p>"},{"location":"vector-search/#milvus-setup","title":"Milvus Setup","text":""},{"location":"vector-search/#docker-installation","title":"Docker Installation","text":"<pre><code># Start Milvus standalone\ndocker run -d \\\n  --name milvus-standalone \\\n  -p 19530:19530 \\\n  -p 9091:9091 \\\n  -v milvus_data:/var/lib/milvus \\\n  milvusdb/milvus:latest \\\n  milvus run standalone\n</code></pre>"},{"location":"vector-search/#kubernetes-installation","title":"Kubernetes Installation","text":"<pre><code># Install with Helm\nhelm repo add milvus https://milvus-io.github.io/milvus-helm/\nhelm install milvus milvus/milvus --set cluster.enabled=false\n</code></pre>"},{"location":"vector-search/#document-ingestion","title":"Document Ingestion","text":""},{"location":"vector-search/#basic-ingestion","title":"Basic Ingestion","text":"<pre><code># Process and ingest document\nnetintel-ocr --vector-store milvus \\\n             --milvus-host localhost:19530 \\\n             --ingest \\\n             document.pdf\n</code></pre>"},{"location":"vector-search/#batch-ingestion","title":"Batch Ingestion","text":"<pre><code># Ingest multiple documents\nfor pdf in *.pdf; do\n  netintel-ocr --ingest --collection network-docs \"$pdf\"\ndone\n\n# Or use batch mode\nnetintel-ocr --batch-ingest --collection network-docs *.pdf\n</code></pre>"},{"location":"vector-search/#collection-configuration","title":"Collection Configuration","text":"<pre><code># Define collection schema\nfrom netintel_ocr.vector import create_collection\n\ncreate_collection(\n    name=\"network_components\",\n    dim=768,  # Embedding dimension\n    fields={\n        \"component_type\": \"VARCHAR\",\n        \"security_zone\": \"VARCHAR\", \n        \"criticality\": \"INT32\",\n        \"document_id\": \"VARCHAR\",\n        \"page_number\": \"INT32\"\n    }\n)\n</code></pre>"},{"location":"vector-search/#embedding-generation","title":"Embedding Generation","text":""},{"location":"vector-search/#component-embeddings","title":"Component Embeddings","text":"<p>Documents are processed into multiple embedding types:</p> <pre><code># Generated embeddings\nembeddings = {\n    \"document\": [...],      # Full document embedding\n    \"pages\": [...],        # Per-page embeddings\n    \"components\": [...],   # Network component embeddings\n    \"relationships\": [...] # Connection embeddings\n}\n</code></pre>"},{"location":"vector-search/#custom-embedding-model","title":"Custom Embedding Model","text":"<pre><code># Use specific embedding model\nnetintel-ocr --embedding-model all-MiniLM-L6-v2 \\\n             --ingest document.pdf\n\n# Or use Ollama embeddings\nnetintel-ocr --embedding-model ollama/nomic-embed-text \\\n             --ingest document.pdf\n</code></pre>"},{"location":"vector-search/#search-queries","title":"Search Queries","text":""},{"location":"vector-search/#cli-search","title":"CLI Search","text":"<pre><code># Search for components\nnetintel-ocr --search \"firewall in DMZ zone\"\n\n# Search with filters\nnetintel-ocr --search \"router\" \\\n             --filter \"security_zone=external\" \\\n             --limit 10\n</code></pre>"},{"location":"vector-search/#python-api","title":"Python API","text":"<pre><code>from netintel_ocr.vector import VectorSearch\n\nsearch = VectorSearch(host=\"localhost:19530\")\n\n# Semantic search\nresults = search.query(\n    text=\"Find all components with internet exposure\",\n    collection=\"network_components\",\n    limit=20\n)\n\n# Filtered search\nresults = search.query(\n    text=\"database servers\",\n    filter=\"criticality &gt;= 8\",\n    limit=10\n)\n\n# Component relationship search\nconnections = search.find_connections(\n    source=\"web_server\",\n    max_hops=3\n)\n</code></pre>"},{"location":"vector-search/#rest-api","title":"REST API","text":"<pre><code># Search endpoint\ncurl -X POST http://localhost:8000/search \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"query\": \"firewall configurations\",\n    \"collection\": \"network_docs\",\n    \"limit\": 10,\n    \"filter\": {\n      \"document_type\": \"security\"\n    }\n  }'\n</code></pre>"},{"location":"vector-search/#query-examples","title":"Query Examples","text":""},{"location":"vector-search/#find-similar-network-architectures","title":"Find Similar Network Architectures","text":"<pre><code># Upload reference architecture\nreference = process_diagram(\"reference_architecture.png\")\n\n# Find similar architectures\nsimilar = search.find_similar(\n    embedding=reference.embedding,\n    threshold=0.85,\n    limit=5\n)\n</code></pre>"},{"location":"vector-search/#security-zone-analysis","title":"Security Zone Analysis","text":"<pre><code># Find all components in DMZ\ndmz_components = search.query(\n    filter=\"security_zone='DMZ'\",\n    include_metadata=True\n)\n\n# Find cross-zone connections\ncross_zone = search.query(\n    text=\"connections between internal and external zones\",\n    include_relationships=True\n)\n</code></pre>"},{"location":"vector-search/#compliance-queries","title":"Compliance Queries","text":"<pre><code># Find exposed services\nexposed = search.query(\n    text=\"services accessible from internet\",\n    filter=\"exposure='external'\"\n)\n\n# Find unencrypted connections\nunencrypted = search.query(\n    text=\"connections without encryption\",\n    filter=\"encrypted=false\"\n)\n</code></pre>"},{"location":"vector-search/#index-management","title":"Index Management","text":""},{"location":"vector-search/#create-indexes","title":"Create Indexes","text":"<pre><code>from netintel_ocr.vector import IndexManager\n\nindex = IndexManager()\n\n# Create IVF index for large collections\nindex.create_index(\n    collection=\"network_components\",\n    index_type=\"IVF_FLAT\",\n    metric_type=\"L2\",\n    params={\"nlist\": 1024}\n)\n\n# Create HNSW index for high accuracy\nindex.create_index(\n    collection=\"critical_components\",\n    index_type=\"HNSW\",\n    params={\"M\": 16, \"efConstruction\": 200}\n)\n</code></pre>"},{"location":"vector-search/#optimize-performance","title":"Optimize Performance","text":"<pre><code># Compact collection\nnetintel-ocr --compact-collection network_components\n\n# Build index\nnetintel-ocr --build-index network_components\n\n# Load collection to memory\nnetintel-ocr --load-collection network_components\n</code></pre>"},{"location":"vector-search/#integration-examples","title":"Integration Examples","text":""},{"location":"vector-search/#cmdb-population","title":"CMDB Population","text":"<pre><code>from netintel_ocr import DocumentProcessor\nfrom cmdb_client import CMDBClient\n\n# Process document\nprocessor = DocumentProcessor()\nresults = processor.process(\"network_design.pdf\")\n\n# Populate CMDB\ncmdb = CMDBClient()\nfor component in results.components:\n    cmdb.create_ci({\n        \"name\": component.name,\n        \"type\": component.type,\n        \"attributes\": component.metadata,\n        \"relationships\": component.connections\n    })\n</code></pre>"},{"location":"vector-search/#change-detection","title":"Change Detection","text":"<pre><code># Compare document versions\nold_doc = search.get_document(\"design_v1.pdf\")\nnew_doc = process_document(\"design_v2.pdf\")\n\n# Find changes\nchanges = search.compare_architectures(\n    old_doc.embedding,\n    new_doc.embedding\n)\n\nprint(f\"Added components: {changes.added}\")\nprint(f\"Removed components: {changes.removed}\")\nprint(f\"Modified connections: {changes.modified}\")\n</code></pre>"},{"location":"vector-search/#knowledge-graph","title":"Knowledge Graph","text":"<pre><code># Build knowledge graph\nfrom netintel_ocr.graph import KnowledgeGraph\n\nkg = KnowledgeGraph()\n\n# Add documents to graph\nfor doc in documents:\n    kg.add_document(doc)\n\n# Query relationships\npaths = kg.find_path(\n    from_component=\"internet_gateway\",\n    to_component=\"database_server\"\n)\n\n# Find critical paths\ncritical = kg.find_critical_paths(\n    metric=\"security_exposure\"\n)\n</code></pre>"},{"location":"vector-search/#monitoring","title":"Monitoring","text":""},{"location":"vector-search/#collection-statistics","title":"Collection Statistics","text":"<pre><code># View collection stats\nnetintel-ocr --collection-stats network_components\n\n# Monitor query performance\nnetintel-ocr --query-stats --last 24h\n</code></pre>"},{"location":"vector-search/#health-checks","title":"Health Checks","text":"<pre><code># Check Milvus health\nfrom netintel_ocr.vector import health_check\n\nstatus = health_check()\nprint(f\"Milvus status: {status.state}\")\nprint(f\"Collections: {status.collections}\")\nprint(f\"Total vectors: {status.total_vectors}\")\n</code></pre>"},{"location":"vector-search/#best-practices","title":"Best Practices","text":"<ol> <li>Collection Partitioning: Partition by document type or date</li> <li>Embedding Cache: Cache frequently accessed embeddings</li> <li>Batch Operations: Use batch insert for large datasets</li> <li>Index Selection: Choose index based on dataset size</li> <li>Regular Compaction: Compact collections weekly</li> </ol>"},{"location":"vector-search/#next-steps","title":"Next Steps","text":"<ul> <li>Customization Guide - Tune extraction and embeddings</li> <li>Deployment Guide - Production Milvus setup</li> <li>Quick Start Guide - Basic usage examples</li> </ul>"}]}